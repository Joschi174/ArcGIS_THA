/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.9.2
 */
import { r as registerInstance, c as createEvent, h, H as Host, a as getElement } from './index-57f4809d.js';
import { b as slotChangeHasAssignedElement, t as toAriaBoolean, e as getSlotted, h as setRequestedIcon } from './dom-158133b6.js';
import { s as setUpLoadableComponent, a as setComponentLoaded, c as componentFocusable } from './loadable-46e63135.js';
import { c as connectLocalized, d as disconnectLocalized, n as numberStringFormatter } from './locale-bad69fe5.js';
import { o as onToggleOpenCloseComponent } from './openCloseComponent-7b0b4b4f.js';
import { c as connectMessages, s as setUpMessages, d as disconnectMessages, u as updateMessages } from './t9n-c5cd39db.js';
import { K as KindIcons } from './resources-00952dca.js';
import { g as getBreakpoints } from './responsive-58ab30b9.js';
import { c as createObserver } from './observers-72fa7eae.js';
import './guid-a5b8c53d.js';
import './resources-19304982.js';
import './key-cc1e5093.js';

const DURATIONS = {
  slow: 14000,
  medium: 10000,
  fast: 6000,
};
const SLOTS = {
  actionsEnd: "actions-end",
  title: "title",
  message: "message",
  link: "link",
};
const CSS = {
  actionsEnd: "actions-end",
  close: "close",
  container: "container",
  containerBottom: "container--bottom",
  containerBottomEnd: "container--bottom-end",
  containerBottomStart: "container--bottom-start",
  containerQueued: "container--queued",
  containerTop: "container--top",
  containerTopEnd: "container--top-end",
  containerTopStart: "container--top-start",
  content: "content",
  contentContainer: "content-container",
  dismissProgress: "dismiss-progress",
  footer: "footer",
  icon: "icon",
  containerSlottedInShell: "container--slotted-in-shell",
  queueCount: "queue-count",
  queueCountActive: "queue-count--active",
  textContainer: "text-container",
};

const alertCss = "/**\n * Do not edit directly\n * Generated on Thu, 12 Oct 2023 01:19:10 GMT\n */\n/* mixins & extensions */\n/* helper to properly scale internal durations */\n/**\n* Currently only used in Checkbox.\n*/\n/**\n* CSS Custom Properties\n*\n* These properties can be overridden using the component's tag as selector.\n*\n* @prop --calcite-alert-width: Specifies the width of the component.\n*/\n:host {\n  --calcite-alert-edge-distance: 2rem;\n  display: block;\n}\n\n.container {\n  pointer-events: none;\n  position: fixed;\n  z-index: var(--calcite-app-z-index-toast);\n  margin-inline: auto;\n  margin-block: 0px;\n  box-sizing: border-box;\n  display: flex;\n  inline-size: 100%;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--calcite-ui-foreground-1);\n  text-align: start;\n  opacity: 0;\n  --tw-shadow: 0 6px 20px -4px rgba(0, 0, 0, 0.1), 0 4px 12px -2px rgba(0, 0, 0, 0.08);\n  --tw-shadow-colored: 0 6px 20px -4px var(--tw-shadow-color), 0 4px 12px -2px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n  container: responsive-container/inline-size;\n  border-radius: var(--calcite-border-radius);\n  border-block-start: 0 solid transparent;\n  border-inline: 1px solid var(--calcite-ui-border-3);\n  border-block-end: 1px solid var(--calcite-ui-border-3);\n  inline-size: var(--calcite-alert-width);\n  max-inline-size: calc(100% - var(--calcite-alert-edge-distance) * 2);\n  transition: var(--calcite-internal-animation-timing-slow) cubic-bezier(0.215, 0.44, 0.42, 0.88), opacity var(--calcite-internal-animation-timing-slow) cubic-bezier(0.215, 0.44, 0.42, 0.88), all var(--calcite-animation-timing) ease-in-out;\n}\n.container--bottom, .container--top {\n  inset-inline-end: 0;\n  inset-inline-start: 0;\n}\n.container[class*=bottom] {\n  transform: translate3d(0, var(--calcite-alert-edge-distance), 0);\n  inset-block-end: var(--calcite-alert-edge-distance);\n}\n.container[class*=top] {\n  transform: translate3d(0, calc(-1 * var(--calcite-alert-edge-distance)), 0);\n  inset-block-start: var(--calcite-alert-edge-distance);\n}\n.container[class*=start] {\n  inset-inline-start: var(--calcite-alert-edge-distance);\n  inset-inline-end: auto;\n}\n.container[class*=end] {\n  inset-inline-end: var(--calcite-alert-edge-distance);\n  inset-inline-start: auto;\n}\n\n.content {\n  box-sizing: border-box;\n  display: flex;\n  flex: 1 1 auto;\n  flex-direction: column;\n  transition: all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;\n  padding-block: var(--calcite-alert-spacing-token-small);\n  padding-inline: var(--calcite-alert-spacing-token-large) var(--calcite-alert-spacing-token-small);\n}\n\n.icon {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  padding: 0px;\n  margin-block-end: var(--calcite-alert-spacing-token-large);\n  margin-inline-end: auto;\n}\n\n.close {\n  display: flex;\n  cursor: pointer;\n  align-items: flex-start;\n  justify-content: flex-end;\n  align-self: flex-start;\n  border-style: none;\n  background-color: transparent;\n  color: var(--calcite-ui-text-3);\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  -webkit-appearance: none;\n  padding: var(--calcite-alert-spacing-token-large);\n  outline-color: transparent;\n}\n.close:focus {\n  outline: 2px solid var(--calcite-ui-focus-color, var(--calcite-ui-brand));\n  outline-offset: calc(\n            -2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-ui-focus-offset-invert),\n                1\n              )\n            )\n          );\n}\n.close:hover, .close:focus {\n  background-color: var(--calcite-ui-foreground-2);\n  color: var(--calcite-ui-text-1);\n}\n.close:active {\n  background-color: var(--calcite-ui-foreground-3);\n}\n\n.queue-count {\n  visibility: hidden;\n  display: flex;\n  cursor: default;\n  align-items: center;\n  justify-content: space-around;\n  align-self: stretch;\n  overflow: hidden;\n  background-color: var(--calcite-ui-foreground-1);\n  text-align: center;\n  font-weight: var(--calcite-font-weight-medium);\n  color: var(--calcite-ui-text-2);\n  opacity: 0;\n  transition: all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;\n  border-inline: 0 solid transparent;\n  border-start-end-radius: 0;\n}\n.queue-count--active {\n  visibility: visible;\n  opacity: 1;\n}\n\n.dismiss-progress {\n  position: absolute;\n  display: block;\n  inline-size: 100%;\n  overflow: hidden;\n  inset-inline: 0;\n  inset-block-start: -2px;\n  block-size: 2px;\n  border-radius: var(--calcite-border-radius) var(--calcite-border-radius) 0 0;\n}\n.dismiss-progress:after {\n  position: absolute;\n  inset-block-start: 0px;\n  display: block;\n  block-size: 2px;\n  content: \"\";\n  background-color: var(--calcite-alert-dismiss-progress-background);\n  inset-inline-end: 0;\n}\n\n.actions-end {\n  display: flex;\n  align-self: stretch;\n}\n\n.text-container {\n  display: flex;\n  min-inline-size: 0px;\n  flex: 1 1 0%;\n  flex-direction: column;\n  overflow-wrap: break-word;\n}\n\n.content-container {\n  display: flex;\n  flex: 1 1 0%;\n}\n\n.footer {\n  position: relative;\n  order: 1;\n  display: flex;\n  inline-size: 100%;\n  justify-content: flex-end;\n  padding-block-start: 1px;\n  block-size: var(--calcite-alert-footer-height);\n}\n.footer:before {\n  content: \"\";\n  position: absolute;\n  inset-block-start: 0px;\n  inset-inline: var(--calcite-alert-footer-divider-gap);\n  border-block-start: 1px solid var(--calcite-ui-border-3);\n}\n\n:host([scale=s]) {\n  --calcite-alert-width: 40em;\n  --calcite-alert-spacing-token-small: 0.5rem;\n  --calcite-alert-spacing-token-large: 0.75rem;\n  --calcite-alert-footer-height: 2rem;\n  --calcite-alert-footer-divider-gap: 0.125rem;\n}\n:host([scale=s]) slot[name=title]::slotted(*),\n:host([scale=s]) *::slotted([slot=title]) {\n  font-size: var(--calcite-font-size--1);\n  line-height: 1.375;\n}\n:host([scale=s]) slot[name=message]::slotted(*),\n:host([scale=s]) *::slotted([slot=message]) {\n  font-size: var(--calcite-font-size--2);\n  line-height: 1.375;\n}\n:host([scale=s]) slot[name=link]::slotted(*),\n:host([scale=s]) *::slotted([slot=link]) {\n  font-size: var(--calcite-font-size--2);\n  line-height: 1.375;\n}\n:host([scale=s]) .queue-count {\n  margin-inline: 0.5rem;\n}\n:host([scale=s]) .container {\n  --calcite-alert-min-height: 3.5rem;\n}\n\n:host([scale=m]) {\n  --calcite-alert-width: 50em;\n  --calcite-alert-spacing-token-small: 0.75rem;\n  --calcite-alert-spacing-token-large: 1rem;\n  --calcite-alert-footer-height: 3rem;\n  --calcite-alert-footer-divider-gap: 0.25rem;\n}\n:host([scale=m]) slot[name=title]::slotted(*),\n:host([scale=m]) *::slotted([slot=title]) {\n  font-size: var(--calcite-font-size-0);\n  line-height: 1.375;\n}\n:host([scale=m]) slot[name=message]::slotted(*),\n:host([scale=m]) *::slotted([slot=message]) {\n  font-size: var(--calcite-font-size--1);\n  line-height: 1.375;\n}\n:host([scale=m]) slot[name=link]::slotted(*),\n:host([scale=m]) *::slotted([slot=link]) {\n  font-size: var(--calcite-font-size--1);\n  line-height: 1.375;\n}\n:host([scale=m]) .queue-count {\n  margin-inline: 0.75rem;\n}\n:host([scale=m]) .container {\n  --calcite-alert-min-height: 4.1875rem;\n}\n\n:host([scale=l]) {\n  --calcite-alert-width: 60em;\n  --calcite-alert-spacing-token-small: 1rem;\n  --calcite-alert-spacing-token-large: 1.25rem;\n  --calcite-alert-footer-height: 4rem;\n  --calcite-alert-footer-divider-gap: 0.5rem;\n}\n:host([scale=l]) slot[name=title]::slotted(*),\n:host([scale=l]) *::slotted([slot=title]) {\n  margin-block-end: 0.25rem;\n  font-size: var(--calcite-font-size-1);\n  line-height: 1.375;\n}\n:host([scale=l]) slot[name=message]::slotted(*),\n:host([scale=l]) *::slotted([slot=message]) {\n  font-size: var(--calcite-font-size-0);\n  line-height: 1.375;\n}\n:host([scale=l]) slot[name=link]::slotted(*),\n:host([scale=l]) *::slotted([slot=link]) {\n  font-size: var(--calcite-font-size-0);\n  line-height: 1.375;\n}\n:host([scale=l]) .queue-count {\n  margin-inline: 1rem;\n}\n:host([scale=l]) .container {\n  --calcite-alert-min-height: 5.625rem;\n}\n\n:host([open]) .container:not(.container--queued) {\n  border-block-start-width: 2px;\n  opacity: 1;\n  pointer-events: initial;\n}\n:host([open]) .container:not(.container--queued)[class*=bottom] {\n  transform: translate3d(0, calc(-1 * var(--calcite-alert-edge-distance)), inherit);\n}\n:host([open]) .container:not(.container--queued)[class*=top] {\n  transform: translate3d(0, var(--calcite-alert-edge-distance), inherit);\n}\n\n:host([auto-close]) > .queue-count {\n  border-inline-end: 0 solid transparent;\n}\n\nslot[name=title]::slotted(*),\n*::slotted([slot=title]) {\n  font-size: var(--calcite-font-size-0);\n  line-height: 1.375;\n  font-weight: var(--calcite-font-weight-medium);\n  color: var(--calcite-ui-text-1);\n}\n\nslot[name=message]::slotted(*),\n*::slotted([slot=message]) {\n  margin: 0px;\n  display: inline;\n  font-size: var(--calcite-font-size--1);\n  line-height: 1.375;\n  font-weight: var(--calcite-font-weight-normal);\n  color: var(--calcite-ui-text-2);\n  margin-inline-end: 0.5rem;\n}\n\nslot[name=link]::slotted(*),\n*::slotted([slot=link]) {\n  display: inline-flex;\n  color: var(--calcite-ui-text-link);\n}\n\n:host([kind=brand]) .container {\n  border-block-start-color: var(--calcite-ui-brand);\n}\n:host([kind=brand]) .container .icon {\n  color: var(--calcite-ui-brand);\n}\n\n:host([kind=info]) .container {\n  border-block-start-color: var(--calcite-ui-info);\n}\n:host([kind=info]) .container .icon {\n  color: var(--calcite-ui-info);\n}\n\n:host([kind=danger]) .container {\n  border-block-start-color: var(--calcite-ui-danger);\n}\n:host([kind=danger]) .container .icon {\n  color: var(--calcite-ui-danger);\n}\n\n:host([kind=success]) .container {\n  border-block-start-color: var(--calcite-ui-success);\n}\n:host([kind=success]) .container .icon {\n  color: var(--calcite-ui-success);\n}\n\n:host([kind=warning]) .container {\n  border-block-start-color: var(--calcite-ui-warning);\n}\n:host([kind=warning]) .container .icon {\n  color: var(--calcite-ui-warning);\n}\n\n:host([auto-close-duration=fast]) .dismiss-progress:after {\n  animation: dismissProgress 6000ms ease-out;\n}\n\n:host(:hover[auto-close-duration=fast]) .dismiss-progress:after {\n  animation-play-state: paused;\n}\n\n:host([auto-close-duration=medium]) .dismiss-progress:after {\n  animation: dismissProgress 10000ms ease-out;\n}\n\n:host(:hover[auto-close-duration=medium]) .dismiss-progress:after {\n  animation-play-state: paused;\n}\n\n:host([auto-close-duration=slow]) .dismiss-progress:after {\n  animation: dismissProgress 14000ms ease-out;\n}\n\n:host(:hover[auto-close-duration=slow]) .dismiss-progress:after {\n  animation-play-state: paused;\n}\n\n@keyframes dismissProgress {\n  0% {\n    inline-size: 0px;\n    opacity: 0.75;\n  }\n  100% {\n    inline-size: 100%;\n    opacity: 1;\n  }\n}\n/**\n * Conditional styles for when Alert is slotted in Shell\n */\n.container--slotted-in-shell {\n  position: absolute;\n}\n\n@container responsive-container (min-width: 476px) {\n  .content {\n    flex-direction: row;\n  }\n  .close {\n    align-items: center;\n    align-self: stretch;\n  }\n  .icon {\n    justify-content: center;\n    margin-inline-end: 0;\n    margin-block: 0;\n    padding-inline-end: var(--calcite-alert-spacing-token-large);\n  }\n}\n@container responsive-container (min-width: 768px) {\n  .close {\n    align-self: stretch;\n  }\n  .footer {\n    inline-size: auto;\n    align-self: stretch;\n    order: initial;\n    block-size: inherit;\n  }\n  .footer:before {\n    content: none;\n  }\n  .icon {\n    padding-inline: var(--calcite-alert-spacing-token-large) 0;\n  }\n}\n:host([hidden]) {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\n:host([calcite-hydrated-hidden]) {\n  visibility: hidden !important;\n  pointer-events: none;\n}";

const Alert = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.calciteAlertBeforeClose = createEvent(this, "calciteAlertBeforeClose", 6);
    this.calciteAlertClose = createEvent(this, "calciteAlertClose", 6);
    this.calciteAlertBeforeOpen = createEvent(this, "calciteAlertBeforeOpen", 6);
    this.calciteAlertOpen = createEvent(this, "calciteAlertOpen", 6);
    this.calciteInternalAlertSync = createEvent(this, "calciteInternalAlertSync", 6);
    this.calciteInternalAlertRegister = createEvent(this, "calciteInternalAlertRegister", 6);
    this.autoCloseTimeoutId = null;
    this.resizeObserver = createObserver("resize", (entries) => (this.responsiveContainerWidth = entries[0].contentRect.width));
    this.totalOpenTime = 0;
    this.totalHoverTime = 0;
    this.openTransitionProp = "opacity";
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    this.setTransitionEl = (el) => {
      this.transitionEl = el;
    };
    /** close and emit calciteInternalAlertSync event with the updated queue payload */
    this.closeAlert = () => {
      this.autoCloseTimeoutId = null;
      this.queued = false;
      this.open = false;
      this.queue = this.queue.filter((el) => el !== this.el);
      this.determineActiveAlert();
      this.calciteInternalAlertSync.emit({ queue: this.queue });
    };
    this.actionsEndSlotChangeHandler = (event) => {
      this.hasEndActions = slotChangeHasAssignedElement(event);
    };
    this.handleMouseOver = () => {
      window.clearTimeout(this.autoCloseTimeoutId);
      this.totalOpenTime = Date.now() - this.initialOpenTime;
      this.lastMouseOverBegin = Date.now();
    };
    this.handleMouseLeave = () => {
      const hoverDuration = Date.now() - this.lastMouseOverBegin;
      const timeRemaining = DURATIONS[this.autoCloseDuration] - this.totalOpenTime + this.totalHoverTime;
      this.totalHoverTime = this.totalHoverTime ? hoverDuration + this.totalHoverTime : hoverDuration;
      this.autoCloseTimeoutId = window.setTimeout(() => this.closeAlert(), timeRemaining);
    };
    this.open = false;
    this.autoClose = false;
    this.autoCloseDuration = "medium";
    this.kind = "brand";
    this.icon = undefined;
    this.iconFlipRtl = false;
    this.label = undefined;
    this.numberingSystem = undefined;
    this.placement = "bottom";
    this.scale = "m";
    this.messages = undefined;
    this.messageOverrides = undefined;
    this.slottedInShell = undefined;
    this.defaultMessages = undefined;
    this.effectiveLocale = "";
    this.hasEndActions = false;
    this.queue = [];
    this.queueLength = 0;
    this.queued = false;
    this.responsiveContainerWidth = undefined;
  }
  openHandler() {
    onToggleOpenCloseComponent(this);
    if (this.open && !this.queued) {
      this.calciteInternalAlertRegister.emit();
    }
    if (!this.open) {
      this.queue = this.queue.filter((el) => el !== this.el);
      this.calciteInternalAlertSync.emit({ queue: this.queue });
    }
  }
  onMessagesChange() {
    /* wired up by t9n util */
  }
  updateDuration() {
    if (this.autoClose && this.autoCloseTimeoutId) {
      window.clearTimeout(this.autoCloseTimeoutId);
      this.autoCloseTimeoutId = window.setTimeout(() => this.closeAlert(), DURATIONS[this.autoCloseDuration]);
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    connectLocalized(this);
    connectMessages(this);
    const open = this.open;
    if (open && !this.queued) {
      this.calciteInternalAlertRegister.emit();
    }
    if (this.transitionEl) {
      this.resizeObserver?.observe(this.transitionEl);
    }
  }
  async componentWillLoad() {
    setUpLoadableComponent(this);
    const [, breakpoints] = await Promise.all([setUpMessages(this), getBreakpoints()]);
    this.breakpoints = breakpoints;
    if (this.open) {
      onToggleOpenCloseComponent(this);
    }
  }
  componentDidLoad() {
    setComponentLoaded(this);
    this.resizeObserver?.observe(this.transitionEl);
  }
  disconnectedCallback() {
    window.dispatchEvent(new CustomEvent("calciteInternalAlertUnregister", {
      detail: { alert: this.el },
    }));
    window.clearTimeout(this.autoCloseTimeoutId);
    window.clearTimeout(this.queueTimeout);
    disconnectLocalized(this);
    disconnectMessages(this);
    this.slottedInShell = false;
    this.resizeObserver?.disconnect();
  }
  render() {
    numberStringFormatter.numberFormatOptions = {
      locale: this.effectiveLocale,
      numberingSystem: this.numberingSystem,
      signDisplay: "always",
    };
    const { hasEndActions } = this;
    const { open, autoClose, responsiveContainerWidth, label, placement, queued } = this;
    const role = autoClose ? "alert" : "alertdialog";
    const widthBreakpoints = this.breakpoints.width;
    const lessThanSmall = responsiveContainerWidth < widthBreakpoints.small;
    const greaterOrEqualThanSmall = responsiveContainerWidth >= widthBreakpoints.small;
    const hidden = !open;
    const effectiveIcon = setRequestedIcon(KindIcons, this.icon, this.kind);
    const hasQueuedAlerts = this.queueLength > 1;
    return (h(Host, { "aria-hidden": toAriaBoolean(hidden), "aria-label": label, "calcite-hydrated-hidden": hidden, role: role }, h("div", { class: {
        [CSS.container]: true,
        [CSS.containerQueued]: queued,
        [`${CSS.container}--${placement}`]: true,
        [CSS.containerSlottedInShell]: this.slottedInShell,
      }, onPointerEnter: this.autoClose && this.autoCloseTimeoutId ? this.handleMouseOver : null, onPointerLeave: this.autoClose && this.autoCloseTimeoutId ? this.handleMouseLeave : null,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setTransitionEl }, h("div", { class: CSS.contentContainer }, effectiveIcon && greaterOrEqualThanSmall ? this.renderIcon(effectiveIcon) : null, h("div", { class: CSS.content }, effectiveIcon && lessThanSmall ? this.renderIcon(effectiveIcon) : null, h("div", { class: CSS.textContainer }, h("slot", { name: SLOTS.title }), h("slot", { name: SLOTS.message }), h("slot", { name: SLOTS.link })))), lessThanSmall ? this.renderCloseButton() : null, h("div", { class: CSS.footer, hidden: !hasEndActions && !hasQueuedAlerts }, this.renderActionsEnd(), hasQueuedAlerts ? this.renderQueueCount() : null), greaterOrEqualThanSmall ? this.renderCloseButton() : null, open && !queued && autoClose ? h("div", { class: CSS.dismissProgress }) : null)));
  }
  renderCloseButton() {
    return (h("button", { "aria-label": this.messages.close, class: CSS.close, key: "close", onClick: this.closeAlert, type: "button",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.closeButton = el) }, h("calcite-icon", { icon: "x", scale: this.scale === "l" ? "m" : "s" })));
  }
  renderQueueCount() {
    const queueNumber = this.queueLength > 2 ? this.queueLength - 1 : 1;
    const queueText = numberStringFormatter.numberFormatter.format(queueNumber);
    return (h("div", { class: {
        [CSS.queueCount]: true,
        [CSS.queueCountActive]: this.queueLength > 1,
      }, key: "queue-count" }, h("calcite-chip", { scale: this.scale, value: queueText }, queueText)));
  }
  renderActionsEnd() {
    return (h("div", { class: CSS.actionsEnd }, h("slot", { name: SLOTS.actionsEnd, onSlotchange: this.actionsEndSlotChangeHandler })));
  }
  renderIcon(icon) {
    return (h("div", { class: CSS.icon }, h("calcite-icon", { flipRtl: this.iconFlipRtl, icon: icon, scale: this.scale === "l" ? "m" : "s" })));
  }
  // when an alert is opened or closed, update queue and determine active alert
  alertSync(event) {
    if (this.queue !== event.detail.queue) {
      this.queue = event.detail.queue;
    }
    this.queueLength = this.queue.length;
    this.determineActiveAlert();
    event.stopPropagation();
  }
  // when an alert is first registered, trigger a queue sync
  alertRegister() {
    if (this.open && !this.queue.includes(this.el)) {
      this.queued = true;
      this.queue.push(this.el);
    }
    this.calciteInternalAlertSync.emit({ queue: this.queue });
    this.determineActiveAlert();
  }
  // Event is dispatched on the window because the element is not in the DOM so bubbling won't occur.
  alertUnregister(event) {
    const queue = this.queue.filter((el) => el !== event.detail.alert);
    this.queue = queue;
    window.dispatchEvent(new CustomEvent("calciteInternalAlertSync", {
      detail: { queue },
    }));
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /** Sets focus on the component's "close" button (the first focusable item). */
  async setFocus() {
    await componentFocusable(this);
    const alertLinkEl = getSlotted(this.el, { selector: "calcite-link" });
    if (!this.closeButton && !alertLinkEl) {
      return;
    }
    else if (alertLinkEl) {
      return alertLinkEl.setFocus();
    }
    else if (this.closeButton) {
      this.closeButton.focus();
    }
  }
  effectiveLocaleChange() {
    updateMessages(this, this.effectiveLocale);
  }
  /** determine which alert is active */
  determineActiveAlert() {
    if (this.queue?.[0] === this.el) {
      this.openAlert();
      if (this.autoClose && !this.autoCloseTimeoutId) {
        this.initialOpenTime = Date.now();
        this.autoCloseTimeoutId = window.setTimeout(() => this.closeAlert(), DURATIONS[this.autoCloseDuration]);
      }
    }
    else {
      return;
    }
  }
  onBeforeOpen() {
    this.calciteAlertBeforeOpen.emit();
  }
  onOpen() {
    this.calciteAlertOpen.emit();
  }
  onBeforeClose() {
    this.calciteAlertBeforeClose.emit();
  }
  onClose() {
    this.calciteAlertClose.emit();
  }
  /** remove queued class after animation completes */
  openAlert() {
    window.clearTimeout(this.queueTimeout);
    this.queueTimeout = window.setTimeout(() => (this.queued = false), 300);
  }
  static get assetsDirs() { return ["assets"]; }
  get el() { return getElement(this); }
  static get watchers() { return {
    "open": ["openHandler"],
    "messageOverrides": ["onMessagesChange"],
    "autoCloseDuration": ["updateDuration"],
    "effectiveLocale": ["effectiveLocaleChange"]
  }; }
};
Alert.style = alertCss;

export { Alert as calcite_alert };
