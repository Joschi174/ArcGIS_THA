import {
  p
} from "./chunk-3XEZGA5Q.js";
import "./chunk-2ICHOIV7.js";
import "./chunk-BEMLJYXY.js";
import "./chunk-EZ53LOIY.js";
import {
  l
} from "./chunk-W7NPCP2A.js";
import {
  j as j2
} from "./chunk-M6X4HWGZ.js";
import {
  c
} from "./chunk-UQH37OH4.js";
import {
  O
} from "./chunk-VCOABNMG.js";
import {
  f as f4
} from "./chunk-HJI3BY6O.js";
import "./chunk-6VMHQJDC.js";
import "./chunk-WDH5YZUJ.js";
import "./chunk-5NTMYKFL.js";
import "./chunk-5YQM3GC2.js";
import "./chunk-PD7VSZGS.js";
import "./chunk-2FJNU644.js";
import {
  v as v2
} from "./chunk-ZFHT67PQ.js";
import {
  f as f3
} from "./chunk-QDV73XFP.js";
import "./chunk-EN7ZU6UM.js";
import "./chunk-HP3XVAWO.js";
import {
  b
} from "./chunk-ZZC3B6AH.js";
import "./chunk-OB7XGIVW.js";
import "./chunk-6WLIVBPN.js";
import "./chunk-BS6NX4XB.js";
import "./chunk-A7HIXRLM.js";
import "./chunk-IJCLSAKS.js";
import "./chunk-PSEOYXGU.js";
import "./chunk-Y2UHC2VM.js";
import "./chunk-7APSGFF5.js";
import "./chunk-S5RFXGTW.js";
import "./chunk-JQTIJ5DI.js";
import "./chunk-7P2S6N4H.js";
import "./chunk-6PE6O23W.js";
import "./chunk-BI26XH27.js";
import "./chunk-PPY3JRDD.js";
import "./chunk-3HEHFNVB.js";
import "./chunk-A4SZU67B.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import {
  o
} from "./chunk-7KNADJUA.js";
import "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import "./chunk-VL6IMOUO.js";
import "./chunk-YCF7NU4C.js";
import "./chunk-FQ2MMUPL.js";
import "./chunk-FQMVGWVJ.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-2IPRPVVF.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-OICH3FD6.js";
import "./chunk-DNUHV7J4.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import {
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2 as a,
  e as e2
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import {
  j
} from "./chunk-QPWNDO2C.js";
import "./chunk-CA2PXGXL.js";
import {
  v
} from "./chunk-RXTTOJU7.js";
import {
  f as f2,
  s as s3
} from "./chunk-4HAMAX2C.js";
import {
  f
} from "./chunk-3QT5L2OK.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import {
  L
} from "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/support/ElevationTileData.js
var a2 = class {
  constructor(a3, t2, s5, e3) {
    this._hasNoDataValues = null, this._minValue = null, this._maxValue = null, "pixelData" in a3 ? (this.values = a3.pixelData, this.width = a3.width, this.height = a3.height, this.noDataValue = a3.noDataValue) : (this.values = a3, this.width = t2, this.height = s5, this.noDataValue = e3);
  }
  get hasNoDataValues() {
    if (null == this._hasNoDataValues) {
      const a3 = this.noDataValue;
      this._hasNoDataValues = this.values.includes(a3);
    }
    return this._hasNoDataValues;
  }
  get minValue() {
    return this._ensureBounds(), this._minValue;
  }
  get maxValue() {
    return this._ensureBounds(), this._maxValue;
  }
  _ensureBounds() {
    if (null != this._minValue)
      return;
    const { noDataValue: a3, values: t2 } = this;
    let s5 = 1 / 0, e3 = -1 / 0, i = true;
    for (const u of t2)
      u === a3 ? this._hasNoDataValues = true : (s5 = u < s5 ? u : s5, e3 = u > e3 ? u : e3, i = false);
    i ? (this._minValue = 0, this._maxValue = 0) : (this._minValue = s5, this._maxValue = e3 > -3e38 ? e3 : 0);
  }
};

// node_modules/@arcgis/core/core/workers/WorkerHandle.js
var h = class {
  constructor(e3, t2, r2, h2, o2 = {}) {
    this._mainMethod = t2, this._transferLists = r2, this._listeners = [], this._promise = f3(e3, { ...o2, schedule: h2 }).then((e4) => {
      if (void 0 === this._thread) {
        this._thread = e4, this._promise = null, o2.hasInitialize && this.broadcast({}, "initialize");
        for (const e5 of this._listeners)
          this._connectListener(e5);
      } else
        e4.close();
    }), this._promise.catch((t3) => s.getLogger("esri.core.workers.WorkerHandle").error(`Failed to initialize ${e3} worker: ${t3}`));
  }
  on(s5, r2) {
    const i = { removed: false, eventName: s5, callback: r2, threadHandle: null };
    return this._listeners.push(i), this._connectListener(i), e2(() => {
      i.removed = true, L(this._listeners, i), this._thread && null != i.threadHandle && i.threadHandle.remove();
    });
  }
  destroy() {
    this._thread && (this._thread.close(), this._thread = null), this._promise = null, this._listeners.length = 0, this._transferLists = {};
  }
  invoke(e3, t2) {
    return this.invokeMethod(this._mainMethod, e3, t2);
  }
  invokeMethod(e3, t2, s5) {
    if (this._thread) {
      const r2 = this._transferLists[e3], i = r2 ? r2(t2) : [];
      return this._thread.invoke(e3, t2, { transferList: i, signal: s5 });
    }
    return this._promise ? this._promise.then(() => (s3(s5), this.invokeMethod(e3, t2, s5))) : Promise.reject(null);
  }
  broadcast(e3, t2) {
    return this._thread ? Promise.all(this._thread.broadcast(t2, e3)).then(() => {
    }) : this._promise ? this._promise.then(() => this.broadcast(e3, t2)) : Promise.reject();
  }
  get promise() {
    return this._promise;
  }
  _connectListener(e3) {
    this._thread && this._thread.on(e3.eventName, e3.callback).then((t2) => {
      e3.removed || (e3.threadHandle = t2);
    });
  }
};

// node_modules/@arcgis/core/layers/support/LercDecoder.js
var r = class extends h {
  constructor(e3 = null) {
    super("LercWorker", "_decode", { _decode: (e4) => [e4.buffer] }, e3, { strategy: "dedicated" }), this.schedule = e3, this.ref = 0;
  }
  decode(e3, r2, t2) {
    return e3 && 0 !== e3.byteLength ? this.invoke({ buffer: e3, options: r2 }, t2) : Promise.resolve(null);
  }
  release() {
    --this.ref <= 0 && (t.forEach((e3, r2) => {
      e3 === this && t.delete(r2);
    }), this.destroy());
  }
};
var t = /* @__PURE__ */ new Map();
function s4(e3 = null) {
  let s5 = t.get(e3);
  return s5 || (null != e3 ? (s5 = new r((r2) => e3.immediate.schedule(r2)), t.set(e3, s5)) : (s5 = new r(), t.set(null, s5))), ++s5.ref, s5;
}

// node_modules/@arcgis/core/layers/ElevationLayer.js
var S = class extends p(l(c(j2(O(b))))) {
  constructor(...e3) {
    super(...e3), this.capabilities = { operations: { supportsTileMap: false } }, this.copyright = null, this.heightModelInfo = null, this.path = null, this.minScale = void 0, this.maxScale = void 0, this.opacity = 1, this.operationalLayerType = "ArcGISTiledElevationServiceLayer", this.sourceJSON = null, this.type = "elevation", this.url = null, this.version = null, this._lercDecoder = s4();
  }
  normalizeCtorArgs(e3, r2) {
    return "string" == typeof e3 ? { url: e3, ...r2 } : e3;
  }
  destroy() {
    this._lercDecoder = f(this._lercDecoder);
  }
  readCapabilities(e3, r2) {
    const t2 = r2.capabilities && r2.capabilities.split(",").map((e4) => e4.toLowerCase().trim());
    if (!t2)
      return { operations: { supportsTileMap: false } };
    return { operations: { supportsTileMap: t2.includes("tilemap") } };
  }
  readVersion(e3, r2) {
    let t2 = r2.currentVersion;
    return t2 || (t2 = 9.3), t2;
  }
  load(e3) {
    const r2 = null != e3 ? e3.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Image Service"], supportsData: false, validateItem: (e4) => {
      for (let r3 = 0; r3 < e4.typeKeywords.length; r3++)
        if ("elevation 3d layer" === e4.typeKeywords[r3].toLowerCase())
          return true;
      throw new s2("portal:invalid-layer-item-type", "Invalid layer item type '${type}', expected '${expectedType}' ", { type: "Image Service", expectedType: "Image Service Elevation 3D Layer" });
    } }, e3).catch(f2).then(() => this._fetchImageService(r2))), Promise.resolve(this);
  }
  fetchTile(e3, t2, i, o2) {
    const s5 = null != (o2 = o2 || { signal: null }).signal ? o2.signal : o2.signal = new AbortController().signal, a3 = { responseType: "array-buffer", signal: s5 }, p2 = { noDataValue: o2.noDataValue, returnFileInfo: true };
    return this.load().then(() => this._fetchTileAvailability(e3, t2, i, o2)).then(() => j(this.getTileUrl(e3, t2, i), a3)).then((e4) => this._lercDecoder.decode(e4.data, p2, s5)).then((e4) => new a2(e4));
  }
  getTileUrl(e3, r2, t2) {
    const i = !this.capabilities.operations.supportsTileMap && this.supportsBlankTile, o2 = v({ ...this.parsedUrl.query, blankTile: !i && null });
    return `${this.parsedUrl.path}/tile/${e3}/${r2}/${t2}${o2 ? "?" + o2 : ""}`;
  }
  async queryElevation(e3, r2) {
    const { ElevationQuery: t2 } = await import("./ElevationQuery-4LMNOVS7.js");
    s3(r2);
    return new t2().query(this, e3, r2);
  }
  async createElevationSampler(e3, r2) {
    const { ElevationQuery: t2 } = await import("./ElevationQuery-4LMNOVS7.js");
    s3(r2);
    return new t2().createSampler(this, e3, r2);
  }
  _fetchTileAvailability(e3, r2, t2, i) {
    return this.tilemapCache ? this.tilemapCache.fetchAvailability(e3, r2, t2, i) : Promise.resolve("unknown");
  }
  async _fetchImageService(e3) {
    var _a;
    if (this.sourceJSON)
      return this.sourceJSON;
    const t2 = { query: { f: "json", ...this.parsedUrl.query }, responseType: "json", signal: e3 }, i = await j(this.parsedUrl.path, t2);
    i.ssl && (this.url = (_a = this.url) == null ? void 0 : _a.replace(/^http:/i, "https:")), this.sourceJSON = i.data, this.read(i.data, { origin: "service", url: this.parsedUrl });
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile[w];
  }
};
e([y({ readOnly: true })], S.prototype, "capabilities", void 0), e([o("service", "capabilities", ["capabilities"])], S.prototype, "readCapabilities", null), e([y({ json: { read: { source: "copyrightText" } } })], S.prototype, "copyright", void 0), e([y({ readOnly: true, type: v2 })], S.prototype, "heightModelInfo", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], S.prototype, "path", void 0), e([y({ type: ["show", "hide"] })], S.prototype, "listMode", void 0), e([y({ json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } }, readOnly: true })], S.prototype, "minScale", void 0), e([y({ json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } }, readOnly: true })], S.prototype, "maxScale", void 0), e([y({ json: { read: false, write: false, origins: { "web-document": { read: false, write: false } } } })], S.prototype, "opacity", void 0), e([y({ type: ["ArcGISTiledElevationServiceLayer"] })], S.prototype, "operationalLayerType", void 0), e([y()], S.prototype, "sourceJSON", void 0), e([y({ json: { read: false }, value: "elevation", readOnly: true })], S.prototype, "type", void 0), e([y(f4)], S.prototype, "url", void 0), e([y()], S.prototype, "version", void 0), e([o("version", ["currentVersion"])], S.prototype, "readVersion", null), S = e([a("esri.layers.ElevationLayer")], S);
var w = Symbol("default-fetch-tile");
S.prototype.fetchTile[w] = true;
var T = S;
export {
  T as default
};
//# sourceMappingURL=ElevationLayer-SDC3K3TG.js.map
