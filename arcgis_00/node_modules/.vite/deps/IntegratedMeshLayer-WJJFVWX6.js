import {
  g
} from "./chunk-PXEHOK2P.js";
import "./chunk-SQJM4IY6.js";
import {
  l as l3,
  m,
  s as s3,
  u as u2
} from "./chunk-A76DUBEY.js";
import {
  K,
  N
} from "./chunk-CQXEW2DK.js";
import "./chunk-R52IPTNE.js";
import "./chunk-7JWYOBX7.js";
import "./chunk-E7DVLVY2.js";
import "./chunk-QVXMNY6H.js";
import {
  i as i2
} from "./chunk-LVYJ3BFD.js";
import {
  l as l2
} from "./chunk-W7NPCP2A.js";
import {
  j as j3
} from "./chunk-M6X4HWGZ.js";
import {
  t as t2
} from "./chunk-7N54VP3N.js";
import {
  c
} from "./chunk-UQH37OH4.js";
import {
  O
} from "./chunk-VCOABNMG.js";
import {
  d
} from "./chunk-HJI3BY6O.js";
import "./chunk-6VMHQJDC.js";
import "./chunk-WDH5YZUJ.js";
import "./chunk-5NTMYKFL.js";
import "./chunk-ZFHT67PQ.js";
import {
  b
} from "./chunk-ZZC3B6AH.js";
import "./chunk-OB7XGIVW.js";
import "./chunk-6WLIVBPN.js";
import "./chunk-BS6NX4XB.js";
import {
  i
} from "./chunk-A7HIXRLM.js";
import "./chunk-IJCLSAKS.js";
import "./chunk-PSEOYXGU.js";
import "./chunk-PDYDTTO6.js";
import {
  Cn,
  Gn
} from "./chunk-Y2UHC2VM.js";
import "./chunk-7APSGFF5.js";
import "./chunk-S5RFXGTW.js";
import "./chunk-JQTIJ5DI.js";
import "./chunk-7P2S6N4H.js";
import "./chunk-6PE6O23W.js";
import "./chunk-BI26XH27.js";
import "./chunk-PPY3JRDD.js";
import "./chunk-NUL4Z7H5.js";
import "./chunk-3HEHFNVB.js";
import {
  V
} from "./chunk-Z3LDBFKX.js";
import "./chunk-A4SZU67B.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import {
  j as j2
} from "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import {
  o
} from "./chunk-7KNADJUA.js";
import {
  r
} from "./chunk-NMXESCE4.js";
import {
  l,
  u2 as u
} from "./chunk-O6HKLIZS.js";
import {
  U,
  a as a3
} from "./chunk-FQMVGWVJ.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-OICH3FD6.js";
import "./chunk-DNUHV7J4.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import {
  t2 as t,
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2,
  s2
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import {
  j
} from "./chunk-QPWNDO2C.js";
import "./chunk-CA2PXGXL.js";
import {
  L
} from "./chunk-RXTTOJU7.js";
import {
  f
} from "./chunk-4HAMAX2C.js";
import "./chunk-3QT5L2OK.js";
import {
  s3 as s
} from "./chunk-5QASCMFT.js";
import {
  a
} from "./chunk-GHZEFXB4.js";
import "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/support/SceneModification.js
var m2;
var y2 = m2 = class extends l {
  constructor(e2) {
    super(e2), this.geometry = null, this.type = "clip";
  }
  writeGeometry(e2, r2, o2, s4) {
    if (s4.layer && s4.layer.spatialReference && !s4.layer.spatialReference.equals(this.geometry.spatialReference)) {
      if (!Cn(e2.spatialReference, s4.layer.spatialReference))
        return void (s4 && s4.messages && s4.messages.push(new s2("scenemodification:unsupported", "Scene modifications with incompatible spatial references are not supported", { modification: this, spatialReference: s4.layer.spatialReference, context: s4 })));
      const p = new j2();
      Gn(e2, p, s4.layer.spatialReference), r2[o2] = p.toJSON(s4);
    } else
      r2[o2] = e2.toJSON(s4);
    delete r2[o2].spatialReference;
  }
  clone() {
    return new m2({ geometry: a(this.geometry), type: this.type });
  }
};
e([y({ type: j2 }), g()], y2.prototype, "geometry", void 0), e([r(["web-scene", "portal-item"], "geometry")], y2.prototype, "writeGeometry", null), e([y({ type: ["clip", "mask", "replace"], nonNullable: true }), g()], y2.prototype, "type", void 0), y2 = m2 = e([a2("esri.layers.support.SceneModification")], y2);
var f2 = y2;

// node_modules/@arcgis/core/layers/support/SceneModifications.js
var a4;
var n = a4 = class extends u(V.ofType(f2)) {
  constructor(r2) {
    super(r2), this.url = null;
  }
  clone() {
    return new a4({ url: this.url, items: this.items.map((r2) => r2.clone()) });
  }
  toJSON(r2) {
    return this.toArray().map((o2) => o2.toJSON(r2)).filter((r3) => !!r3.geometry);
  }
  static fromJSON(r2, o2) {
    const t3 = new a4();
    for (const e2 of r2)
      t3.add(f2.fromJSON(e2, o2));
    return t3;
  }
  static async fromUrl(r2, t3, e2) {
    const i3 = { url: L(r2), origin: "service" }, c2 = await j(r2, { responseType: "json", signal: e2 == null ? void 0 : e2.signal }), n2 = t3.toJSON(), m4 = [];
    for (const o2 of c2.data)
      m4.push(f2.fromJSON({ ...o2, geometry: { ...o2.geometry, spatialReference: n2 } }, i3));
    return new a4({ url: r2, items: m4 });
  }
};
e([y({ type: String })], n.prototype, "url", void 0), n = a4 = e([a2("esri.layers.support.SceneModifications")], n);
var m3 = n;

// node_modules/@arcgis/core/layers/IntegratedMeshLayer.js
var I = class extends N(l2(c(j3(t2(O(i2(b))))))) {
  constructor(...e2) {
    super(...e2), this._handles = new t(), this.geometryType = "mesh", this.operationalLayerType = "IntegratedMeshLayer", this.type = "integrated-mesh", this.nodePages = null, this.materialDefinitions = null, this.textureSetDefinitions = null, this.geometryDefinitions = null, this.serviceUpdateTimeStamp = null, this.profile = "mesh-pyramids", this.modifications = null, this._modificationsSource = null, this.elevationInfo = null, this.path = null;
  }
  destroy() {
    this._handles.destroy();
  }
  initialize() {
    this._handles.add(a3(() => this.modifications, "after-changes", () => this.modifications = this.modifications, U));
  }
  normalizeCtorArgs(e2, t3) {
    return "string" == typeof e2 ? { url: e2, ...t3 } : e2;
  }
  readModifications(e2, t3, r2) {
    this._modificationsSource = { url: i(e2, r2), context: r2 };
  }
  async load(e2) {
    return this.addResolvingPromise(this._doLoad(e2)), this;
  }
  async _doLoad(e2) {
    const t3 = e2 == null ? void 0 : e2.signal;
    try {
      await this.loadFromPortal({ supportedTypes: ["Scene Service"] }, e2);
    } catch (r2) {
      f(r2);
    }
    if (await this._fetchService(t3), null != this._modificationsSource) {
      const t4 = await m3.fromUrl(this._modificationsSource.url, this.spatialReference, e2);
      this.setAtOrigin("modifications", t4, this._modificationsSource.context.origin), this._modificationsSource = null;
    }
    await this._fetchIndexAndUpdateExtent(this.nodePages, t3);
  }
  beforeSave() {
    if (null != this._modificationsSource)
      return this.load().then(() => {
      }, () => {
      });
  }
  async saveAs(e2, t3) {
    return this._debouncedSaveOperations(K.SAVE_AS, { ...t3, getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "integrated-mesh" }, e2);
  }
  async save() {
    const e2 = { getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "integrated-mesh" };
    return this._debouncedSaveOperations(K.SAVE, e2);
  }
  validateLayer(e2) {
    if (e2.layerType && "IntegratedMesh" !== e2.layerType)
      throw new s("integrated-mesh-layer:layer-type-not-supported", "IntegratedMeshLayer does not support this layer type", { layerType: e2.layerType });
    if (isNaN(this.version.major) || isNaN(this.version.minor))
      throw new s("layer:service-version-not-supported", "Service version is not supported.", { serviceVersion: this.version.versionString, supportedVersions: "1.x" });
    if (this.version.major > 1)
      throw new s("layer:service-version-too-new", "Service version is too new.", { serviceVersion: this.version.versionString, supportedVersions: "1.x" });
  }
  _getTypeKeywords() {
    return ["IntegratedMeshLayer"];
  }
};
e([y({ type: String, readOnly: true })], I.prototype, "geometryType", void 0), e([y({ type: ["show", "hide"] })], I.prototype, "listMode", void 0), e([y({ type: ["IntegratedMeshLayer"] })], I.prototype, "operationalLayerType", void 0), e([y({ json: { read: false }, readOnly: true })], I.prototype, "type", void 0), e([y({ type: s3, readOnly: true })], I.prototype, "nodePages", void 0), e([y({ type: [l3], readOnly: true })], I.prototype, "materialDefinitions", void 0), e([y({ type: [u2], readOnly: true })], I.prototype, "textureSetDefinitions", void 0), e([y({ type: [m], readOnly: true })], I.prototype, "geometryDefinitions", void 0), e([y({ readOnly: true })], I.prototype, "serviceUpdateTimeStamp", void 0), e([y({ type: m3 }), g({ origins: ["web-scene", "portal-item"], type: "resource", prefix: "modifications" })], I.prototype, "modifications", void 0), e([o(["web-scene", "portal-item"], "modifications")], I.prototype, "readModifications", null), e([y(d)], I.prototype, "elevationInfo", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true }, "portal-item": { read: true, write: true } }, read: false } })], I.prototype, "path", void 0), I = e([a2("esri.layers.IntegratedMeshLayer")], I);
var O2 = I;
export {
  O2 as default
};
//# sourceMappingURL=IntegratedMeshLayer-WJJFVWX6.js.map
