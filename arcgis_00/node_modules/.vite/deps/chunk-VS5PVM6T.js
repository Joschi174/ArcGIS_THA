import {
  j,
  m2 as m,
  u
} from "./chunk-CO3TM5QL.js";
import {
  l
} from "./chunk-JLE6P4DW.js";
import {
  y
} from "./chunk-TBBTJ7N4.js";
import {
  a2 as a
} from "./chunk-AS7ITRBV.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";

// node_modules/@arcgis/core/rest/networks/support/AggregatedGeometry.js
var n = class extends l {
  constructor(o) {
    super(o), this.line = null, this.multipoint = null, this.polygon = null;
  }
};
e([y({ type: m, json: { write: true }, readOnly: true })], n.prototype, "line", void 0), e([y({ type: u, json: { read: { source: "point" }, write: { target: "point" } }, readOnly: true })], n.prototype, "multipoint", void 0), e([y({ type: j, json: { write: true }, readOnly: true })], n.prototype, "polygon", void 0), n = e([a("esri.rest.networks.support.AggregatedGeometry")], n);
var l2 = n;

// node_modules/@arcgis/core/rest/networks/support/FunctionResult.js
var s = class extends l {
  constructor(r) {
    super(r), this.functionType = null, this.networkAttributeName = null, this.result = null;
  }
};
e([y({ type: ["add", "subtract", "average", "count", "min", "max"], json: { write: true }, readOnly: true })], s.prototype, "functionType", void 0), e([y({ type: String, json: { write: true }, readOnly: true })], s.prototype, "networkAttributeName", void 0), e([y({ type: Number, json: { write: true }, readOnly: true })], s.prototype, "result", void 0), s = e([a("esri.rest.networks.support.FunctionResult")], s);
var p = s;

// node_modules/@arcgis/core/rest/networks/support/NetworkElement.js
var s2 = class extends l {
  constructor(o) {
    super(o), this.assetGroupCode = null, this.assetTypeCode = null, this.globalId = null, this.networkSourceId = null, this.objectId = null, this.positionFrom = null, this.positionTo = null, this.terminalId = null;
  }
};
e([y({ type: Number, json: { write: true } })], s2.prototype, "assetGroupCode", void 0), e([y({ type: Number, json: { write: true } })], s2.prototype, "assetTypeCode", void 0), e([y({ type: String, json: { write: true } })], s2.prototype, "globalId", void 0), e([y({ type: Number, json: { write: true } })], s2.prototype, "networkSourceId", void 0), e([y({ type: Number, json: { write: true } })], s2.prototype, "objectId", void 0), e([y({ type: Number, json: { write: true } })], s2.prototype, "positionFrom", void 0), e([y({ type: Number, json: { write: true } })], s2.prototype, "positionTo", void 0), e([y({ type: Number, json: { write: true } })], s2.prototype, "terminalId", void 0), s2 = e([a("esri.rest.networks.support.NetworkElement")], s2);
var p2 = s2;

// node_modules/@arcgis/core/rest/networks/support/TraceResult.js
var i = class extends l {
  constructor(o) {
    super(o), this.aggregatedGeometry = null, this.elements = null, this.globalFunctionResults = null, this.kFeaturesForKNNFound = false, this.startingPointsIgnored = false, this.warnings = null;
  }
};
e([y({ type: l2, json: { write: true }, readOnly: true })], i.prototype, "aggregatedGeometry", void 0), e([y({ type: [p2], json: { write: true }, readOnly: true })], i.prototype, "elements", void 0), e([y({ type: [p], json: { write: true }, readOnly: true })], i.prototype, "globalFunctionResults", void 0), e([y({ type: Boolean, json: { write: true }, readOnly: true })], i.prototype, "kFeaturesForKNNFound", void 0), e([y({ type: Boolean, json: { write: true }, readOnly: true })], i.prototype, "startingPointsIgnored", void 0), e([y({ type: [String], json: { write: true }, readOnly: true })], i.prototype, "warnings", void 0), i = e([a("esri.rest.networks.support.TraceResult")], i);
var a2 = i;

export {
  a2 as a
};
//# sourceMappingURL=chunk-VS5PVM6T.js.map
