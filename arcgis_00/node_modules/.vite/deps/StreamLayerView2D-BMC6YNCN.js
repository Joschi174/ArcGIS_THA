import {
  W
} from "./chunk-UOYBHVLU.js";
import "./chunk-2SHTPLUT.js";
import "./chunk-JGSTWD77.js";
import "./chunk-XR3IIQGY.js";
import "./chunk-5DXEWH5V.js";
import "./chunk-2VJEO6JH.js";
import "./chunk-ND34FL2W.js";
import "./chunk-IL44YAUG.js";
import {
  e as e2
} from "./chunk-TUZCWAFI.js";
import "./chunk-V44KDLLP.js";
import "./chunk-Z46XWZWE.js";
import "./chunk-UFN7ZNFK.js";
import "./chunk-K54BRHUJ.js";
import "./chunk-YICPXMG7.js";
import "./chunk-R4R6OMPI.js";
import "./chunk-VGWIRN5T.js";
import "./chunk-R3N6YXZV.js";
import "./chunk-QACTNCS5.js";
import "./chunk-O3TVUDAA.js";
import "./chunk-Q2D4AWJS.js";
import "./chunk-2GLJOVSV.js";
import "./chunk-OXM5AEWV.js";
import "./chunk-66V6VC6G.js";
import "./chunk-IOMDA26A.js";
import "./chunk-3Q24STUY.js";
import "./chunk-PORVB4YW.js";
import "./chunk-6W4QNETY.js";
import "./chunk-SKZVSZDU.js";
import "./chunk-RHYB7TAK.js";
import "./chunk-L3YUDCKP.js";
import "./chunk-INPPJTIQ.js";
import "./chunk-6VFZXUIR.js";
import "./chunk-D7PFANSX.js";
import "./chunk-C6XOMDEV.js";
import "./chunk-BCTQLMHE.js";
import "./chunk-Z3XU4R74.js";
import "./chunk-INNSNI53.js";
import "./chunk-5NQNQAAW.js";
import "./chunk-KEJOWWPH.js";
import "./chunk-Q5R4SEKK.js";
import "./chunk-IL355RAY.js";
import "./chunk-3V3OLLRL.js";
import "./chunk-WD44CU6B.js";
import "./chunk-HXF46NPP.js";
import "./chunk-WD6NUK3A.js";
import "./chunk-GZLGPJT5.js";
import "./chunk-XBCX74QQ.js";
import "./chunk-NUGAWFAM.js";
import "./chunk-KBZKT5PQ.js";
import "./chunk-OBYHRJUR.js";
import {
  d as d2
} from "./chunk-2RTM4ZHS.js";
import "./chunk-UBVDHOW4.js";
import "./chunk-BLWHZOWS.js";
import "./chunk-KACQFA4U.js";
import "./chunk-XOPGXWER.js";
import "./chunk-2DUFLNG7.js";
import "./chunk-T2F2N6HP.js";
import "./chunk-HJI3BY6O.js";
import "./chunk-UUGV6AYJ.js";
import "./chunk-COWNIHL5.js";
import {
  d
} from "./chunk-OH72SRIK.js";
import "./chunk-FAXVWHOJ.js";
import "./chunk-4RXG3COO.js";
import "./chunk-L45WQWKV.js";
import "./chunk-EWJFH5BC.js";
import "./chunk-WDH5YZUJ.js";
import "./chunk-ELRBKBPI.js";
import "./chunk-5NTMYKFL.js";
import "./chunk-Z3LFAOG6.js";
import "./chunk-OYV6FNKL.js";
import "./chunk-TQ73QHGP.js";
import "./chunk-5EIAXFYU.js";
import "./chunk-SBPJCNL2.js";
import "./chunk-TEW7IDMC.js";
import "./chunk-OSAR3X5M.js";
import "./chunk-FT7S3AKB.js";
import "./chunk-LE46LW35.js";
import "./chunk-DESQE75S.js";
import "./chunk-QKOLWFRE.js";
import "./chunk-YM5PYJO5.js";
import "./chunk-KE5B3PMZ.js";
import "./chunk-L2VQ7IPJ.js";
import "./chunk-K7U6HDB6.js";
import "./chunk-64B6H5RV.js";
import "./chunk-3ECTZ67D.js";
import "./chunk-WHFPT3MI.js";
import "./chunk-Z7ID6LQT.js";
import "./chunk-QDV73XFP.js";
import "./chunk-EN7ZU6UM.js";
import "./chunk-HP3XVAWO.js";
import "./chunk-LJQTXJLJ.js";
import "./chunk-LV4D4M7G.js";
import "./chunk-HFKPIUEB.js";
import "./chunk-OB7XGIVW.js";
import "./chunk-TOTT47W3.js";
import "./chunk-WYSOLO6F.js";
import "./chunk-DSRRGXQP.js";
import "./chunk-6WLIVBPN.js";
import "./chunk-WAWVWQWY.js";
import "./chunk-7XK4IPKN.js";
import "./chunk-3S6PFVBD.js";
import "./chunk-JRV5JJCY.js";
import "./chunk-A7HIXRLM.js";
import "./chunk-HXG3EAGH.js";
import "./chunk-KZ7KT6JL.js";
import "./chunk-PSEOYXGU.js";
import "./chunk-PDYDTTO6.js";
import "./chunk-V65JFJHR.js";
import "./chunk-7APSGFF5.js";
import "./chunk-7P2S6N4H.js";
import "./chunk-6PE6O23W.js";
import "./chunk-BI26XH27.js";
import "./chunk-PPY3JRDD.js";
import "./chunk-3HEHFNVB.js";
import "./chunk-Z3LDBFKX.js";
import "./chunk-A4SZU67B.js";
import "./chunk-Y4FK2QML.js";
import "./chunk-V2A2K5J6.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import "./chunk-7KNADJUA.js";
import "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import "./chunk-VL6IMOUO.js";
import "./chunk-YCF7NU4C.js";
import "./chunk-FQ2MMUPL.js";
import {
  l
} from "./chunk-FQMVGWVJ.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-2IPRPVVF.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-OICH3FD6.js";
import "./chunk-DNUHV7J4.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import {
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2 as a,
  n
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import "./chunk-QPWNDO2C.js";
import "./chunk-CA2PXGXL.js";
import "./chunk-RXTTOJU7.js";
import "./chunk-4HAMAX2C.js";
import "./chunk-3QT5L2OK.js";
import {
  s3 as s
} from "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/layers/StreamLayerView.js
var o = (o2) => {
  let i = class extends o2 {
    resume() {
      this._isUserPaused = false, this.suspended || this._doResume();
    }
    pause() {
      this._isUserPaused = true, this.suspended || this._doPause();
    }
    constructor(...s2) {
      super(...s2), this._isUserPaused = false, this.filter = null;
    }
    get connectionStatus() {
      return this._isUserPaused ? "paused" : this._streamConnectionStatus;
    }
    _onSuspendedChange(s2) {
      s2 ? this._doPause() : this._isUserPaused || this._doResume();
    }
  };
  return e([y()], i.prototype, "_isUserPaused", void 0), e([y({ readOnly: true })], i.prototype, "connectionStatus", null), e([y({ type: d2 })], i.prototype, "filter", void 0), i = e([a("esri.layers.mixins.StreamLayerView")], i), i;
};

// node_modules/@arcgis/core/views/2d/layers/StreamLayerView2D.js
function c(e3, t) {
  if (null == e3 && null == t)
    return null;
  const r = {};
  return null != t && (r.geometry = t.toJSON()), null != e3 && (r.where = e3), r;
}
var u = class extends o(W) {
  constructor() {
    super(...arguments), this.pipelineConnectionStatus = "disconnected", this.pipelineErrorString = null, this._enabledEventTypes = /* @__PURE__ */ new Set();
  }
  initialize() {
    this.addHandles([l(() => this.layer.customParameters, (e3) => this._proxy.updateCustomParameters(e3)), this.layer.on("send-message-to-socket", (e3) => this._proxy.sendMessageToSocket(e3)), this.layer.on("send-message-to-client", (e3) => this._proxy.sendMessageToClient(e3)), l(() => this.layer.purgeOptions, () => this._update()), l(() => this.suspended, this._onSuspendedChange.bind(this))], "constructor");
  }
  get connectionError() {
    return this.pipelineErrorString ? new s("stream-controller", this.pipelineErrorString) : null;
  }
  on(e3, t) {
    if (Array.isArray(e3))
      return n(e3.map((e4) => this.on(e4, t)));
    const s2 = ["data-received", "message-received"].includes(e3);
    s2 && (this._enabledEventTypes.add(e3), this._proxy.enableEvent(e3, true));
    const i = super.on(e3, t), o2 = this;
    return { remove() {
      i.remove(), s2 && (o2._proxy.closed || o2.hasEventListener(e3) || o2._proxy.enableEvent(e3, false));
    } };
  }
  queryLatestObservations(e3, r) {
    var _a, _b, _c;
    if (!(((_a = this.layer.timeInfo) == null ? void 0 : _a.endField) || ((_b = this.layer.timeInfo) == null ? void 0 : _b.startField) || ((_c = this.layer.timeInfo) == null ? void 0 : _c.trackIdField)))
      throw new s("streamlayer-no-timeField", "queryLatestObservation can only be used with services that define a TrackIdField");
    return this._proxy.queryLatestObservations(this._cleanUpQuery(e3), r).then((e4) => {
      const t = d.fromJSON(e4);
      return t.features.forEach((e5) => {
        e5.layer = this.layer, e5.sourceLayer = this.layer;
      }), t;
    });
  }
  detach() {
    super.detach(), this.pipelineConnectionStatus = "disconnected";
  }
  get _streamConnectionStatus() {
    return this.pipelineConnectionStatus;
  }
  _doPause() {
    var _a;
    (_a = this._proxy) == null ? void 0 : _a.pauseStream();
  }
  _doResume() {
    var _a;
    (_a = this._proxy) == null ? void 0 : _a.resumeStream();
  }
  _createClientOptions() {
    return { ...super._createClientOptions(), setProperty: (e3) => {
      this.set(e3.propertyName, e3.value);
    } };
  }
  _createTileRendererHash(e3) {
    const t = `${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(c(this.layer.definitionExpression, this.layer.geometryDefinition))})`;
    return super._createTileRendererHash(e3) + t;
  }
  async _createServiceOptions() {
    const e3 = this.layer, { objectIdField: t } = e3, r = e3.fields.map((e4) => e4.toJSON()), s2 = e2(e3.geometryType), i = e3.timeInfo && e3.timeInfo.toJSON() || null, o2 = e3.spatialReference ? e3.spatialReference.toJSON() : null;
    return { type: "stream", isPaused: this._isUserPaused, fields: r, geometryType: s2, objectIdField: t, timeInfo: i, source: this.layer.parsedUrl, serviceFilter: c(this.layer.definitionExpression, this.layer.geometryDefinition), purgeOptions: this.layer.purgeOptions.toJSON(), enabledEventTypes: Array.from(this._enabledEventTypes.values()), spatialReference: o2, maxReconnectionAttempts: this.layer.maxReconnectionAttempts, maxReconnectionInterval: this.layer.maxReconnectionInterval, updateInterval: this.layer.updateInterval, customParameters: e3.customParameters };
  }
};
e([y()], u.prototype, "pipelineConnectionStatus", void 0), e([y()], u.prototype, "pipelineErrorString", void 0), e([y({ readOnly: true })], u.prototype, "connectionError", null), e([y({ readOnly: true })], u.prototype, "_streamConnectionStatus", null), u = e([a("esri.views.2d.layers.StreamLayerView2D")], u);
var y2 = u;
export {
  y2 as default
};
//# sourceMappingURL=StreamLayerView2D-BMC6YNCN.js.map
