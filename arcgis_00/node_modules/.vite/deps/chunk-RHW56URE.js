import {
  s as s2
} from "./chunk-JUHOAKXP.js";
import {
  i as i2
} from "./chunk-3OL5L3LC.js";
import {
  n
} from "./chunk-G3X4SV7G.js";
import {
  p
} from "./chunk-HLTEFNTE.js";
import {
  i
} from "./chunk-MOPR7RFH.js";
import {
  x2 as x
} from "./chunk-MZXYP6SL.js";
import {
  r2 as r
} from "./chunk-4X5MDDUC.js";
import {
  o
} from "./chunk-UURR7HU3.js";
import {
  l
} from "./chunk-JLE6P4DW.js";
import {
  s
} from "./chunk-VPF2CM6B.js";
import {
  y
} from "./chunk-TBBTJ7N4.js";
import {
  a2
} from "./chunk-AS7ITRBV.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  a
} from "./chunk-SF7FIURP.js";

// node_modules/@arcgis/core/Camera.js
var u = class extends i2(l) {
  constructor(...o2) {
    super(...o2), this.position = new x([0, 0, 0]), this.heading = 0, this.tilt = 0, this.fov = 55;
  }
  normalizeCtorArgs(o2, r2, t, e2) {
    if (o2 && "object" == typeof o2 && ("x" in o2 || Array.isArray(o2))) {
      const s3 = { position: o2 };
      return null != r2 && (s3.heading = r2), null != t && (s3.tilt = t), null != e2 && (s3.fov = e2), s3;
    }
    return o2;
  }
  writePosition(o2, r2, t, e2) {
    const s3 = o2.clone();
    s3.x = a(o2.x || 0), s3.y = a(o2.y || 0), s3.z = o2.hasZ ? a(o2.z || 0) : o2.z, r2[t] = s3.write({}, e2);
  }
  readPosition(o2, r2) {
    const t = new x();
    return t.read(o2, r2), t.x = a(t.x || 0), t.y = a(t.y || 0), t.z = t.hasZ ? a(t.z || 0) : t.z, t;
  }
  equals(o2) {
    return null != o2 && (this.tilt === o2.tilt && this.heading === o2.heading && this.fov === o2.fov && this.position.equals(o2.position));
  }
};
e([y({ type: x, json: { write: { isRequired: true } } })], u.prototype, "position", void 0), e([r("position")], u.prototype, "writePosition", null), e([o("position")], u.prototype, "readPosition", null), e([y({ type: Number, nonNullable: true, json: { write: { isRequired: true } } }), s((o2) => s2.normalize(a(o2)))], u.prototype, "heading", void 0), e([y({ type: Number, nonNullable: true, json: { write: { isRequired: true } } }), s((o2) => i(a(o2), -180, 180))], u.prototype, "tilt", void 0), e([y({ type: Number, nonNullable: true, json: { read: false, write: false } })], u.prototype, "fov", void 0), u = e([a2("esri.Camera")], u);
var d = u;

// node_modules/@arcgis/core/Viewpoint.js
var p2;
var n2 = p2 = class extends l {
  constructor(r2) {
    super(r2), this.rotation = 0, this.scale = 0, this.targetGeometry = null, this.camera = null;
  }
  castRotation(r2) {
    return (r2 %= 360) < 0 && (r2 += 360), r2;
  }
  clone() {
    return new p2({ rotation: this.rotation, scale: this.scale, targetGeometry: null != this.targetGeometry ? this.targetGeometry.clone() : null, camera: null != this.camera ? this.camera.clone() : null });
  }
};
function m() {
  return { enabled: !this.camera };
}
e([y({ type: Number, json: { write: true, origins: { "web-map": { default: 0, write: true }, "web-scene": { write: { overridePolicy: m } } } } })], n2.prototype, "rotation", void 0), e([s("rotation")], n2.prototype, "castRotation", null), e([y({ type: Number, json: { write: true, origins: { "web-map": { default: 0, write: true }, "web-scene": { write: { overridePolicy: m } } } } })], n2.prototype, "scale", void 0), e([y({ types: n, json: { read: p, write: true, origins: { "web-scene": { read: p, write: { overridePolicy: m } } } } })], n2.prototype, "targetGeometry", void 0), e([y({ type: d, json: { write: true } })], n2.prototype, "camera", void 0), n2 = p2 = e([a2("esri.Viewpoint")], n2);
var l2 = n2;

export {
  l2 as l
};
//# sourceMappingURL=chunk-RHW56URE.js.map
