import "./chunk-MVZNNRYN.js";
import "./chunk-PCVZF4IO.js";
import "./chunk-IEB6YZNM.js";
import "./chunk-A4WIJ3HW.js";
import {
  d as d3,
  f as f3
} from "./chunk-5DXEWH5V.js";
import "./chunk-2VJEO6JH.js";
import "./chunk-IL44YAUG.js";
import "./chunk-TUZCWAFI.js";
import "./chunk-Z46XWZWE.js";
import {
  i as i5,
  w
} from "./chunk-UFN7ZNFK.js";
import {
  i as i4
} from "./chunk-K54BRHUJ.js";
import "./chunk-YICPXMG7.js";
import "./chunk-T3BOZPGW.js";
import "./chunk-EZ5XIQ7I.js";
import {
  i as i3,
  j
} from "./chunk-SDU3O6RO.js";
import "./chunk-MKYYBX7M.js";
import "./chunk-5MWD3MR6.js";
import "./chunk-NKMYWCA5.js";
import {
  c as c2,
  u
} from "./chunk-VGWIRN5T.js";
import {
  T as T2,
  e2 as e4
} from "./chunk-R3N6YXZV.js";
import "./chunk-2ZFYBAEI.js";
import "./chunk-O3TVUDAA.js";
import "./chunk-DM5RPQ5Q.js";
import "./chunk-Q2D4AWJS.js";
import "./chunk-46OTPSVO.js";
import "./chunk-2GLJOVSV.js";
import "./chunk-C454H62Q.js";
import "./chunk-OXM5AEWV.js";
import "./chunk-B57TE7LC.js";
import {
  r as r6
} from "./chunk-SRNTZ5YK.js";
import "./chunk-SSY5YUJZ.js";
import "./chunk-CQ6LDXRQ.js";
import "./chunk-66V6VC6G.js";
import "./chunk-IOMDA26A.js";
import "./chunk-3Q24STUY.js";
import "./chunk-PORVB4YW.js";
import "./chunk-6W4QNETY.js";
import "./chunk-SKZVSZDU.js";
import "./chunk-2QRPHNFJ.js";
import "./chunk-RHYB7TAK.js";
import "./chunk-L3YUDCKP.js";
import "./chunk-INPPJTIQ.js";
import "./chunk-6VFZXUIR.js";
import "./chunk-D7PFANSX.js";
import "./chunk-C6XOMDEV.js";
import "./chunk-BCTQLMHE.js";
import "./chunk-Z3XU4R74.js";
import "./chunk-CP22CCY6.js";
import "./chunk-SGIIR6RJ.js";
import "./chunk-INNSNI53.js";
import "./chunk-5NQNQAAW.js";
import "./chunk-KEJOWWPH.js";
import "./chunk-Q5R4SEKK.js";
import "./chunk-IL355RAY.js";
import "./chunk-3V3OLLRL.js";
import {
  T
} from "./chunk-WD44CU6B.js";
import "./chunk-HXF46NPP.js";
import {
  D,
  F
} from "./chunk-WD6NUK3A.js";
import {
  e as e2
} from "./chunk-MJUOK6OE.js";
import "./chunk-E5YRWFQU.js";
import "./chunk-TNVCH3GU.js";
import {
  v
} from "./chunk-K5MRFCR6.js";
import "./chunk-UNQFOAUX.js";
import "./chunk-GZLGPJT5.js";
import "./chunk-XBCX74QQ.js";
import "./chunk-NUGAWFAM.js";
import "./chunk-KBZKT5PQ.js";
import "./chunk-SZSPKNXB.js";
import "./chunk-BSCE3YT4.js";
import "./chunk-OBYHRJUR.js";
import "./chunk-GSCSASPY.js";
import "./chunk-UBVDHOW4.js";
import "./chunk-BLWHZOWS.js";
import "./chunk-KACQFA4U.js";
import "./chunk-D7CFF2FH.js";
import "./chunk-S6UQK27H.js";
import "./chunk-XOPGXWER.js";
import "./chunk-T2F2N6HP.js";
import "./chunk-UUGV6AYJ.js";
import "./chunk-HSP4VKTO.js";
import "./chunk-COWNIHL5.js";
import "./chunk-HGK7QSHJ.js";
import "./chunk-FAXVWHOJ.js";
import "./chunk-4RXG3COO.js";
import "./chunk-IIHBYDIT.js";
import "./chunk-L45WQWKV.js";
import "./chunk-EWJFH5BC.js";
import "./chunk-5NTMYKFL.js";
import "./chunk-OYV6FNKL.js";
import "./chunk-HXLO7LC5.js";
import "./chunk-5YQM3GC2.js";
import "./chunk-SUKBNOSX.js";
import "./chunk-3YWKHS6T.js";
import "./chunk-SBPJCNL2.js";
import "./chunk-TEW7IDMC.js";
import "./chunk-HVNQQ4DC.js";
import {
  ut
} from "./chunk-BTLEPTCC.js";
import "./chunk-OSAR3X5M.js";
import "./chunk-FT7S3AKB.js";
import {
  e as e3
} from "./chunk-LE46LW35.js";
import {
  n as n2
} from "./chunk-DESQE75S.js";
import "./chunk-HJXIZZJE.js";
import "./chunk-I3HK53BD.js";
import {
  r as r5
} from "./chunk-77MJECFF.js";
import {
  y as y2
} from "./chunk-CTZ7DCY5.js";
import "./chunk-QKOLWFRE.js";
import "./chunk-YM5PYJO5.js";
import {
  t as t2
} from "./chunk-KE5B3PMZ.js";
import "./chunk-2QUCKFNX.js";
import "./chunk-L2VQ7IPJ.js";
import "./chunk-K7U6HDB6.js";
import "./chunk-64B6H5RV.js";
import {
  n
} from "./chunk-3ECTZ67D.js";
import {
  M as M2,
  f as f2,
  h as h2,
  i as i2,
  r as r4
} from "./chunk-WHFPT3MI.js";
import {
  r as r3
} from "./chunk-Z7ID6LQT.js";
import "./chunk-Z6VAQ2ZJ.js";
import "./chunk-MHACI6VO.js";
import "./chunk-4QODSIJL.js";
import "./chunk-HP3XVAWO.js";
import "./chunk-LJQTXJLJ.js";
import "./chunk-LV4D4M7G.js";
import "./chunk-HFKPIUEB.js";
import "./chunk-OB7XGIVW.js";
import "./chunk-TOTT47W3.js";
import "./chunk-WYSOLO6F.js";
import "./chunk-DSRRGXQP.js";
import "./chunk-6WLIVBPN.js";
import "./chunk-WAWVWQWY.js";
import "./chunk-7XK4IPKN.js";
import "./chunk-3S6PFVBD.js";
import "./chunk-A7HIXRLM.js";
import "./chunk-IJCLSAKS.js";
import "./chunk-HXG3EAGH.js";
import {
  c
} from "./chunk-KZ7KT6JL.js";
import "./chunk-PSEOYXGU.js";
import "./chunk-PDYDTTO6.js";
import "./chunk-V65JFJHR.js";
import "./chunk-Y2UHC2VM.js";
import "./chunk-7APSGFF5.js";
import "./chunk-S5RFXGTW.js";
import "./chunk-7P2S6N4H.js";
import "./chunk-6PE6O23W.js";
import "./chunk-BI26XH27.js";
import "./chunk-PPY3JRDD.js";
import "./chunk-4EO4UJYA.js";
import "./chunk-KQYZ7H7W.js";
import "./chunk-6DVUGIPD.js";
import "./chunk-3HEHFNVB.js";
import {
  V
} from "./chunk-Z3LDBFKX.js";
import "./chunk-Y4FK2QML.js";
import "./chunk-V2A2K5J6.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import {
  i
} from "./chunk-CBBETCDS.js";
import {
  o
} from "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import {
  M,
  s as s3,
  x
} from "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import "./chunk-7KNADJUA.js";
import {
  d as d2
} from "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import "./chunk-FQ2MMUPL.js";
import {
  a as a2,
  f,
  h,
  l
} from "./chunk-FQMVGWVJ.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-2IPRPVVF.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-OICH3FD6.js";
import "./chunk-DNUHV7J4.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import {
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2 as a
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import {
  r
} from "./chunk-7LFT2RDJ.js";
import "./chunk-QPWNDO2C.js";
import "./chunk-CA2PXGXL.js";
import "./chunk-RXTTOJU7.js";
import {
  d,
  r as r2
} from "./chunk-4HAMAX2C.js";
import {
  t
} from "./chunk-3QT5L2OK.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/Overlay.js
var j2 = e2();
var _ = class extends i4 {
  constructor(s4) {
    super(), this.elementView = s4, this.isWrapAround = false, this.perspectiveTransform = n(), this._vertices = new Float32Array(20), this._handles = [], this._handles.push(l(() => this.elementView.element.opacity, (e5) => this.opacity = e5, h), l(() => [this.elementView.coords], () => {
      this.requestRender();
    }, h), f(() => this.elementView.element.loaded, () => {
      const e5 = this.elementView.element;
      this.ready(), "video" === e5.type && null != e5.content && this._handles.push(r2(e5.content, "play", () => this.requestRender()));
    }, h)), s4.element.load().catch((t3) => {
      s.getLogger("esri.views.2d.layers.MediaLayerView2D").error(new s2("element-load-error", "Element cannot be displayed", { element: s4, error: t3 }));
    });
  }
  destroy() {
    this._handles.forEach((e5) => e5.remove()), this.texture = t(this.texture);
  }
  get dvsMat3() {
    return this.parent.dvsMat3;
  }
  beforeRender(e5) {
    const { context: t3 } = e5, r7 = this.elementView.element.content;
    if (null != r7) {
      const e6 = r7 instanceof HTMLImageElement, i6 = r7 instanceof HTMLVideoElement, o2 = e6 ? r7.naturalWidth : i6 ? r7.videoWidth : r7.width, n3 = e6 ? r7.naturalHeight : i6 ? r7.videoHeight : r7.height;
      if (this._updatePerspectiveTransform(o2, n3), this.texture)
        i6 && !r7.paused && (this.texture.setData(r7), this.requestRender(), (t3.type === n2.WEBGL2 || o(o2) && o(n3)) && this.texture.generateMipmap());
      else {
        const e7 = new e4();
        e7.wrapMode = D.CLAMP_TO_EDGE, e7.preMultiplyAlpha = true, e7.width = o2, e7.height = n3, this.texture = new T2(t3, e7, r7), (t3.type === n2.WEBGL2 || o(o2) && o(n3)) && this.texture.generateMipmap(), i6 && !r7.paused && this.requestRender();
      }
    }
    super.beforeRender(e5);
  }
  _createTransforms() {
    return null;
  }
  updateDrawCoords(e5, t3) {
    const r7 = this.elementView.coords;
    if (null == r7)
      return;
    const [s4, i6, o2, n3] = r7.rings[0], a3 = this._vertices, { x: m, y: h3 } = e5, l2 = 0 !== t3;
    l2 ? a3.set([i6[0] - m, i6[1] - h3, s4[0] - m, s4[1] - h3, o2[0] - m, o2[1] - h3, n3[0] - m, n3[1] - h3, n3[0] - m, n3[1] - h3, i6[0] + t3 - m, i6[1] - h3, i6[0] + t3 - m, i6[1] - h3, s4[0] + t3 - m, s4[1] - h3, o2[0] + t3 - m, o2[1] - h3, n3[0] + t3 - m, n3[1] - h3]) : a3.set([i6[0] - m, i6[1] - h3, s4[0] - m, s4[1] - h3, o2[0] - m, o2[1] - h3, n3[0] - m, n3[1] - h3]), this.isWrapAround = l2;
  }
  getVAO(e5, t3, r7) {
    if (null == this.elementView.coords)
      return null;
    const s4 = this._vertices;
    if (this._vao)
      this._geometryVbo.setData(s4);
    else {
      this._geometryVbo = c2.createVertex(e5, F.DYNAMIC_DRAW, s4);
      const i6 = c2.createVertex(e5, F.STATIC_DRAW, new Uint16Array([0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]));
      this._vao = new u(e5, r7, t3, { geometry: this._geometryVbo, tex: i6 });
    }
    return this._vao;
  }
  _updatePerspectiveTransform(e5, t3) {
    const r7 = this._vertices;
    j(j2, [0, 0, e5, 0, 0, t3, e5, t3], [r7[0], r7[1], r7[4], r7[5], r7[2], r7[3], r7[6], r7[7]]), r3(this.perspectiveTransform, j2[6] / j2[8] * e5, j2[7] / j2[8] * t3);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/OverlayContainer.js
var u2 = class extends i5 {
  constructor() {
    super(...arguments), this._localOrigin = c(0, 0), this._viewStateId = -1, this._dvsMat3 = e3(), this.requiresDedicatedFBO = false;
  }
  get dvsMat3() {
    return this._dvsMat3;
  }
  beforeRender(t3) {
    this._updateMatrices(t3), this._updateOverlays(t3, this.children);
    for (const e5 of this.children)
      e5.beforeRender(t3);
  }
  prepareRenderPasses(t3) {
    const e5 = t3.registerRenderPass({ name: "overlay", brushes: [w.overlay], target: () => this.children, drawPhase: T.MAP });
    return [...super.prepareRenderPasses(t3), e5];
  }
  _updateMatrices(t3) {
    const { state: i6 } = t3, { id: d4, size: l2, pixelRatio: h3, resolution: m, rotation: f4, viewpoint: u3, displayMat3: M3 } = i6;
    if (this._viewStateId === d4)
      return;
    const v3 = Math.PI / 180 * f4, _3 = h3 * l2[0], w3 = h3 * l2[1], { x: g, y: y3 } = u3.targetGeometry, j3 = v(g, i6.spatialReference);
    this._localOrigin.x = j3, this._localOrigin.y = y3;
    const R2 = m * _3, b2 = m * w3, O = r4(this._dvsMat3);
    i2(O, O, M3), M2(O, O, t2(_3 / 2, w3 / 2)), f2(O, O, r6(_3 / R2, -w3 / b2, 1)), h2(O, O, -v3), this._viewStateId = d4;
  }
  _updateOverlays(t3, e5) {
    const { state: s4 } = t3, { rotation: r7, spatialReference: o2, worldScreenWidth: a3, size: i6, viewpoint: n3 } = s4, c3 = this._localOrigin;
    let p = 0;
    const h3 = d2(o2);
    if (h3 && o2.isWrappable) {
      const t4 = i6[0], d4 = i6[1], m = 180 / Math.PI * r7, f4 = Math.abs(Math.cos(m)), u3 = Math.abs(Math.sin(m)), M3 = Math.round(t4 * f4 + d4 * u3), [v3, _3] = h3.valid, w3 = ut(o2), { x: g, y: y3 } = n3.targetGeometry, j3 = [g, y3], R2 = [0, 0];
      s4.toScreen(R2, j3);
      const b2 = [0, 0];
      let O;
      O = M3 > a3 ? 0.5 * a3 : 0.5 * M3;
      const P = Math.floor((g + 0.5 * w3) / w3), x2 = v3 + P * w3, C = _3 + P * w3, D2 = [R2[0] + O, 0];
      s4.toMap(b2, D2), b2[0] > C && (p = w3), D2[0] = R2[0] - O, s4.toMap(b2, D2), b2[0] < x2 && (p = -w3);
      for (const s5 of e5) {
        const t5 = s5.elementView.bounds;
        if (null == t5)
          continue;
        const [e6, , r8] = t5;
        e6 < v3 && r8 > v3 ? s5.updateDrawCoords(c3, w3) : r8 > _3 && e6 < _3 ? s5.updateDrawCoords(c3, -w3) : s5.updateDrawCoords(c3, p);
      }
    } else
      for (const d4 of e5)
        d4.updateDrawCoords(c3, p);
  }
};

// node_modules/@arcgis/core/views/2d/layers/MediaLayerView2D.js
var w2 = class extends f3(d3) {
  constructor() {
    super(...arguments), this._overlayContainer = null, this._fetchQueue = null, this._tileStrategy = null, this._elementReferences = /* @__PURE__ */ new Map(), this._debugGraphicsView = null, this.layer = null, this.elements = new V();
  }
  attach() {
    this.addAttachHandles([a2(() => this.layer.effectiveSource, "refresh", () => {
      this._tileStrategy.refresh((e5) => this._updateTile(e5)), this.requestUpdate();
    }), a2(() => this.layer.effectiveSource, "change", ({ element: e5 }) => this._elementUpdateHandler(e5))]), this._overlayContainer = new u2(), this.container.addChild(this._overlayContainer), this._fetchQueue = new y2({ tileInfoView: this.view.featuresTilingScheme, concurrency: 10, process: (e5, t3) => this._queryElements(e5, t3) }), this._tileStrategy = new r5({ cachePolicy: "purge", resampling: true, acquireTile: (e5) => this._acquireTile(e5), releaseTile: (e5) => this._releaseTile(e5), tileInfoView: this.view.featuresTilingScheme }), this.requestUpdate();
  }
  detach() {
    var _a;
    this.elements.removeAll(), this._tileStrategy.destroy(), this._fetchQueue.destroy(), this._overlayContainer.removeAllChildren(), this.container.removeAllChildren(), this._elementReferences.clear(), (_a = this._debugGraphicsView) == null ? void 0 : _a.destroy();
  }
  supportsSpatialReference(e5) {
    return true;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  update(e5) {
    var _a;
    this._tileStrategy.update(e5), (_a = this._debugGraphicsView) == null ? void 0 : _a.update(e5);
  }
  async hitTest(e5, t3) {
    const r7 = [], i6 = e5.normalize(), s4 = [i6.x, i6.y];
    for (const { projectedElement: { normalizedCoords: n3, element: o2 } } of this._elementReferences.values())
      null != n3 && s3(n3.rings, s4) && r7.push({ type: "media", element: o2, layer: this.layer, mapPoint: e5 });
    return r7.reverse();
  }
  canResume() {
    return null != this.layer.source && super.canResume();
  }
  async doRefresh() {
    this._fetchQueue.reset(), this._tileStrategy.refresh((e5) => this._updateTile(e5));
  }
  _acquireTile(e5) {
    const t3 = new T3(e5.clone());
    return this._updateTile(t3), t3;
  }
  _updateTile(e5) {
    this.updatingHandles.addPromise(this._fetchQueue.push(e5.key).then((t3) => {
      const [r7, i6] = e5.setElements(t3);
      this._referenceElements(e5, r7), this._dereferenceElements(e5, i6), this.requestUpdate();
    }, (e6) => {
      d(e6) || s.getLogger(this).error(e6);
    }));
  }
  _releaseTile(e5) {
    this._fetchQueue.abort(e5.key.id), e5.elements && this._dereferenceElements(e5, e5.elements), this.requestUpdate();
  }
  async _queryElements(e5, t3) {
    const r7 = this.layer.effectiveSource;
    if (null == r7)
      return [];
    this.view.featuresTilingScheme.getTileBounds(b, e5, true);
    const i6 = new M({ xmin: b[0], ymin: b[1], xmax: b[2], ymax: b[3], spatialReference: this.view.spatialReference });
    return r7.queryElements(i6, t3);
  }
  _referenceElements(e5, t3) {
    if (null != this.layer.source)
      for (const r7 of t3)
        this._referenceElement(e5, r7);
  }
  _referenceElement(e5, t3) {
    r(this._elementReferences, t3.uid, () => {
      const e6 = new i3({ element: t3, spatialReference: this.view.spatialReference }), r7 = new _(e6);
      this._overlayContainer.addChild(r7), this.elements.add(t3);
      let i6 = null;
      return { tiles: /* @__PURE__ */ new Set(), projectedElement: e6, overlay: r7, debugGraphic: i6 };
    }).tiles.add(e5);
  }
  _dereferenceElements(e5, t3) {
    for (const r7 of t3)
      this._dereferenceElement(e5, r7);
  }
  _dereferenceElement(e5, t3) {
    var _a;
    const r7 = this._elementReferences.get(t3.uid);
    r7.tiles.delete(e5), r7.tiles.size || (this._overlayContainer.removeChild(r7.overlay), r7.overlay.destroy(), r7.projectedElement.destroy(), this._elementReferences.delete(t3.uid), this.elements.remove(t3), (_a = this._debugGraphicsView) == null ? void 0 : _a.graphics.remove(r7.debugGraphic));
  }
  _elementUpdateHandler(e5) {
    var _a;
    let t3 = this._elementReferences.get(e5.uid);
    if (t3) {
      const r8 = t3.projectedElement.normalizedCoords;
      if (null == r8)
        return this._overlayContainer.removeChild(t3.overlay), t3.overlay.destroy(), t3.projectedElement.destroy(), this._elementReferences.delete(e5.uid), this.elements.remove(e5), void ((_a = this._debugGraphicsView) == null ? void 0 : _a.graphics.remove(t3.debugGraphic));
      const i6 = [], s4 = [];
      for (const e6 of this._tileStrategy.tiles) {
        const n3 = v2(this.view.featuresTilingScheme, e6, r8);
        t3.tiles.has(e6) ? n3 || s4.push(e6) : n3 && i6.push(e6);
      }
      for (const t4 of i6)
        this._referenceElement(t4, e5);
      for (const t4 of s4)
        this._dereferenceElement(t4, e5);
      return t3 = this._elementReferences.get(e5.uid), void ((t3 == null ? void 0 : t3.debugGraphic) && (t3.debugGraphic.geometry = t3.projectedElement.normalizedCoords, this._debugGraphicsView.graphicUpdateHandler({ graphic: t3.debugGraphic, property: "geometry" })));
    }
    const r7 = new i3({ element: e5, spatialReference: this.view.spatialReference }).normalizedCoords;
    if (null != r7)
      for (const i6 of this._tileStrategy.tiles) {
        v2(this.view.featuresTilingScheme, i6, r7) && this._referenceElement(i6, e5);
      }
  }
};
e([y()], w2.prototype, "_fetchQueue", void 0), e([y()], w2.prototype, "layer", void 0), e([y({ readOnly: true })], w2.prototype, "elements", void 0), w2 = e([a("esri.views.2d.layers.MediaLayerView2D")], w2);
var b = i();
var _2 = { xmin: 0, ymin: 0, xmax: 0, ymax: 0 };
function v2(e5, t3, r7) {
  return e5.getTileBounds(b, t3.key, true), _2.xmin = b[0], _2.ymin = b[1], _2.xmax = b[2], _2.ymax = b[3], x(_2, r7);
}
var T3 = class {
  constructor(e5) {
    this.key = e5, this.elements = null, this.isReady = false, this.visible = true;
  }
  setElements(e5) {
    const t3 = [], r7 = new Set(this.elements);
    this.elements = e5;
    for (const i6 of e5)
      r7.has(i6) ? r7.delete(i6) : t3.push(i6);
    return this.isReady = true, [t3, Array.from(r7)];
  }
  destroy() {
  }
};
var R = w2;
export {
  R as default
};
//# sourceMappingURL=MediaLayerView2D-EYA2KGUQ.js.map
