import {
  S,
  d as d2,
  g,
  j as j3
} from "./chunk-ZSSBCDMU.js";
import "./chunk-VRNAR2BU.js";
import "./chunk-IAMROCVA.js";
import "./chunk-7L7U6YJ3.js";
import "./chunk-YYGN2GO6.js";
import "./chunk-QXLGW66I.js";
import "./chunk-YGH3EEG5.js";
import "./chunk-H7EOZY7L.js";
import "./chunk-LKYCF7AI.js";
import {
  p
} from "./chunk-5BKFA3IG.js";
import "./chunk-R5EWWIOD.js";
import "./chunk-52L3OT7H.js";
import "./chunk-NHDVBH5V.js";
import "./chunk-WLU7KKOI.js";
import "./chunk-BA7WNJMF.js";
import "./chunk-ZZQVVHF7.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import {
  j as j2
} from "./chunk-M52YOZDN.js";
import {
  a as a3
} from "./chunk-P5CFKMGO.js";
import "./chunk-2EHBSKAM.js";
import "./chunk-HVBIBP5P.js";
import {
  t
} from "./chunk-VLY2K2HC.js";
import {
  c
} from "./chunk-AVOTXTN2.js";
import {
  O
} from "./chunk-4FGKBJP7.js";
import {
  f as f3
} from "./chunk-LALFHQE3.js";
import "./chunk-IVCYO56U.js";
import "./chunk-JGFWZDK3.js";
import "./chunk-IN5QJ5F4.js";
import "./chunk-C4I3X4RM.js";
import "./chunk-GVMBTEIW.js";
import "./chunk-RFIIU6XF.js";
import "./chunk-DGADM4KQ.js";
import "./chunk-4CZO65BK.js";
import "./chunk-7C7EF3FD.js";
import "./chunk-PQOGMOZ7.js";
import "./chunk-XMS7FYO7.js";
import "./chunk-HOGRNOD4.js";
import "./chunk-NZY6MEON.js";
import {
  n as n2
} from "./chunk-CSKEV5FZ.js";
import "./chunk-Z74XNIJ3.js";
import "./chunk-GRS3EHGG.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-TNYMHVJ4.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-Z6HMRH7V.js";
import "./chunk-JZBA2N4X.js";
import {
  b
} from "./chunk-4W4V5TBI.js";
import "./chunk-HABV4VZ2.js";
import "./chunk-2D2437VM.js";
import "./chunk-YIIAB4WA.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-FUHI6TR6.js";
import "./chunk-FVYUULND.js";
import "./chunk-BRRN7CRU.js";
import {
  _
} from "./chunk-TLIPFBCN.js";
import "./chunk-7KTXAH5E.js";
import "./chunk-WYE6B4VU.js";
import "./chunk-5XLKQQPP.js";
import "./chunk-3OL5L3LC.js";
import "./chunk-H7C32RFW.js";
import {
  V
} from "./chunk-RNYFZDNI.js";
import "./chunk-FBG4WSP5.js";
import "./chunk-G3X4SV7G.js";
import "./chunk-AJM6LB5B.js";
import "./chunk-G4LADD2B.js";
import "./chunk-HLTEFNTE.js";
import "./chunk-CO3TM5QL.js";
import "./chunk-FARQZCLL.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import {
  M
} from "./chunk-E5XSQEGK.js";
import "./chunk-MZXYP6SL.js";
import {
  f as f2,
  r2 as r
} from "./chunk-4X5MDDUC.js";
import {
  o
} from "./chunk-UURR7HU3.js";
import {
  u2
} from "./chunk-JLE6P4DW.js";
import "./chunk-CL7UAIKB.js";
import {
  U,
  a as a2,
  j,
  l
} from "./chunk-F3SBJW2O.js";
import {
  n
} from "./chunk-YVCC2Z32.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-YC3PYTAZ.js";
import "./chunk-46JSCFRH.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-VPF2CM6B.js";
import "./chunk-JCWF5RB4.js";
import {
  y
} from "./chunk-TBBTJ7N4.js";
import "./chunk-NUI5LCQ5.js";
import {
  a2 as a
} from "./chunk-AS7ITRBV.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import {
  d
} from "./chunk-SF7FIURP.js";
import "./chunk-K7YQIZQM.js";
import "./chunk-H3ETM4DZ.js";
import {
  Ct
} from "./chunk-TXAS6RAG.js";
import {
  f
} from "./chunk-G72U56FP.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-JGYHKABU.js";
import {
  u
} from "./chunk-3FXB2ZFK.js";
import "./chunk-WQNVH5M4.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/support/KMLSublayer.js
var j4;
var S2 = j4 = class extends n.EventedMixin(u2(_)) {
  constructor(...e2) {
    super(...e2), this.description = null, this.fullExtent = null, this.id = null, this.networkLink = null, this.parent = null, this.sublayers = null, this.title = null, this.sourceJSON = null, this.layer = null, this.addHandles([a2(() => this.sublayers, "after-add", ({ item: e3 }) => {
      e3.parent = this, e3.layer = this.layer;
    }, U), a2(() => this.sublayers, "after-remove", ({ item: e3 }) => {
      e3.layer = e3.parent = null;
    }, U), l(() => this.sublayers, (e3, t2) => {
      if (t2)
        for (const r2 of t2)
          r2.layer = r2.parent = null;
      if (e3)
        for (const r2 of e3)
          r2.parent = this, r2.layer = this.layer;
    }, U), l(() => this.layer, (e3) => {
      if (this.sublayers)
        for (const t2 of this.sublayers)
          t2.layer = e3;
    }, U)]);
  }
  initialize() {
    j(() => this.networkLink).then(() => j(() => true === this.visible)).then(() => this.load());
  }
  load(e2) {
    var _a;
    if (!this.networkLink)
      return;
    if (this.networkLink.viewFormat)
      return;
    const r2 = null != e2 ? e2.signal : null, s = this._fetchService(((_a = this._get("networkLink")) == null ? void 0 : _a.href) ?? "", r2).then((e3) => {
      var _a2;
      const r3 = j3(e3.sublayers);
      this.fullExtent = M.fromJSON(r3), this.sourceJSON = e3;
      const s2 = d(V.ofType(j4), S(j4, e3));
      this.sublayers ? this.sublayers.addMany(s2) : this.sublayers = s2, (_a2 = this.layer) == null ? void 0 : _a2.emit("sublayer-update"), this.layer && this.layer.notifyChange("visibleSublayers");
    });
    return this.addResolvingPromise(s), Promise.resolve(this);
  }
  get visible() {
    return this._get("visible");
  }
  set visible(e2) {
    this._get("visible") !== e2 && (this._set("visible", e2), this.layer && this.layer.notifyChange("visibleSublayers"));
  }
  readVisible(e2, t2) {
    return !!t2.visibility;
  }
  _fetchService(e2, t2) {
    return g(e2, this.layer.outSpatialReference, this.layer.refreshInterval, t2).then((e3) => d2(e3.data));
  }
};
e([y()], S2.prototype, "description", void 0), e([y({ type: M })], S2.prototype, "fullExtent", void 0), e([y()], S2.prototype, "id", void 0), e([y({ readOnly: true, value: null })], S2.prototype, "networkLink", void 0), e([y({ json: { write: { allowNull: true } } })], S2.prototype, "parent", void 0), e([y({ type: V.ofType(j4), json: { write: { allowNull: true } } })], S2.prototype, "sublayers", void 0), e([y({ value: null, json: { read: { source: "name", reader: (e2) => u(e2) } } })], S2.prototype, "title", void 0), e([y({ value: true })], S2.prototype, "visible", null), e([o("visible", ["visibility"])], S2.prototype, "readVisible", null), e([y()], S2.prototype, "sourceJSON", void 0), e([y()], S2.prototype, "layer", void 0), S2 = j4 = e([a("esri.layers.support.KMLSublayer")], S2);
var k = S2;

// node_modules/@arcgis/core/layers/KMLLayer.js
var w = ["kml", "xml"];
var F = class extends a3(p(t(c(j2(O(b)))))) {
  constructor(...e2) {
    super(...e2), this._visibleFolders = [], this.allSublayers = new n2({ getCollections: () => [this.sublayers], getChildrenFunction: (e3) => e3.sublayers }), this.outSpatialReference = f2.WGS84, this.path = null, this.legendEnabled = false, this.operationalLayerType = "KML", this.sublayers = null, this.type = "kml", this.url = null;
  }
  initialize() {
    this.addHandles([l(() => this.sublayers, (e2, r2) => {
      r2 && r2.forEach((e3) => {
        e3.parent = null, e3.layer = null;
      }), e2 && e2.forEach((e3) => {
        e3.parent = this, e3.layer = this;
      });
    }, U), this.on("sublayer-update", () => this.notifyChange("fullExtent"))]);
  }
  normalizeCtorArgs(e2, r2) {
    return "string" == typeof e2 ? { url: e2, ...r2 } : e2;
  }
  readSublayersFromItemOrWebMap(e2, r2) {
    this._visibleFolders = r2.visibleFolders;
  }
  readSublayers(e2, r2, t2) {
    return S(k, r2, t2, this._visibleFolders);
  }
  writeSublayers(e2, r2) {
    const t2 = [], o2 = e2.toArray();
    for (; o2.length; ) {
      const e3 = o2[0];
      e3.networkLink || (e3.visible && t2.push(e3.id), e3.sublayers && o2.push(...e3.sublayers.toArray())), o2.shift();
    }
    r2.visibleFolders = t2;
  }
  get title() {
    const e2 = this._get("title");
    return e2 && "defaults" !== this.originOf("title") ? e2 : this.url ? Ct(this.url, w) || "KML" : e2 || "";
  }
  set title(e2) {
    this._set("title", e2);
  }
  get visibleSublayers() {
    const e2 = this.sublayers, r2 = [], t2 = (e3) => {
      e3.visible && (r2.push(e3), e3.sublayers && e3.sublayers.forEach(t2));
    };
    return e2 && e2.forEach(t2), r2;
  }
  get fullExtent() {
    return this._recomputeFullExtent();
  }
  load(e2) {
    const r2 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["KML"], supportsData: false }, e2).catch(f).then(() => this._fetchService(r2))), Promise.resolve(this);
  }
  destroy() {
    super.destroy(), this.allSublayers.destroy();
  }
  async _fetchService(e2) {
    const r2 = await Promise.resolve().then(() => this.resourceInfo ? { ssl: false, data: this.resourceInfo } : g(this.url ?? "", this.outSpatialReference, this.refreshInterval, e2)), t2 = d2(r2.data);
    t2 && this.read(t2, { origin: "service" });
  }
  _recomputeFullExtent() {
    let e2 = null;
    null != this.extent && (e2 = this.extent.clone());
    const r2 = (t2) => {
      if (t2.sublayers)
        for (const o2 of t2.sublayers.items)
          r2(o2), o2.visible && o2.fullExtent && (null != e2 ? e2.union(o2.fullExtent) : e2 = o2.fullExtent.clone());
    };
    return r2(this), e2;
  }
};
e([y({ readOnly: true })], F.prototype, "allSublayers", void 0), e([y({ type: f2 })], F.prototype, "outSpatialReference", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], F.prototype, "path", void 0), e([y({ readOnly: true, json: { read: false, write: false } })], F.prototype, "legendEnabled", void 0), e([y({ type: ["show", "hide", "hide-children"] })], F.prototype, "listMode", void 0), e([y({ type: ["KML"] })], F.prototype, "operationalLayerType", void 0), e([y({})], F.prototype, "resourceInfo", void 0), e([y({ type: V.ofType(k), json: { write: { ignoreOrigin: true } } })], F.prototype, "sublayers", void 0), e([o(["web-map", "portal-item"], "sublayers", ["visibleFolders"])], F.prototype, "readSublayersFromItemOrWebMap", null), e([o("service", "sublayers", ["sublayers"])], F.prototype, "readSublayers", null), e([r("sublayers")], F.prototype, "writeSublayers", null), e([y({ readOnly: true, json: { read: false } })], F.prototype, "type", void 0), e([y({ json: { origins: { "web-map": { read: { source: "title" } } }, write: { ignoreOrigin: true } } })], F.prototype, "title", null), e([y(f3)], F.prototype, "url", void 0), e([y({ readOnly: true })], F.prototype, "visibleSublayers", null), e([y({ type: M })], F.prototype, "extent", void 0), e([y()], F.prototype, "fullExtent", null), F = e([a("esri.layers.KMLLayer")], F);
var O2 = F;
export {
  O2 as default
};
//# sourceMappingURL=KMLLayer-MBWGGZBD.js.map
