import {
  e as e3,
  t as t2
} from "./chunk-NFZSVYSS.js";
import {
  t
} from "./chunk-VMJMEDMM.js";
import "./chunk-D62N45BQ.js";
import {
  W,
  e2,
  n2 as n
} from "./chunk-TIFFFJ54.js";
import {
  n2
} from "./chunk-IIBIWLRQ.js";
import "./chunk-JQ4S2D3Z.js";
import "./chunk-UUFM7UDX.js";
import "./chunk-5EXFDBQJ.js";
import "./chunk-OHLUZSH7.js";
import "./chunk-QV5AXXWQ.js";
import "./chunk-CL7UAIKB.js";
import {
  P,
  a as a2,
  f
} from "./chunk-F3SBJW2O.js";
import "./chunk-YVCC2Z32.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-YC3PYTAZ.js";
import "./chunk-46JSCFRH.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-VPF2CM6B.js";
import "./chunk-JCWF5RB4.js";
import {
  m,
  y
} from "./chunk-TBBTJ7N4.js";
import "./chunk-NUI5LCQ5.js";
import {
  a2 as a
} from "./chunk-AS7ITRBV.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SF7FIURP.js";
import "./chunk-K7YQIZQM.js";
import "./chunk-H3ETM4DZ.js";
import "./chunk-TXAS6RAG.js";
import "./chunk-G72U56FP.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-JGYHKABU.js";
import "./chunk-3FXB2ZFK.js";
import "./chunk-WQNVH5M4.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/widgets/Expand/ExpandViewModel.js
var r = class extends m {
  constructor(e4) {
    super(e4), this._viewpointHandle = null, this.group = null;
  }
  initialize() {
    this.addHandles(a2(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ui;
    }, "expand", (e4) => {
      const { target: t3 } = e4;
      t3 && t3 !== this && t3.expanded && t3.group && t3.group === this.group && this._collapse();
    }));
  }
  destroy() {
    this.removeAllHandles(), this._viewpointHandle = null, this.view = null;
  }
  set autoCollapse(e4) {
    this._set("autoCollapse", e4), this._watchViewpoint();
  }
  set expanded(e4) {
    const t3 = !!e4;
    this._set("expanded", t3);
    const i = this.get("view.ui");
    i && i.emit("expand", { target: this }), this._viewpointHandleChange(t3);
  }
  get state() {
    return this.get("view.ready") ? "ready" : "disabled";
  }
  set view(e4) {
    this._get("view") !== e4 && (this._set("view", e4), e4 && f(() => e4.ready, () => {
      this.view === e4 && this._watchViewpoint();
    }, { once: true, initial: true }));
  }
  _viewpointHandleChange(e4) {
    this._viewpointHandle && (e4 ? f(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.stationary;
    }, () => {
      var _a;
      return (_a = this._viewpointHandle) == null ? void 0 : _a.resume();
    }, { once: true, initial: true }) : this._viewpointHandle.pause());
  }
  _watchViewpoint() {
    const e4 = "viewpoint";
    this.removeHandles(e4), this._viewpointHandle = null;
    const { autoCollapse: t3, view: i } = this;
    if (!i || !t3)
      return;
    const s = P(() => "3d" === i.type ? i.camera : i.viewpoint, () => this._collapse());
    this.addHandles(s, e4), this._viewpointHandle = s;
  }
  _collapse() {
    this.expanded = false;
  }
};
e([y({ value: false })], r.prototype, "autoCollapse", null), e([y({ value: false })], r.prototype, "expanded", null), e([y()], r.prototype, "group", void 0), e([y({ readOnly: true })], r.prototype, "state", null), e([y({ value: null })], r.prototype, "view", null), r = e([a("esri.widgets.Expand.ExpandViewModel")], r);
var p = r;

// node_modules/@arcgis/core/widgets/Expand.js
var c = "esri-expand";
var u = { base: `${c} esri-widget`, modeAuto: `${c}--auto`, modeDrawer: `${c}--drawer`, modeFloating: `${c}--floating`, container: `${c}__container`, containerExpanded: `${c}__container--expanded`, panel: `${c}__panel`, button: "esri-widget--button", text: "esri-icon-font-fallback-text", icon: "esri-collapse__icon", iconExpanded: `${c}__icon--expanded`, iconNumber: `${c}__icon-number`, iconNumberExpanded: `${c}__icon-number--expanded`, expandIcon: "esri-icon-expand", collapseIcon: "esri-icon-collapse", content: `${c}__content`, contentExpanded: `${c}__content--expanded`, expandMask: `${c}__mask`, expandMaskExpanded: `${c}__mask--expanded` };
var h = class extends W {
  constructor(e4, t3) {
    super(e4, t3), this.closeOnEsc = true, this.collapseIcon = null, this.collapseTooltip = "", this.content = "", this.expandTooltip = "", this.iconClass = null, this.icon = null, this.iconNumber = 0, this.messages = null, this.messagesCommon = null, this.mode = "auto", this.viewModel = new p(), this._handleKeyDown = (e5) => {
      const { closeOnEsc: t4, _toggleButtonEl: o, expanded: n3 } = this;
      if (!n3 || !t4 || e5.target === o || "Escape" !== e5.key)
        return;
      ("function" == typeof t4 ? t4(e5) : t4) && (this.expanded = false, o == null ? void 0 : o.focus());
    };
  }
  loadDependencies() {
    return n({ icon: () => import("./calcite-icon-N7AJD3TR.js") });
  }
  get contentId() {
    return `${this.id}_controls_content`;
  }
  get expandTitle() {
    const { expanded: e4, messagesCommon: t3, collapseTooltip: o, expandTooltip: n3 } = this;
    return (e4 ? o || (t3 == null ? void 0 : t3.collapse) : n3 || (t3 == null ? void 0 : t3.expand)) ?? "";
  }
  get autoCollapse() {
    return this.viewModel.autoCollapse;
  }
  set autoCollapse(e4) {
    this.viewModel.autoCollapse = e4;
  }
  get collapseIconClass() {
    return u.collapseIcon;
  }
  set collapseIconClass(e4) {
    this._overrideIfSome("collapseIconClass", e4);
  }
  get expanded() {
    return this.viewModel.expanded;
  }
  set expanded(e4) {
    this.viewModel.expanded = e4;
  }
  get expandIconClass() {
    return e3(this.content) ? this.content.iconClass : u.expandIcon;
  }
  set expandIconClass(e4) {
    this._overrideIfSome("expandIconClass", e4);
  }
  get expandIcon() {
    return e3(this.content) ? this.content.icon : void 0;
  }
  set expandIcon(e4) {
    this._overrideIfSome("expandIcon", e4);
  }
  get group() {
    return this.viewModel.group;
  }
  set group(e4) {
    this.viewModel.group = e4;
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e4) {
    this._overrideIfSome("label", e4);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e4) {
    this.viewModel.view = e4;
  }
  expand() {
    this.viewModel.expanded = true;
  }
  collapse() {
    this.viewModel.expanded = false;
  }
  toggle() {
    this.viewModel.expanded = !this.viewModel.expanded;
  }
  render() {
    const { mode: e4 } = this, t3 = { [u.modeAuto]: "auto" === e4, [u.modeDrawer]: "drawer" === e4, [u.modeFloating]: "floating" === e4 };
    return n2("div", { class: this.classes(u.base, t3), onkeydown: this._handleKeyDown }, this._renderMask(), this._renderContainer());
  }
  _renderContainer() {
    const { expanded: e4 } = this, t3 = { [u.containerExpanded]: e4 };
    return n2("div", { class: this.classes(u.container, t3) }, this._renderPanel(), this._renderContent());
  }
  _renderMask() {
    const { expanded: e4 } = this, t3 = { [u.expandMaskExpanded]: e4 };
    return n2("div", { bind: this, onclick: this._toggle, class: this.classes(u.expandMask, t3) });
  }
  _renderBadgeNumber() {
    const { expanded: e4, iconNumber: t3 } = this;
    return t3 && !e4 ? n2("span", { key: "expand__icon-number", class: u.iconNumber }, t3) : null;
  }
  _renderPanelNumber() {
    const { iconNumber: e4, expanded: t3 } = this;
    return e4 && t3 ? n2("span", { key: "expand__expand-icon-number", class: this.classes(u.iconNumber, u.iconNumberExpanded) }, e4) : null;
  }
  _renderIcon() {
    const e4 = (this.expanded ? this.collapseIcon : this.expandIcon) ?? "";
    return n2("calcite-icon", { key: "icon", icon: e4, scale: "s" });
  }
  _renderLegacyIcon() {
    const { collapseIconClass: e4, expandIconClass: t3, expanded: o } = this, n3 = { [u.iconExpanded]: o };
    return null != t3 && (n3[t3] = !o), null != e4 && (n3[e4] = e4 === t3 || o), n2("span", { key: "legacy-icon", "aria-hidden": "true", class: this.classes(u.icon, n3) });
  }
  _renderTitle() {
    return n2("span", { class: u.text }, this.expandTitle);
  }
  _renderExpandButton() {
    const { expanded: e4, expandTitle: t3, expandIcon: o, collapseIcon: n3, contentId: s } = this;
    return n2("div", { afterCreate: this._storeToggleButtonEl, "aria-controls": s, "aria-expanded": e4 ? "true" : "false", bind: this, class: u.button, onclick: this._toggle, onkeydown: this._toggle, role: "button", tabindex: "0", title: t3 }, this._renderBadgeNumber(), !e4 && null != o || e4 && null != n3 ? this._renderIcon() : this._renderLegacyIcon(), this._renderTitle());
  }
  _renderPanel() {
    return n2("div", { class: u.panel }, this._renderExpandButton(), this._renderPanelNumber());
  }
  _renderContent() {
    const { expanded: e4, contentId: t3, content: o } = this, n3 = { [u.contentExpanded]: e4 }, s = { id: t3, role: "region", class: this.classes(u.content, n3) };
    return "string" == typeof o ? n2("div", { key: "content__string", innerHTML: o, ...s }) : e3(o) ? n2("div", { key: "content__widget", ...s }, o.render()) : o instanceof HTMLElement ? n2("div", { key: "content__html-element", bind: o, afterCreate: this._attachToNode, ...s }) : t2(o) ? n2("div", { key: "content__node", bind: o.domNode, afterCreate: this._attachToNode, ...s }) : null;
  }
  _toggle() {
    this.toggle();
  }
  _attachToNode(e4) {
    const t3 = this;
    e4.appendChild(t3);
  }
  _storeToggleButtonEl(e4) {
    this._toggleButtonEl = e4;
  }
};
e([y({ readOnly: true })], h.prototype, "contentId", null), e([y({ readOnly: true })], h.prototype, "expandTitle", null), e([y()], h.prototype, "autoCollapse", null), e([y()], h.prototype, "closeOnEsc", void 0), e([y()], h.prototype, "collapseIconClass", null), e([y()], h.prototype, "collapseIcon", void 0), e([y()], h.prototype, "collapseTooltip", void 0), e([y()], h.prototype, "content", void 0), e([y()], h.prototype, "expanded", null), e([y()], h.prototype, "expandIconClass", null), e([y()], h.prototype, "expandIcon", null), e([y()], h.prototype, "expandTooltip", void 0), e([y()], h.prototype, "group", null), e([y()], h.prototype, "iconClass", void 0), e([y()], h.prototype, "icon", void 0), e([y()], h.prototype, "iconNumber", void 0), e([y()], h.prototype, "label", null), e([y(), e2("esri/widgets/Expand/t9n/Expand")], h.prototype, "messages", void 0), e([y(), e2("esri/t9n/common")], h.prototype, "messagesCommon", void 0), e([y()], h.prototype, "mode", void 0), e([y()], h.prototype, "view", null), e([y({ type: p })], h.prototype, "viewModel", void 0), e([t()], h.prototype, "_toggle", null), h = e([a("esri.widgets.Expand")], h);
var x = h;
export {
  x as default
};
//# sourceMappingURL=@arcgis_core_widgets_Expand.js.map
