import {
  p
} from "./chunk-5NZWHNTA.js";
import {
  f,
  i,
  s as s2
} from "./chunk-VY2MIGMV.js";
import "./chunk-JLE6P4DW.js";
import "./chunk-TBBTJ7N4.js";
import "./chunk-NUI5LCQ5.js";
import "./chunk-AS7ITRBV.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-SF7FIURP.js";
import {
  j
} from "./chunk-K7YQIZQM.js";
import "./chunk-H3ETM4DZ.js";
import "./chunk-TXAS6RAG.js";
import "./chunk-G72U56FP.js";
import "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-JGYHKABU.js";
import "./chunk-3FXB2ZFK.js";
import "./chunk-WQNVH5M4.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/rest/networks/validateNetworkTopology.js
async function a(o, a2, n2) {
  var _a;
  const d = f(o), l = a2.toJSON();
  a2.validationSet && (l.validationSet = JSON.stringify(a2.validationSet));
  const u = { ...l, returnEdits: true, f: "json" }, p2 = s2({ ...d.query, ...u }), m = i(p2, { ...n2, method: "post" }), v = `${d.path}/validateNetworkTopology`, { data: y } = await j(v, m), c = p.fromJSON(y);
  return c.serviceEdits = ((_a = c.serviceEdits) == null ? void 0 : _a.map((t) => ({ layerId: t.id, editedFeatures: t.editedFeatures }))) ?? [], c;
}
async function n(s3, a2, n2) {
  if (!a2.gdbVersion)
    throw new s("submit-validate-network-topology-job:missing-gdb-version", "version is missing");
  const d = f(s3), l = a2.toJSON();
  a2.validationSet && (l.validationSet = JSON.stringify(a2.validationSet));
  const u = i(d.query, { query: s2({ ...l, returnEdits: true, async: true, f: "json" }), ...n2, method: "post" }), p2 = `${d.path}/validateNetworkTopology`, { data: m } = await j(p2, u);
  return m ? m.statusUrl : null;
}
export {
  n as submitValidateNetworkTopologyJob,
  a as validateNetworkTopology
};
//# sourceMappingURL=validateNetworkTopology-6MOKPL6S.js.map
