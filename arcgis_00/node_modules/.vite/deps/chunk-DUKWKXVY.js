import {
  m
} from "./chunk-WDNVMLWG.js";
import {
  _
} from "./chunk-JZBA2N4X.js";
import {
  n
} from "./chunk-5EXFDBQJ.js";
import {
  j,
  s as s2
} from "./chunk-G72U56FP.js";
import {
  s3 as s
} from "./chunk-JGYHKABU.js";

// node_modules/@arcgis/core/webdoc/support/saveUtils.js
async function p(r, p2, u) {
  if (!p2 || !p2.resources)
    return;
  const h = p2.portalItem === r.portalItem ? new Set(r.paths) : /* @__PURE__ */ new Set();
  r.paths.length = 0, r.portalItem = p2.portalItem;
  const i = new Set(p2.resources.toKeep.map((r2) => r2.resource.path)), m2 = /* @__PURE__ */ new Set(), f = [];
  i.forEach((e) => {
    h.delete(e), r.paths.push(e);
  });
  for (const e of p2.resources.toUpdate)
    if (h.delete(e.resource.path), i.has(e.resource.path) || m2.has(e.resource.path)) {
      const { resource: o, content: t, finish: p3, error: n3 } = e, h2 = m(o, n());
      r.paths.push(h2.path), f.push(a({ resource: h2, content: t, compress: e.compress, finish: p3, error: n3 }, u));
    } else
      r.paths.push(e.resource.path), f.push(n2(e, u)), m2.add(e.resource.path);
  for (const e of p2.resources.toAdd)
    f.push(a(e, u)), r.paths.push(e.resource.path);
  if (h.forEach((r2) => {
    if (p2.portalItem) {
      const e = p2.portalItem.resourceFromPath(r2);
      f.push(e.portalItem.removeResource(e).catch(() => {
      }));
    }
  }), 0 === f.length)
    return;
  const l = await j(f);
  s2(u);
  const d = l.filter((r2) => "error" in r2).map((r2) => r2.error);
  if (d.length > 0)
    throw new s("save:resources", "Failed to save one or more resources", { errors: d });
}
async function a(e, o) {
  var _a, _b;
  const t = { ...null != o ? o : {}, compress: e.compress }, s3 = await _(e.resource.portalItem.addResource(e.resource, e.content, t));
  if (true !== s3.ok)
    throw (_a = e.error) == null ? void 0 : _a.call(e, s3.error), s3.error;
  (_b = e.finish) == null ? void 0 : _b.call(e, e.resource);
}
async function n2(e, o) {
  var _a, _b;
  const t = await _(e.resource.update(e.content, o));
  if (true !== t.ok)
    throw (_a = e.error) == null ? void 0 : _a.call(e, t.error), t.error;
  (_b = e.finish) == null ? void 0 : _b.call(e, e.resource);
}

export {
  p
};
//# sourceMappingURL=chunk-DUKWKXVY.js.map
