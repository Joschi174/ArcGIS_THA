import {
  n,
  t
} from "./chunk-RMYEPM4Q.js";
import "./chunk-2SHTPLUT.js";
import {
  a as a2
} from "./chunk-JGSTWD77.js";
import "./chunk-XR3IIQGY.js";
import {
  d as d2,
  f
} from "./chunk-5DXEWH5V.js";
import "./chunk-V44KDLLP.js";
import "./chunk-Z46XWZWE.js";
import "./chunk-UFN7ZNFK.js";
import "./chunk-K54BRHUJ.js";
import "./chunk-YICPXMG7.js";
import "./chunk-VGWIRN5T.js";
import "./chunk-R3N6YXZV.js";
import "./chunk-O3TVUDAA.js";
import "./chunk-Q2D4AWJS.js";
import "./chunk-IOMDA26A.js";
import "./chunk-D7PFANSX.js";
import "./chunk-C6XOMDEV.js";
import "./chunk-BCTQLMHE.js";
import "./chunk-Z3XU4R74.js";
import "./chunk-INNSNI53.js";
import "./chunk-IL355RAY.js";
import "./chunk-3V3OLLRL.js";
import "./chunk-WD44CU6B.js";
import "./chunk-HXF46NPP.js";
import "./chunk-WD6NUK3A.js";
import "./chunk-GZLGPJT5.js";
import "./chunk-XBCX74QQ.js";
import "./chunk-NUGAWFAM.js";
import "./chunk-KBZKT5PQ.js";
import "./chunk-T2F2N6HP.js";
import "./chunk-SBPJCNL2.js";
import "./chunk-TEW7IDMC.js";
import "./chunk-OSAR3X5M.js";
import "./chunk-LE46LW35.js";
import "./chunk-DESQE75S.js";
import {
  r
} from "./chunk-77MJECFF.js";
import {
  y as y2
} from "./chunk-CTZ7DCY5.js";
import "./chunk-KE5B3PMZ.js";
import {
  h
} from "./chunk-2QUCKFNX.js";
import "./chunk-L2VQ7IPJ.js";
import "./chunk-K7U6HDB6.js";
import {
  e as e2
} from "./chunk-64B6H5RV.js";
import "./chunk-3ECTZ67D.js";
import "./chunk-WHFPT3MI.js";
import "./chunk-Z7ID6LQT.js";
import "./chunk-HP3XVAWO.js";
import "./chunk-DSRRGXQP.js";
import "./chunk-7XK4IPKN.js";
import "./chunk-3S6PFVBD.js";
import "./chunk-HXG3EAGH.js";
import "./chunk-KZ7KT6JL.js";
import "./chunk-V65JFJHR.js";
import "./chunk-7APSGFF5.js";
import "./chunk-3HEHFNVB.js";
import "./chunk-Z3LDBFKX.js";
import "./chunk-Y4FK2QML.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import "./chunk-7KNADJUA.js";
import {
  S2 as S
} from "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import {
  l
} from "./chunk-FQMVGWVJ.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import {
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2 as a
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import {
  d
} from "./chunk-4HAMAX2C.js";
import "./chunk-3QT5L2OK.js";
import {
  s2 as s
} from "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/WMTSLayerView2D.js
var d3 = [102113, 102100, 3857, 3785, 900913];
var _ = [0, 0];
var w = class extends a2(t(f(d2))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this._tileRequests = /* @__PURE__ */ new Map(), this.layer = null;
  }
  get tileMatrixSet() {
    const e3 = this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);
    return e3 ? (e3.id !== this.layer.activeLayer.tileMatrixSetId && (this.layer.activeLayer.tileMatrixSetId = e3.id), e3) : null;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume();
  }
  attach() {
    var _a;
    const e3 = (_a = this.tileMatrixSet) == null ? void 0 : _a.tileInfo;
    e3 && (this._tileInfoView = new h(e3), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: 16, process: (e4, t2) => this.fetchTile(e4, t2) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: true, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), this.addAttachHandles(l(() => {
      var _a2, _b;
      return [(_b = (_a2 = this.layer) == null ? void 0 : _a2.activeLayer) == null ? void 0 : _b.styleId, this.tileMatrixSet];
    }, () => this._refresh())), super.attach());
  }
  detach() {
    var _a, _b;
    super.detach(), (_a = this._tileStrategy) == null ? void 0 : _a.destroy(), (_b = this._fetchQueue) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  acquireTile(e3) {
    const t2 = this._bitmapView.createTile(e3), i = t2.bitmap;
    return [i.x, i.y] = this._tileInfoView.getTileCoords(_, t2.key), i.resolution = this._tileInfoView.getTileResolution(t2.key), [i.width, i.height] = this._tileInfoView.tileInfo.size, this._enqueueTileFetch(t2), this._bitmapView.addChild(t2), this.requestUpdate(), t2;
  }
  async doRefresh() {
    !this.attached || this.updateRequested || this.suspended || this._refresh();
  }
  isUpdating() {
    var _a;
    return ((_a = this._fetchQueue) == null ? void 0 : _a.updating) ?? false;
  }
  async fetchTile(e3, t2 = {}) {
    const s2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r2, resamplingLevel: a3 = 0 } = t2;
    if (!s2)
      return this._fetchImage(e3, r2);
    const l2 = new e2(0, 0, 0, 0);
    let o;
    try {
      await s2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l2, { signal: r2 }), o = await this._fetchImage(l2, r2);
    } catch (h2) {
      if (d(h2))
        throw h2;
      if (a3 < 3) {
        const i = this._tileInfoView.getTileParentId(e3.id);
        if (i) {
          const s3 = new e2(i), r3 = await this.fetchTile(s3, { ...t2, resamplingLevel: a3 + 1 });
          return n(this._tileInfoView, r3, s3, e3);
        }
      }
      throw h2;
    }
    return n(this._tileInfoView, o, l2, e3);
  }
  canResume() {
    const e3 = super.canResume();
    return e3 ? null !== this.tileMatrixSet : e3;
  }
  supportsSpatialReference(e3) {
    var _a;
    return ((_a = this.layer.activeLayer.tileMatrixSets) == null ? void 0 : _a.some((t2) => {
      var _a2;
      return S((_a2 = t2.tileInfo) == null ? void 0 : _a2.spatialReference, e3);
    })) ?? false;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t2 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t2, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (s2) {
        d(s2) || s.getLogger(this).error(s2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t2) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: t2 });
  }
  _refresh() {
    this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => {
      if (!e3.bitmap.source)
        return;
      const t2 = { id: e3.key.id, fulfilled: false, promise: this._fetchQueue.push(e3.key).then((t3) => {
        e3.bitmap.source = t3;
      }).catch((t3) => {
        d(t3) || (e3.bitmap.source = null);
      }).finally(() => {
        e3.requestRender(), t2.fulfilled = true;
      }) };
      this._tileRequests.set(e3, t2);
    });
  }
  _getTileMatrixSetBySpatialReference(e3) {
    const t2 = this.view.spatialReference;
    if (!e3.tileMatrixSets)
      return null;
    let i = e3.tileMatrixSets.find((e4) => {
      var _a;
      return S((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference, t2);
    });
    return !i && t2.isWebMercator && (i = e3.tileMatrixSets.find((e4) => {
      var _a;
      return d3.includes(((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference.wkid) ?? -1);
    })), i;
  }
};
e([y()], w.prototype, "_fetchQueue", void 0), e([y({ readOnly: true })], w.prototype, "tileMatrixSet", null), w = e([a("esri.views.2d.layers.WMTSLayerView2D")], w);
var g = w;
export {
  g as default
};
//# sourceMappingURL=WMTSLayerView2D-AGO6LU5K.js.map
