import {
  d,
  f
} from "./chunk-GJ4AX7TK.js";
import {
  i
} from "./chunk-VJGPQIUO.js";
import "./chunk-CX6ACZQ7.js";
import {
  oe
} from "./chunk-DILKCB2X.js";
import "./chunk-EZOSZES7.js";
import "./chunk-5EHLOJ6Z.js";
import "./chunk-SS7JZLQV.js";
import "./chunk-6HXKIKIT.js";
import "./chunk-XQSFOYTA.js";
import "./chunk-XGFXC7IN.js";
import "./chunk-2YLUDNP5.js";
import "./chunk-OW4XGQQP.js";
import {
  C,
  O,
  S2 as S,
  T,
  c,
  j2 as j,
  m
} from "./chunk-WMOLPQHS.js";
import "./chunk-5OU4ZQ43.js";
import "./chunk-MYZ743ND.js";
import "./chunk-4GVOVKVX.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-4O2QGREW.js";
import "./chunk-P662BGUZ.js";
import "./chunk-RNMDDDND.js";
import "./chunk-E7T34AFG.js";
import "./chunk-U3JB4DA4.js";
import "./chunk-VR7WK7TF.js";
import "./chunk-BQJY56X4.js";
import "./chunk-4XXKLC7H.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-K6D7DQGC.js";
import "./chunk-CN3PB7HS.js";
import "./chunk-SQZ7ON7Z.js";
import "./chunk-ZL3HOHNK.js";
import "./chunk-DSVPEX7K.js";
import "./chunk-PX3Q44FM.js";
import "./chunk-XYJMHUDA.js";
import "./chunk-CSLWFQJE.js";
import "./chunk-PR2OEILG.js";
import "./chunk-XP6ESZGI.js";
import "./chunk-JKPERUTC.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-BBJLFBMQ.js";
import "./chunk-AZ4FK2MA.js";
import "./chunk-EULDPA4O.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-TBHRKIAA.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-OARQV2FW.js";
import "./chunk-C4L2TGDU.js";
import "./chunk-325OL72R.js";
import "./chunk-EIIX6MK3.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-R6HT3QM2.js";
import "./chunk-QOWAKGE4.js";
import "./chunk-5CJTGLZW.js";
import "./chunk-SO7CVIZK.js";
import "./chunk-YAWND7HF.js";
import "./chunk-FJYIB7HF.js";
import "./chunk-3QLIFMET.js";
import "./chunk-UOQERNSF.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-GTOF2BJC.js";
import "./chunk-FQZ2JEHK.js";
import "./chunk-D4SJZ5KN.js";
import "./chunk-A7XI44IB.js";
import "./chunk-R7L5PZPI.js";
import "./chunk-QNFDBY7V.js";
import "./chunk-EL72ISXP.js";
import "./chunk-5KLICR5E.js";
import "./chunk-CKSC27NP.js";
import "./chunk-OVFWVPXL.js";
import "./chunk-WNYS35QN.js";
import "./chunk-VFUAVCAY.js";
import "./chunk-VZAEQ6CY.js";
import "./chunk-SS33L3LC.js";
import "./chunk-X4Y5OF5X.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-6ALTXU4U.js";
import "./chunk-UIMMV4OY.js";
import "./chunk-QZ4HHFPF.js";
import "./chunk-7L7U6YJ3.js";
import "./chunk-YGH3EEG5.js";
import "./chunk-H7EOZY7L.js";
import "./chunk-LKYCF7AI.js";
import "./chunk-DDZ6WPWX.js";
import "./chunk-FHYNSVC4.js";
import "./chunk-4HDCOJ24.js";
import "./chunk-VY2MIGMV.js";
import "./chunk-R5EWWIOD.js";
import "./chunk-52L3OT7H.js";
import "./chunk-BA7WNJMF.js";
import "./chunk-ZZQVVHF7.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import "./chunk-HVBIBP5P.js";
import "./chunk-JGFWZDK3.js";
import "./chunk-U4IWFNWD.js";
import "./chunk-6L4U2AW6.js";
import "./chunk-RFIIU6XF.js";
import "./chunk-DGADM4KQ.js";
import "./chunk-4CZO65BK.js";
import "./chunk-7C7EF3FD.js";
import "./chunk-PQOGMOZ7.js";
import "./chunk-XMS7FYO7.js";
import "./chunk-HOGRNOD4.js";
import "./chunk-NZY6MEON.js";
import {
  n
} from "./chunk-CSKEV5FZ.js";
import "./chunk-Z74XNIJ3.js";
import "./chunk-GRS3EHGG.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-TNYMHVJ4.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-Z6HMRH7V.js";
import "./chunk-HABV4VZ2.js";
import "./chunk-2D2437VM.js";
import "./chunk-YIIAB4WA.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-FUHI6TR6.js";
import "./chunk-BRRN7CRU.js";
import "./chunk-TLIPFBCN.js";
import "./chunk-7KTXAH5E.js";
import "./chunk-WYE6B4VU.js";
import "./chunk-X5ASTC4J.js";
import "./chunk-3OL5L3LC.js";
import {
  V
} from "./chunk-RNYFZDNI.js";
import "./chunk-FBG4WSP5.js";
import "./chunk-G3X4SV7G.js";
import "./chunk-AJM6LB5B.js";
import "./chunk-G4LADD2B.js";
import "./chunk-HLTEFNTE.js";
import "./chunk-CO3TM5QL.js";
import "./chunk-FARQZCLL.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-E5XSQEGK.js";
import "./chunk-MZXYP6SL.js";
import "./chunk-4X5MDDUC.js";
import "./chunk-UURR7HU3.js";
import "./chunk-JLE6P4DW.js";
import "./chunk-CL7UAIKB.js";
import {
  h,
  l
} from "./chunk-F3SBJW2O.js";
import "./chunk-YVCC2Z32.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-YC3PYTAZ.js";
import "./chunk-46JSCFRH.js";
import "./chunk-JZM5YUHA.js";
import "./chunk-VPF2CM6B.js";
import "./chunk-JCWF5RB4.js";
import {
  y
} from "./chunk-TBBTJ7N4.js";
import "./chunk-NUI5LCQ5.js";
import {
  a2 as a
} from "./chunk-AS7ITRBV.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SF7FIURP.js";
import "./chunk-K7YQIZQM.js";
import "./chunk-H3ETM4DZ.js";
import "./chunk-TXAS6RAG.js";
import "./chunk-G72U56FP.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-JGYHKABU.js";
import "./chunk-3FXB2ZFK.js";
import {
  R
} from "./chunk-WQNVH5M4.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var y2 = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var k = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var v = { graphic: null, property: null, oldValue: null, newValue: null };
function M(t) {
  return t instanceof m || t instanceof c || t instanceof C || t instanceof T || t instanceof j || t instanceof S || t instanceof O;
}
function V2(t) {
  return V.isCollection(t) && t.length && M(t.at(0));
}
function j2(t) {
  return Array.isArray(t) && t.length > 0 && M(t[0]);
}
var G = class extends f(d) {
  constructor() {
    super(...arguments), this._graphics = new V(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map();
  }
  get _routeItems() {
    return new n({ getCollections: () => null == this.layer || this.destroyed ? [] : [null != this.layer.routeInfo ? new V([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] });
  }
  initialize() {
    this.updatingHandles.addOnCollectionChange(() => this._routeItems, (t) => this._routeItemsChanged(t), h);
  }
  destroy() {
    var _a;
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), (_a = this._get("_routeItems")) == null ? void 0 : _a.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView();
  }
  async fetchPopupFeatures(t) {
    return this._graphicsView.hitTest(t).filter((t2) => !!t2.popupTemplate);
  }
  highlight(t) {
    let r;
    r = M(t) ? [this._getNetworkFeatureUid(t)] : j2(t) ? t.map((t2) => this._getNetworkFeatureUid(t2)) : V2(t) ? t.map((t2) => this._getNetworkFeatureUid(t2)).toArray() : [t.uid];
    const i2 = r.filter(R);
    return i2.length ? (this._addHighlight(i2), { remove: () => this._removeHighlight(i2) }) : y2;
  }
  async hitTest(t, r) {
    if (this.suspended)
      return null;
    const i2 = this._graphicsView.hitTest(t).filter(R).map((t2) => this._networkGraphicMap.get(t2));
    if (!i2.length)
      return null;
    const { layer: s } = this;
    return i2.reverse().map((e2) => ({ type: "route", layer: s, mapPoint: t, networkFeature: e2 }));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveStart() {
  }
  moveEnd() {
  }
  update(t) {
    this._graphicsView.processUpdate(t);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t) {
    for (const e2 of t)
      if (this._highlightIds.has(e2)) {
        const t2 = this._highlightIds.get(e2);
        this._highlightIds.set(e2, t2 + 1);
      } else
        this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _createGraphic(t) {
    const e2 = t.toGraphic();
    return e2.layer = this.layer, e2.sourceLayer = this.layer, e2;
  }
  _createGraphicsView() {
    const t = this.view, e2 = () => this.requestUpdate(), r = new i(t.featuresTilingScheme);
    this._graphicsView = new oe({ container: r, graphics: this._graphics, requestUpdateCallback: e2, view: t }), this.container.addChild(r), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t) {
    const e2 = this._networkGraphicMap.get(t);
    return k.indexOf(e2.type);
  }
  _getNetworkFeatureUid(t) {
    return this._networkFeatureMap.has(t) ? this._networkFeatureMap.get(t).uid : null;
  }
  _removeHighlight(t) {
    for (const e2 of t)
      if (this._highlightIds.has(e2)) {
        const t2 = this._highlightIds.get(e2) - 1;
        0 === t2 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, t2);
      }
    this._updateHighlight();
  }
  _routeItemsChanged(t) {
    if (t.removed.length) {
      this._graphics.removeMany(t.removed.map((t2) => {
        const e2 = this._networkFeatureMap.get(t2);
        return this._networkFeatureMap.delete(t2), this._networkGraphicMap.delete(e2), e2;
      }));
      for (const e2 of t.removed)
        this.removeHandles(e2);
    }
    if (t.added.length) {
      this._graphics.addMany(t.added.map((t2) => {
        const e2 = this._createGraphic(t2);
        return null == e2.symbol ? null : (this._networkFeatureMap.set(t2, e2), this._networkGraphicMap.set(e2, t2), e2);
      }).filter(R));
      for (const e2 of t.added)
        this.addHandles([l(() => e2.geometry, (t2, r) => {
          this._updateGraphic(e2, "geometry", t2, r);
        }), l(() => e2.symbol, (t2, r) => {
          this._updateGraphic(e2, "symbol", t2, r);
        })], e2);
      this._graphics.sort((t2, e2) => this._getDrawOrder(t2) - this._getDrawOrder(e2));
    }
  }
  _updateGraphic(t, e2, r, i2) {
    if (!this._networkFeatureMap.has(t)) {
      const e3 = this._createGraphic(t);
      return this._networkFeatureMap.set(t, e3), this._networkGraphicMap.set(e3, t), void this._graphics.add(e3);
    }
    const s = this._networkFeatureMap.get(t);
    s[e2] = r, v.graphic = s, v.property = e2, v.oldValue = i2, v.newValue = r, this._graphicsView.graphicUpdateHandler(v);
  }
  _updateHighlight() {
    const t = Array.from(this._highlightIds.keys());
    this._graphicsView.setHighlight(t);
  }
};
e([y()], G.prototype, "_graphics", void 0), e([y()], G.prototype, "_routeItems", null), G = e([a("esri.views.2d.layers.RouteLayerView2D")], G);
var I = G;
export {
  I as default
};
//# sourceMappingURL=RouteLayerView2D-ISFYZHVT.js.map
