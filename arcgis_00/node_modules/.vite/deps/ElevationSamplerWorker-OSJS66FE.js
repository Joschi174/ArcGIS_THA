import {
  T
} from "./chunk-EJFHVDPI.js";
import "./chunk-P7XUSZ33.js";
import "./chunk-5AH5IDTK.js";
import "./chunk-7ZHPCAJ3.js";
import "./chunk-GIISDD7O.js";
import "./chunk-2DDLBIQJ.js";
import "./chunk-EFWZWJ5X.js";
import "./chunk-4JI25WEU.js";
import "./chunk-MJUOK6OE.js";
import "./chunk-ARQKL4BE.js";
import {
  h
} from "./chunk-4XEDGKMA.js";
import "./chunk-WHFPT3MI.js";
import "./chunk-Z7ID6LQT.js";
import "./chunk-MHACI6VO.js";
import "./chunk-PDYDTTO6.js";
import "./chunk-V65JFJHR.js";
import "./chunk-Y2UHC2VM.js";
import "./chunk-7APSGFF5.js";
import "./chunk-S5RFXGTW.js";
import "./chunk-V2A2K5J6.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import "./chunk-7KNADJUA.js";
import "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import "./chunk-DNUHV7J4.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import "./chunk-DUGCD7YI.js";
import "./chunk-3CMERT4A.js";
import "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import "./chunk-QPWNDO2C.js";
import "./chunk-CA2PXGXL.js";
import "./chunk-RXTTOJU7.js";
import "./chunk-4HAMAX2C.js";
import "./chunk-3QT5L2OK.js";
import "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import {
  has
} from "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/ElevationSamplerWorker.js
var r = class {
  async createIndex(t, r2) {
    const n2 = new Array();
    if (!t.vertexAttributes || !t.vertexAttributes.position)
      return new h();
    const o = this._createMeshData(t), s = null != r2 ? await r2.invoke("createIndexThread", o, { transferList: n2 }) : this.createIndexThread(o).result;
    return this._createPooledRBush().fromJSON(s);
  }
  createIndexThread(e) {
    const t = new Float64Array(e.position), r2 = this._createPooledRBush();
    return e.components ? this._createIndexComponentsThread(r2, t, e.components.map((e2) => new Uint32Array(e2))) : this._createIndexAllThread(r2, t);
  }
  _createIndexAllThread(e, t) {
    const r2 = new Array(t.length / 9);
    let o = 0;
    for (let s = 0; s < t.length; s += 9)
      r2[o++] = n(t, s, s + 3, s + 6);
    return e.load(r2), { result: e.toJSON() };
  }
  _createIndexComponentsThread(e, t, r2) {
    let o = 0;
    for (const n2 of r2)
      o += n2.length / 3;
    const s = new Array(o);
    let a = 0;
    for (const i of r2)
      for (let e2 = 0; e2 < i.length; e2 += 3)
        s[a++] = n(t, 3 * i[e2], 3 * i[e2 + 1], 3 * i[e2 + 2]);
    return e.load(s), { result: e.toJSON() };
  }
  _createMeshData(e) {
    const r2 = (e.vertexSpace.isRelative ? T({ position: e.vertexAttributes.position, normal: null, tangent: null }, e.vertexSpace, e.transform, e.spatialReference).position : e.vertexAttributes.position).buffer;
    return !e.components || e.components.some((e2) => !e2.faces) ? { position: r2 } : { position: r2, components: e.components.map((e2) => e2.faces) };
  }
  _createPooledRBush() {
    return new h(9, has("esri-csp-restrictions") ? (e) => e : [".minX", ".minY", ".maxX", ".maxY"]);
  }
};
function n(e, t, r2, n2) {
  return { minX: Math.min(e[t], e[r2], e[n2]), maxX: Math.max(e[t], e[r2], e[n2]), minY: Math.min(e[t + 1], e[r2 + 1], e[n2 + 1]), maxY: Math.max(e[t + 1], e[r2 + 1], e[n2 + 1]), p0: [e[t], e[t + 1], e[t + 2]], p1: [e[r2], e[r2 + 1], e[r2 + 2]], p2: [e[n2], e[n2 + 1], e[n2 + 2]] };
}
export {
  r as default
};
//# sourceMappingURL=ElevationSamplerWorker-OSJS66FE.js.map
