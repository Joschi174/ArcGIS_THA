import {
  a as a3
} from "./chunk-KOHZ4EMT.js";
import {
  m
} from "./chunk-TIZ2K25L.js";
import {
  P,
  o
} from "./chunk-SHWF6MFW.js";
import {
  i as i2
} from "./chunk-76TOUYXH.js";
import "./chunk-ILVWSH67.js";
import "./chunk-PCVZF4IO.js";
import "./chunk-T7OVGBEA.js";
import {
  oe
} from "./chunk-IEB6YZNM.js";
import {
  T as T2,
  b as b2,
  w
} from "./chunk-XR3IIQGY.js";
import {
  d as d2,
  f as f3
} from "./chunk-5DXEWH5V.js";
import "./chunk-ND34FL2W.js";
import "./chunk-IL44YAUG.js";
import "./chunk-TUZCWAFI.js";
import "./chunk-V44KDLLP.js";
import "./chunk-Z46XWZWE.js";
import {
  n
} from "./chunk-UFN7ZNFK.js";
import "./chunk-K54BRHUJ.js";
import "./chunk-YICPXMG7.js";
import "./chunk-MKYYBX7M.js";
import {
  b,
  d,
  g
} from "./chunk-PJGMBODU.js";
import "./chunk-JXPQM63C.js";
import "./chunk-5MWD3MR6.js";
import "./chunk-35U6DRCK.js";
import "./chunk-NKMYWCA5.js";
import {
  x as x2
} from "./chunk-VGWIRN5T.js";
import {
  T,
  e2 as e3
} from "./chunk-R3N6YXZV.js";
import "./chunk-2ZFYBAEI.js";
import {
  $ as $2,
  C
} from "./chunk-FSWTAY7G.js";
import "./chunk-O3TVUDAA.js";
import "./chunk-Q2D4AWJS.js";
import "./chunk-46OTPSVO.js";
import "./chunk-2GLJOVSV.js";
import "./chunk-C454H62Q.js";
import "./chunk-B57TE7LC.js";
import "./chunk-SRNTZ5YK.js";
import "./chunk-CQ6LDXRQ.js";
import "./chunk-66V6VC6G.js";
import "./chunk-IOMDA26A.js";
import "./chunk-3Q24STUY.js";
import "./chunk-PORVB4YW.js";
import "./chunk-6W4QNETY.js";
import "./chunk-SKZVSZDU.js";
import "./chunk-2QRPHNFJ.js";
import "./chunk-RHYB7TAK.js";
import "./chunk-L3YUDCKP.js";
import "./chunk-INPPJTIQ.js";
import "./chunk-6VFZXUIR.js";
import "./chunk-D7PFANSX.js";
import "./chunk-C6XOMDEV.js";
import "./chunk-BCTQLMHE.js";
import "./chunk-Z3XU4R74.js";
import "./chunk-CP22CCY6.js";
import "./chunk-SGIIR6RJ.js";
import "./chunk-INNSNI53.js";
import "./chunk-5NQNQAAW.js";
import "./chunk-KEJOWWPH.js";
import "./chunk-Q5R4SEKK.js";
import "./chunk-IL355RAY.js";
import "./chunk-3V3OLLRL.js";
import "./chunk-WD44CU6B.js";
import "./chunk-HXF46NPP.js";
import {
  D,
  G,
  U,
  X
} from "./chunk-WD6NUK3A.js";
import "./chunk-TNVCH3GU.js";
import "./chunk-K5MRFCR6.js";
import "./chunk-UNQFOAUX.js";
import "./chunk-GZLGPJT5.js";
import "./chunk-XBCX74QQ.js";
import "./chunk-NUGAWFAM.js";
import "./chunk-KBZKT5PQ.js";
import "./chunk-SZSPKNXB.js";
import "./chunk-BSCE3YT4.js";
import "./chunk-OBYHRJUR.js";
import "./chunk-GSCSASPY.js";
import "./chunk-UBVDHOW4.js";
import "./chunk-BLWHZOWS.js";
import "./chunk-KACQFA4U.js";
import "./chunk-D7CFF2FH.js";
import "./chunk-S6UQK27H.js";
import "./chunk-XOPGXWER.js";
import "./chunk-T2F2N6HP.js";
import "./chunk-UUGV6AYJ.js";
import "./chunk-HSP4VKTO.js";
import "./chunk-COWNIHL5.js";
import "./chunk-OH72SRIK.js";
import "./chunk-HGK7QSHJ.js";
import "./chunk-FAXVWHOJ.js";
import "./chunk-4RXG3COO.js";
import "./chunk-IIHBYDIT.js";
import "./chunk-L45WQWKV.js";
import "./chunk-EWJFH5BC.js";
import "./chunk-5NTMYKFL.js";
import "./chunk-OYV6FNKL.js";
import "./chunk-HXLO7LC5.js";
import "./chunk-5YQM3GC2.js";
import "./chunk-SUKBNOSX.js";
import {
  f as f2
} from "./chunk-3YWKHS6T.js";
import "./chunk-TQ73QHGP.js";
import "./chunk-5EIAXFYU.js";
import "./chunk-SBPJCNL2.js";
import "./chunk-TEW7IDMC.js";
import "./chunk-OSAR3X5M.js";
import "./chunk-FT7S3AKB.js";
import {
  i
} from "./chunk-YM5E5RFM.js";
import "./chunk-LE46LW35.js";
import "./chunk-DESQE75S.js";
import "./chunk-HJXIZZJE.js";
import "./chunk-I3HK53BD.js";
import "./chunk-77MJECFF.js";
import "./chunk-CTZ7DCY5.js";
import "./chunk-QKOLWFRE.js";
import "./chunk-YM5PYJO5.js";
import "./chunk-KE5B3PMZ.js";
import "./chunk-2QUCKFNX.js";
import "./chunk-L2VQ7IPJ.js";
import "./chunk-K7U6HDB6.js";
import "./chunk-64B6H5RV.js";
import "./chunk-3ECTZ67D.js";
import "./chunk-WHFPT3MI.js";
import "./chunk-Z7ID6LQT.js";
import "./chunk-MHACI6VO.js";
import "./chunk-4QODSIJL.js";
import "./chunk-HP3XVAWO.js";
import "./chunk-LJQTXJLJ.js";
import "./chunk-LV4D4M7G.js";
import "./chunk-HFKPIUEB.js";
import "./chunk-OB7XGIVW.js";
import "./chunk-TOTT47W3.js";
import "./chunk-WYSOLO6F.js";
import "./chunk-DSRRGXQP.js";
import "./chunk-6WLIVBPN.js";
import "./chunk-WAWVWQWY.js";
import "./chunk-7XK4IPKN.js";
import "./chunk-3S6PFVBD.js";
import "./chunk-A7HIXRLM.js";
import "./chunk-HXG3EAGH.js";
import "./chunk-KZ7KT6JL.js";
import "./chunk-PSEOYXGU.js";
import "./chunk-PDYDTTO6.js";
import "./chunk-V65JFJHR.js";
import {
  $,
  nn
} from "./chunk-Y2UHC2VM.js";
import "./chunk-7APSGFF5.js";
import "./chunk-S5RFXGTW.js";
import "./chunk-7P2S6N4H.js";
import "./chunk-6PE6O23W.js";
import "./chunk-BI26XH27.js";
import "./chunk-PPY3JRDD.js";
import "./chunk-6DVUGIPD.js";
import "./chunk-3HEHFNVB.js";
import {
  V
} from "./chunk-Z3LDBFKX.js";
import "./chunk-Y4FK2QML.js";
import "./chunk-V2A2K5J6.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import {
  M
} from "./chunk-U4PYQFWE.js";
import {
  x2 as x
} from "./chunk-FNONMLXB.js";
import "./chunk-7KNADJUA.js";
import {
  f
} from "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import "./chunk-FQ2MMUPL.js";
import {
  l as l2
} from "./chunk-FQMVGWVJ.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-2IPRPVVF.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-OICH3FD6.js";
import "./chunk-DNUHV7J4.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import {
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2 as a
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import {
  j
} from "./chunk-QPWNDO2C.js";
import {
  a2
} from "./chunk-CA2PXGXL.js";
import {
  I,
  v
} from "./chunk-RXTTOJU7.js";
import "./chunk-4HAMAX2C.js";
import {
  e as e2,
  l
} from "./chunk-3QT5L2OK.js";
import "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/support/imageReprojection.js
var l3 = class _l {
  constructor(t) {
    if (this._ownsRctx = false, t)
      this._ownsRctx = false, this._rctx = t;
    else {
      if (_l._instance)
        return _l._instanceRefCount++, _l._instance;
      _l._instanceRefCount = 1, _l._instance = this, this._ownsRctx = true;
      const t2 = document.createElement("canvas").getContext("webgl");
      t2.getExtension("OES_texture_float"), this._rctx = new P(t2, {});
    }
    const e4 = { applyProjection: true, bilinear: false, bicubic: false }, r = o("raster/reproject", "raster/reproject", /* @__PURE__ */ new Map([["a_position", 0]]), e4);
    this._program = this._rctx.programCache.acquire(r.shaders.vertexShader, r.shaders.fragmentShader, r.attributes), this._rctx.useProgram(this._program), this._program.setUniform1f("u_opacity", 1), this._program.setUniform1i("u_image", 0), this._program.setUniform1i("u_flipY", 0), this._program.setUniform1i("u_transformGrid", 1), this._quad = new n(this._rctx, [0, 0, 1, 0, 0, 1, 1, 1]);
  }
  reprojectTexture(t, s, n2 = false) {
    const o2 = nn(t.extent, s), m2 = new x({ x: (t.extent.xmax - t.extent.xmin) / t.texture.descriptor.width, y: (t.extent.ymax - t.extent.ymin) / t.texture.descriptor.height, spatialReference: t.extent.spatialReference }), { x: _, y: g2 } = C(m2, s, t.extent);
    let l4 = (_ + g2) / 2;
    const w2 = Math.round((o2.xmax - o2.xmin) / l4), b3 = Math.round((o2.ymax - o2.ymin) / l4);
    l4 = (o2.width / w2 + o2.height / b3) / 2;
    const j3 = new x({ x: l4, y: l4, spatialReference: o2.spatialReference }), D2 = $2({ projectedExtent: o2, srcBufferExtent: t.extent, pixelSize: j3, hasWrapAround: true, spacing: [16, 16] }), R = m(this._rctx, D2), C3 = new e3(w2, b3);
    C3.wrapMode = D.CLAMP_TO_EDGE;
    const T3 = new x2(this._rctx, C3);
    this._rctx.bindFramebuffer(T3), this._rctx.setViewport(0, 0, w2, b3), this._rctx.useProgram(this._program), this._rctx.bindTexture(t.texture, 0), this._rctx.bindTexture(R, 1), this._quad.bind();
    const { width: y2 = 0, height: E = 0 } = t.texture.descriptor;
    if (this._program.setUniform2f("u_srcImageSize", y2, E), this._program.setUniform2fv("u_transformSpacing", D2.spacing), this._program.setUniform2fv("u_transformGridSize", D2.size), this._program.setUniform2f("u_targetImageSize", w2, b3), this._quad.draw(), this._quad.unbind(), this._rctx.useProgram(null), this._rctx.bindFramebuffer(null), R.dispose(), n2) {
      const { width: t2, height: e4 } = T3, r = new ImageData(t2 ?? 0, e4 ?? 0);
      T3.readPixels(0, 0, t2 ?? 0, e4 ?? 0, G.RGBA, U.UNSIGNED_BYTE, r.data);
      const i3 = T3.detachColorTexture(X.COLOR_ATTACHMENT0);
      return T3.dispose(), { texture: i3, extent: o2, imageData: r };
    }
    const M2 = T3.detachColorTexture(X.COLOR_ATTACHMENT0);
    return T3.dispose(), { texture: M2, extent: o2 };
  }
  reprojectBitmapData(t, e4) {
    const r = w(t.bitmapData) ? b2(t.bitmapData) : t.bitmapData, i3 = new e3();
    i3.wrapMode = D.CLAMP_TO_EDGE, i3.width = t.bitmapData.width, i3.height = t.bitmapData.height;
    const a4 = new T(this._rctx, i3, r), o2 = this.reprojectTexture({ texture: a4, extent: t.extent }, e4, true);
    o2.texture.dispose();
    const m2 = document.createElement("canvas"), p = o2.imageData;
    m2.width = p.width, m2.height = p.height;
    return m2.getContext("2d").putImageData(p, 0, 0), { bitmapData: m2, extent: o2.extent };
  }
  async loadAndReprojectBitmapData(e4, r, i3) {
    const a4 = (await j(e4, { responseType: "image" })).data, s = document.createElement("canvas");
    s.width = a4.width, s.height = a4.height;
    const n2 = s.getContext("2d");
    n2.drawImage(a4, 0, 0);
    const o2 = n2.getImageData(0, 0, s.width, s.height);
    if (r.spatialReference.equals(i3))
      return { bitmapData: o2, extent: r };
    const m2 = this.reprojectBitmapData({ bitmapData: o2, extent: r }, i3);
    return { bitmapData: m2.bitmapData, extent: m2.extent };
  }
  destroy() {
    this._ownsRctx ? (_l._instanceRefCount--, 0 === _l._instanceRefCount && (this._quad.dispose(), this._program.dispose(), this._rctx.dispose(), _l._instance = null)) : (this._quad.dispose(), this._program.dispose());
  }
};
l3._instanceRefCount = 0;

// node_modules/@arcgis/core/views/2d/layers/KMLLayerView2D.js
var C2 = class {
  constructor() {
    this.allSublayers = /* @__PURE__ */ new Map(), this.allPoints = [], this.allPolylines = [], this.allPolygons = [], this.allMapImages = [];
  }
};
var j2 = class extends f3(d2) {
  constructor() {
    super(...arguments), this._bitmapIndex = /* @__PURE__ */ new Map(), this._mapImageContainer = new a3(), this._kmlVisualData = new C2(), this._fetchController = null, this.allVisiblePoints = new i(), this.allVisiblePolylines = new i(), this.allVisiblePolygons = new i(), this.allVisibleMapImages = new V();
  }
  async hitTest(e4, i3) {
    var _a, _b, _c;
    const t = this.layer;
    return [(_a = this._pointsView) == null ? void 0 : _a.hitTest(e4), (_b = this._polylinesView) == null ? void 0 : _b.hitTest(e4), (_c = this._polygonsView) == null ? void 0 : _c.hitTest(e4)].flat().filter(Boolean).map((i4) => (i4.layer = t, i4.sourceLayer = t, { type: "graphic", graphic: i4, layer: t, mapPoint: e4 }));
  }
  update(e4) {
    this._polygonsView && this._polygonsView.processUpdate(e4), this._polylinesView && this._polylinesView.processUpdate(e4), this._pointsView && this._pointsView.processUpdate(e4);
  }
  attach() {
    this._fetchController = new AbortController(), this.container.addChild(this._mapImageContainer), this._polygonsView = new oe({ view: this.view, graphics: this.allVisiblePolygons, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._polygonsView.container), this._polylinesView = new oe({ view: this.view, graphics: this.allVisiblePolylines, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._polylinesView.container), this._pointsView = new oe({ view: this.view, graphics: this.allVisiblePoints, requestUpdateCallback: () => this.requestUpdate(), container: new i2(this.view.featuresTilingScheme) }), this.container.addChild(this._pointsView.container), this.addAttachHandles([this.allVisibleMapImages.on("change", (e4) => {
      e4.added.forEach((e5) => this._addMapImage(e5)), e4.removed.forEach((e5) => this._removeMapImage(e5));
    }), l2(() => this.layer.visibleSublayers, (e4) => {
      for (const [i3, t] of this._kmlVisualData.allSublayers)
        t.visibility = 0;
      for (const i3 of e4) {
        const e5 = this._kmlVisualData.allSublayers.get(i3.id);
        e5 && (e5.visibility = 1);
      }
      this._refreshCollections();
    })]), this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)), this._imageReprojector = new l3();
  }
  detach() {
    this._fetchController = e2(this._fetchController), this._mapImageContainer.removeAllChildren(), this.container.removeAllChildren(), this._bitmapIndex.clear(), this._polygonsView = l(this._polygonsView), this._polylinesView = l(this._polylinesView), this._pointsView = l(this._pointsView), this._imageReprojector = l(this._imageReprojector);
  }
  moveStart() {
  }
  viewChange() {
    this._polygonsView.viewChange(), this._polylinesView.viewChange(), this._pointsView.viewChange();
  }
  moveEnd() {
  }
  isUpdating() {
    return this._pointsView.updating || this._polygonsView.updating || this._polylinesView.updating;
  }
  _addMapImage(e4) {
    var _a, _b;
    (((_a = this.view.spatialReference) == null ? void 0 : _a.isWGS84) || ((_b = this.view.spatialReference) == null ? void 0 : _b.isWebMercator)) && this._imageReprojector.loadAndReprojectBitmapData(e4.href, M.fromJSON(e4.extent), this.view.spatialReference).then((i3) => {
      const t = new T2(i3.bitmapData);
      t.x = i3.extent.xmin, t.y = i3.extent.ymax, t.resolution = i3.extent.width / i3.bitmapData.width, t.rotation = e4.rotation, this._mapImageContainer.addChild(t), this._bitmapIndex.set(e4, t);
    });
  }
  async _getViewDependentUrl(e4, t) {
    const { viewFormat: s, viewBoundScale: a4, httpQuery: o2 } = e4;
    if (null != s) {
      if (null == t)
        throw new Error("Loading this network link requires a view state.");
      let n2;
      if (await $(), null != a4 && 1 !== a4) {
        const e5 = new M(t.extent);
        e5.expand(a4), n2 = e5;
      } else
        n2 = t.extent;
      n2 = nn(n2, f.WGS84);
      const h = nn(n2, f.WebMercator), y2 = n2.xmin, g2 = n2.xmax, w2 = n2.ymin, _ = n2.ymax, b3 = t.size[0] * t.pixelRatio, V2 = t.size[1] * t.pixelRatio, f4 = Math.max(h.width, h.height), v2 = { "[bboxWest]": y2.toString(), "[bboxEast]": g2.toString(), "[bboxSouth]": w2.toString(), "[bboxNorth]": _.toString(), "[lookatLon]": n2.center.x.toString(), "[lookatLat]": n2.center.y.toString(), "[lookatRange]": f4.toString(), "[lookatTilt]": "0", "[lookatHeading]": t.rotation.toString(), "[lookatTerrainLon]": n2.center.x.toString(), "[lookatTerrainLat]": n2.center.y.toString(), "[lookatTerrainAlt]": "0", "[cameraLon]": n2.center.x.toString(), "[cameraLat]": n2.center.y.toString(), "[cameraAlt]": f4.toString(), "[horizFov]": "60", "[vertFov]": "60", "[horizPixels]": b3.toString(), "[vertPixels]": V2.toString(), "[terrainEnabled]": "0", "[clientVersion]": a2, "[kmlVersion]": "2.2", "[clientName]": "ArcGIS API for JavaScript", "[language]": "en-US" }, S = (e5) => {
        for (const i3 in e5) {
          let t2;
          for (t2 in v2)
            e5[i3] = e5[i3].replace(t2, v2[t2]);
        }
      }, I2 = I(s);
      S(I2);
      let x3 = {};
      null != o2 && (x3 = I(o2), S(x3));
      const C3 = f2(e4.href);
      C3.query = { ...C3.query, ...I2, ...x3 };
      return `${C3.path}?${v(I2)}`;
    }
    return e4.href;
  }
  async _fetchService(e4) {
    const i3 = new C2();
    await this._loadVisualData(this.layer.url, i3, e4), this._kmlVisualData = i3, this._refreshCollections();
  }
  _refreshCollections() {
    this.allVisiblePoints.removeAll(), this.allVisiblePolylines.removeAll(), this.allVisiblePolygons.removeAll(), this.allVisibleMapImages.removeAll(), this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4)), this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4)), this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4)), this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e4) => this._isSublayerVisible(e4.sublayerId)).map(({ item: e4 }) => e4));
  }
  _isSublayerVisible(e4) {
    const i3 = this._kmlVisualData.allSublayers.get(e4);
    return !!(i3 == null ? void 0 : i3.visibility) && (-1 === i3.parentFolderId || this._isSublayerVisible(i3.parentFolderId));
  }
  _loadVisualData(e4, i3, t) {
    return this._fetchParsedKML(e4, t).then(async (e5) => {
      for (const s of e5.sublayers) {
        i3.allSublayers.set(s.id, s);
        const e6 = s.points ? await b(s.points) : [], a4 = s.polylines ? await b(s.polylines) : [], o2 = s.polygons ? await b(s.polygons) : [], l4 = s.mapImages || [];
        if (i3.allPoints.push(...e6.map((e7) => ({ item: e7, sublayerId: s.id }))), i3.allPolylines.push(...a4.map((e7) => ({ item: e7, sublayerId: s.id }))), i3.allPolygons.push(...o2.map((e7) => ({ item: e7, sublayerId: s.id }))), i3.allMapImages.push(...l4.map((e7) => ({ item: e7, sublayerId: s.id }))), s.networkLink) {
          const e7 = await this._getViewDependentUrl(s.networkLink, this.view.state);
          await this._loadVisualData(e7, i3, t);
        }
      }
    });
  }
  _fetchParsedKML(e4, i3) {
    return g(e4, this.layer.spatialReference, this.layer.refreshInterval, i3).then((e5) => d(e5.data));
  }
  _removeMapImage(e4) {
    const i3 = this._bitmapIndex.get(e4);
    i3 && (this._mapImageContainer.removeChild(i3), this._bitmapIndex.delete(e4));
  }
};
e([y()], j2.prototype, "_pointsView", void 0), e([y()], j2.prototype, "_polylinesView", void 0), e([y()], j2.prototype, "_polygonsView", void 0), e([y()], j2.prototype, "updating", void 0), j2 = e([a("esri.views.2d.layers.KMLLayerView2D")], j2);
var k = j2;
export {
  k as default
};
//# sourceMappingURL=KMLLayerView2D-GSEGHQRD.js.map
