import {
  c
} from "./chunk-PISYP3ZS.js";
import "./chunk-XZUCRWKB.js";
import {
  Be
} from "./chunk-ZM5VNAIS.js";
import "./chunk-4KFSTSVV.js";
import "./chunk-GOTSAXOX.js";
import "./chunk-2RTM4ZHS.js";
import "./chunk-QSWXHF7C.js";
import "./chunk-UBVDHOW4.js";
import "./chunk-B6IMHQ7A.js";
import "./chunk-NONDLDDV.js";
import "./chunk-VXGW7CXZ.js";
import "./chunk-XNYF4YHK.js";
import "./chunk-LVYJ3BFD.js";
import "./chunk-W7NPCP2A.js";
import "./chunk-B6R735ZF.js";
import "./chunk-BJSER2MD.js";
import "./chunk-X5YBKNPQ.js";
import "./chunk-BLWHZOWS.js";
import "./chunk-KACQFA4U.js";
import "./chunk-GOBOJQPM.js";
import "./chunk-OWJMBATL.js";
import "./chunk-YBZ3PNAF.js";
import "./chunk-Y7FTNVRA.js";
import "./chunk-D7CFF2FH.js";
import "./chunk-S6UQK27H.js";
import "./chunk-XOPGXWER.js";
import "./chunk-M6X4HWGZ.js";
import "./chunk-OGDE7T5O.js";
import "./chunk-62JUI7PG.js";
import "./chunk-2DUFLNG7.js";
import "./chunk-T2F2N6HP.js";
import "./chunk-7N54VP3N.js";
import "./chunk-UQH37OH4.js";
import "./chunk-VCOABNMG.js";
import "./chunk-HJI3BY6O.js";
import "./chunk-UUGV6AYJ.js";
import "./chunk-AWZZYYVR.js";
import "./chunk-HSP4VKTO.js";
import "./chunk-COWNIHL5.js";
import {
  d
} from "./chunk-OH72SRIK.js";
import "./chunk-75B6UJRJ.js";
import "./chunk-HGK7QSHJ.js";
import "./chunk-FAXVWHOJ.js";
import "./chunk-4RXG3COO.js";
import "./chunk-CDH6OAES.js";
import "./chunk-N2FT2B4P.js";
import "./chunk-LLKNYARI.js";
import "./chunk-6VMHQJDC.js";
import "./chunk-IIHBYDIT.js";
import "./chunk-L45WQWKV.js";
import "./chunk-EWJFH5BC.js";
import "./chunk-WDH5YZUJ.js";
import {
  b
} from "./chunk-ELRBKBPI.js";
import "./chunk-5T5QOUDR.js";
import "./chunk-5NTMYKFL.js";
import "./chunk-Z3LFAOG6.js";
import "./chunk-OYV6FNKL.js";
import "./chunk-HXLO7LC5.js";
import "./chunk-5YQM3GC2.js";
import "./chunk-TQ73QHGP.js";
import "./chunk-5EIAXFYU.js";
import "./chunk-SBPJCNL2.js";
import "./chunk-TEW7IDMC.js";
import "./chunk-ZFHT67PQ.js";
import {
  f as f3
} from "./chunk-QDV73XFP.js";
import "./chunk-EN7ZU6UM.js";
import "./chunk-4QODSIJL.js";
import "./chunk-HP3XVAWO.js";
import "./chunk-LJQTXJLJ.js";
import "./chunk-LV4D4M7G.js";
import "./chunk-ZZC3B6AH.js";
import "./chunk-HFKPIUEB.js";
import "./chunk-OB7XGIVW.js";
import "./chunk-TOTT47W3.js";
import "./chunk-WYSOLO6F.js";
import "./chunk-DSRRGXQP.js";
import "./chunk-6WLIVBPN.js";
import "./chunk-WAWVWQWY.js";
import "./chunk-7XK4IPKN.js";
import "./chunk-3S6PFVBD.js";
import "./chunk-JRV5JJCY.js";
import "./chunk-BS6NX4XB.js";
import {
  m,
  p
} from "./chunk-A7HIXRLM.js";
import "./chunk-IJCLSAKS.js";
import "./chunk-HXG3EAGH.js";
import "./chunk-KZ7KT6JL.js";
import "./chunk-PSEOYXGU.js";
import "./chunk-PDYDTTO6.js";
import "./chunk-V65JFJHR.js";
import "./chunk-Y2UHC2VM.js";
import "./chunk-7APSGFF5.js";
import "./chunk-S5RFXGTW.js";
import "./chunk-JQTIJ5DI.js";
import "./chunk-7P2S6N4H.js";
import {
  _
} from "./chunk-6PE6O23W.js";
import "./chunk-BI26XH27.js";
import "./chunk-PPY3JRDD.js";
import "./chunk-6DVUGIPD.js";
import "./chunk-3HEHFNVB.js";
import "./chunk-Z3LDBFKX.js";
import "./chunk-A4SZU67B.js";
import "./chunk-Y4FK2QML.js";
import "./chunk-V2A2K5J6.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import {
  M
} from "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import {
  o
} from "./chunk-7KNADJUA.js";
import {
  f as f2
} from "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import "./chunk-VL6IMOUO.js";
import "./chunk-YCF7NU4C.js";
import "./chunk-FQ2MMUPL.js";
import "./chunk-FQMVGWVJ.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-2IPRPVVF.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-OICH3FD6.js";
import "./chunk-DNUHV7J4.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import {
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2 as a
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import "./chunk-QPWNDO2C.js";
import "./chunk-CA2PXGXL.js";
import {
  L
} from "./chunk-RXTTOJU7.js";
import {
  f,
  k
} from "./chunk-4HAMAX2C.js";
import "./chunk-3QT5L2OK.js";
import {
  s3 as s
} from "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import {
  has
} from "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/graphics/sources/CSVSource.js
var c2 = class extends _ {
  constructor(t) {
    super(t), this.type = "csv", this.refresh = k(async (t2) => {
      await this.load();
      const { extent: e2, timeExtent: o2 } = await this._connection.invoke("refresh", t2);
      return e2 && (this.sourceJSON.extent = e2), o2 && (this.sourceJSON.timeInfo.timeExtent = [o2.start, o2.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    });
  }
  load(t) {
    const e2 = null != t ? t.signal : null;
    return this.addResolvingPromise(this._startWorker(e2)), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null;
  }
  async openPorts() {
    return await this.load(), this._connection.openPorts();
  }
  async queryFeatures(t, e2 = {}) {
    await this.load(e2);
    const o2 = await this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e2);
    return d.fromJSON(o2);
  }
  async queryFeaturesJSON(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e2);
  }
  async queryFeatureCount(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryFeatureCount", t ? t.toJSON() : null, e2);
  }
  async queryObjectIds(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryObjectIds", t ? t.toJSON() : null, e2);
  }
  async queryExtent(t, e2 = {}) {
    await this.load(e2);
    const o2 = await this._connection.invoke("queryExtent", t ? t.toJSON() : null, e2);
    return { count: o2.count, extent: M.fromJSON(o2.extent) };
  }
  async querySnapping(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("querySnapping", t, e2);
  }
  async _startWorker(t) {
    this._connection = await f3("CSVSourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: t });
    const { url: e2, delimiter: o2, fields: s2, latitudeField: i, longitudeField: n, spatialReference: a2, timeInfo: c3 } = this.loadOptions, u = await this._connection.invoke("load", { url: e2, customParameters: this.customParameters, parsingOptions: { delimiter: o2, fields: s2 == null ? void 0 : s2.map((t2) => t2.toJSON()), latitudeField: i, longitudeField: n, spatialReference: a2 == null ? void 0 : a2.toJSON(), timeInfo: c3 == null ? void 0 : c3.toJSON() } }, { signal: t });
    this.locationInfo = u.locationInfo, this.sourceJSON = u.layerDefinition, this.delimiter = u.delimiter;
  }
};
e([y()], c2.prototype, "type", void 0), e([y()], c2.prototype, "loadOptions", void 0), e([y()], c2.prototype, "customParameters", void 0), e([y()], c2.prototype, "locationInfo", void 0), e([y()], c2.prototype, "sourceJSON", void 0), e([y()], c2.prototype, "delimiter", void 0), c2 = e([a("esri.layers.graphics.sources.CSVSource")], c2);

// node_modules/@arcgis/core/layers/CSVLayer.js
function h(e2, r) {
  throw new s(r, `CSVLayer (title: ${e2.title}, id: ${e2.id}) cannot be saved to a portal item`);
}
var m2 = class extends Be {
  constructor(...e2) {
    super(...e2), this.geometryType = "point", this.capabilities = c(false, false), this.delimiter = null, this.editingEnabled = false, this.fields = null, this.latitudeField = null, this.locationType = "coordinates", this.longitudeField = null, this.operationalLayerType = "CSV", this.outFields = ["*"], this.path = null, this.spatialReference = f2.WGS84, this.source = null, this.type = "csv";
  }
  normalizeCtorArgs(e2, t) {
    return "string" == typeof e2 ? { url: e2, ...t } : e2;
  }
  load(e2) {
    const t = null != e2 ? e2.signal : null, i = this.loadFromPortal({ supportedTypes: ["CSV"], supportsData: false }, e2).catch(f).then(async () => this.initLayerProperties(await this.createGraphicsSource(t)));
    return this.addResolvingPromise(i), Promise.resolve(this);
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  readWebMapLabelsVisible(e2, t) {
    return null != t.showLabels ? t.showLabels : !!(t.layerDefinition && t.layerDefinition.drawingInfo && t.layerDefinition.drawingInfo.labelingInfo);
  }
  set url(e2) {
    if (!e2)
      return void this._set("url", e2);
    const t = L(e2);
    this._set("url", t.path), t.query && (this.customParameters = { ...this.customParameters, ...t.query });
  }
  async createGraphicsSource(e2) {
    const t = new c2({ loadOptions: { delimiter: this.delimiter, fields: this.fields, latitudeField: this.latitudeField ?? void 0, longitudeField: this.longitudeField ?? void 0, spatialReference: this.spatialReference ?? void 0, timeInfo: this.timeInfo ?? void 0, url: this.url }, customParameters: this.customParameters ?? void 0 });
    return this._set("source", t), await t.load({ signal: e2 }), this.read({ locationInfo: t.locationInfo, columnDelimiter: t.delimiter }, { origin: "service", url: this.parsedUrl }), t;
  }
  queryFeatures(e2, t) {
    return this.load().then(() => this.source.queryFeatures(b.from(e2) || this.createQuery())).then((e3) => {
      if (e3 == null ? void 0 : e3.features)
        for (const t2 of e3.features)
          t2.layer = t2.sourceLayer = this;
      return e3;
    });
  }
  queryObjectIds(e2, t) {
    return this.load().then(() => this.source.queryObjectIds(b.from(e2) || this.createQuery()));
  }
  queryFeatureCount(e2, t) {
    return this.load().then(() => this.source.queryFeatureCount(b.from(e2) || this.createQuery()));
  }
  queryExtent(e2, t) {
    return this.load().then(() => this.source.queryExtent(b.from(e2) || this.createQuery()));
  }
  read(e2, t) {
    super.read(e2, t), t && "service" === t.origin && this.revert(["latitudeField", "longitudeField"], "service");
  }
  write(e2, t) {
    return super.write(e2, { ...t, writeLayerSchema: true });
  }
  clone() {
    throw new s("csv-layer:clone", `CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`);
  }
  async save(e2) {
    return h(this, "csv-layer:save");
  }
  async saveAs(e2, t) {
    return h(this, "csv-layer:save-as");
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e2, updates: t } = await this.source.refresh(this.customParameters);
      return null != t && this.read(t, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e2;
    } catch {
    }
    return false;
  }
  _verifyFields() {
  }
  _verifySource() {
  }
  _hasMemorySource() {
    return false;
  }
};
e([y({ readOnly: true, json: { read: false, write: false } })], m2.prototype, "capabilities", void 0), e([y({ type: [",", " ", ";", "|", "	"], json: { read: { source: "columnDelimiter" }, write: { target: "columnDelimiter", ignoreOrigin: true } } })], m2.prototype, "delimiter", void 0), e([y({ readOnly: true, type: Boolean, json: { origins: { "web-scene": { read: false, write: false } } } })], m2.prototype, "editingEnabled", void 0), e([y({ json: { read: { source: "layerDefinition.fields" }, write: { target: "layerDefinition.fields" } } })], m2.prototype, "fields", void 0), e([y({ type: Boolean, readOnly: true })], m2.prototype, "isTable", null), e([o("web-map", "labelsVisible", ["layerDefinition.drawingInfo.labelingInfo", "showLabels"])], m2.prototype, "readWebMapLabelsVisible", null), e([y({ type: String, json: { read: { source: "locationInfo.latitudeFieldName" }, write: { target: "locationInfo.latitudeFieldName", ignoreOrigin: true } } })], m2.prototype, "latitudeField", void 0), e([y({ type: ["show", "hide"] })], m2.prototype, "listMode", void 0), e([y({ type: ["coordinates"], json: { read: { source: "locationInfo.locationType" }, write: { target: "locationInfo.locationType", ignoreOrigin: true, isRequired: true } } })], m2.prototype, "locationType", void 0), e([y({ type: String, json: { read: { source: "locationInfo.longitudeFieldName" }, write: { target: "locationInfo.longitudeFieldName", ignoreOrigin: true } } })], m2.prototype, "longitudeField", void 0), e([y({ type: ["CSV"] })], m2.prototype, "operationalLayerType", void 0), e([y()], m2.prototype, "outFields", void 0), e([y({ type: String, json: { origins: { "web-scene": { read: false, write: false } }, read: false, write: false } })], m2.prototype, "path", void 0), e([y({ json: { read: false }, cast: null, type: c2, readOnly: true })], m2.prototype, "source", void 0), e([y({ json: { read: false }, value: "csv", readOnly: true })], m2.prototype, "type", void 0), e([y({ json: { read: m, write: { isRequired: true, ignoreOrigin: true, writer: p } } })], m2.prototype, "url", null), m2 = e([a("esri.layers.CSVLayer")], m2);
var f4 = m2;
export {
  f4 as default
};
//# sourceMappingURL=CSVLayer-5GJXVQH5.js.map
