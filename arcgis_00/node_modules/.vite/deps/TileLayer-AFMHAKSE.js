import {
  E,
  Y,
  f as f4
} from "./chunk-HD7TS76B.js";
import "./chunk-5IYXMCOI.js";
import {
  p as p3
} from "./chunk-HE2CIXWU.js";
import "./chunk-VAIPPB6K.js";
import "./chunk-BUGH6XRV.js";
import "./chunk-ZJSWPA2L.js";
import "./chunk-EM5KTVEY.js";
import "./chunk-EZKKNHFJ.js";
import "./chunk-KVDAIVC6.js";
import "./chunk-7NWPWHPA.js";
import "./chunk-B5TYSRH2.js";
import "./chunk-WWUAHPIM.js";
import "./chunk-HI2IDU34.js";
import "./chunk-GLQ6HYRE.js";
import "./chunk-C4L2TGDU.js";
import "./chunk-325OL72R.js";
import "./chunk-EIIX6MK3.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import {
  o as o2
} from "./chunk-WKQZXUCD.js";
import "./chunk-URJC76VO.js";
import "./chunk-Y2ZDD3I4.js";
import "./chunk-JPSSRLNG.js";
import {
  i
} from "./chunk-LRYQNKYC.js";
import "./chunk-DTFJFPF7.js";
import "./chunk-ODP6NX3Y.js";
import "./chunk-UIMMV4OY.js";
import "./chunk-QZ4HHFPF.js";
import "./chunk-V56SNWAF.js";
import {
  o as o3
} from "./chunk-UWP7BCPY.js";
import "./chunk-QMJALO7W.js";
import "./chunk-VRNAR2BU.js";
import "./chunk-IAMROCVA.js";
import "./chunk-7L7U6YJ3.js";
import {
  l
} from "./chunk-NOI4I5TT.js";
import "./chunk-YYGN2GO6.js";
import "./chunk-QXLGW66I.js";
import "./chunk-YGH3EEG5.js";
import "./chunk-H7EOZY7L.js";
import "./chunk-LKYCF7AI.js";
import "./chunk-DDZ6WPWX.js";
import "./chunk-ZVOARKLE.js";
import "./chunk-BY57CSP7.js";
import "./chunk-52ZYWMNY.js";
import "./chunk-FHYNSVC4.js";
import "./chunk-4HDCOJ24.js";
import "./chunk-VY2MIGMV.js";
import {
  p as p2
} from "./chunk-5BKFA3IG.js";
import "./chunk-R5EWWIOD.js";
import "./chunk-52L3OT7H.js";
import "./chunk-NHDVBH5V.js";
import "./chunk-WLU7KKOI.js";
import "./chunk-BA7WNJMF.js";
import "./chunk-ZZQVVHF7.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import {
  j as j2
} from "./chunk-M52YOZDN.js";
import {
  a as a2
} from "./chunk-P5CFKMGO.js";
import "./chunk-2EHBSKAM.js";
import "./chunk-HVBIBP5P.js";
import {
  t as t2
} from "./chunk-VLY2K2HC.js";
import {
  c
} from "./chunk-AVOTXTN2.js";
import {
  O
} from "./chunk-4FGKBJP7.js";
import {
  f as f3
} from "./chunk-LALFHQE3.js";
import "./chunk-IVCYO56U.js";
import "./chunk-JGFWZDK3.js";
import "./chunk-IN5QJ5F4.js";
import "./chunk-C4I3X4RM.js";
import "./chunk-GVMBTEIW.js";
import "./chunk-XR4HIGQP.js";
import "./chunk-LCWGEIX7.js";
import "./chunk-RFIIU6XF.js";
import "./chunk-DGADM4KQ.js";
import "./chunk-4CZO65BK.js";
import "./chunk-7C7EF3FD.js";
import "./chunk-PQOGMOZ7.js";
import "./chunk-XMS7FYO7.js";
import "./chunk-HOGRNOD4.js";
import "./chunk-NZY6MEON.js";
import {
  p,
  v as v2,
  w
} from "./chunk-D76KSV7G.js";
import {
  t
} from "./chunk-2H7DV6BT.js";
import "./chunk-CSKEV5FZ.js";
import "./chunk-Z74XNIJ3.js";
import "./chunk-GRS3EHGG.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-TNYMHVJ4.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-Z6HMRH7V.js";
import "./chunk-JZBA2N4X.js";
import {
  b
} from "./chunk-4W4V5TBI.js";
import "./chunk-HABV4VZ2.js";
import "./chunk-2D2437VM.js";
import "./chunk-YIIAB4WA.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-FUHI6TR6.js";
import "./chunk-FVYUULND.js";
import "./chunk-BRRN7CRU.js";
import "./chunk-TLIPFBCN.js";
import "./chunk-7KTXAH5E.js";
import "./chunk-WYE6B4VU.js";
import "./chunk-5XLKQQPP.js";
import {
  a as a3
} from "./chunk-X5ASTC4J.js";
import "./chunk-3OL5L3LC.js";
import "./chunk-H7C32RFW.js";
import "./chunk-RNYFZDNI.js";
import "./chunk-FBG4WSP5.js";
import "./chunk-G3X4SV7G.js";
import "./chunk-AJM6LB5B.js";
import "./chunk-G4LADD2B.js";
import "./chunk-HLTEFNTE.js";
import "./chunk-CO3TM5QL.js";
import "./chunk-FARQZCLL.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-E5XSQEGK.js";
import "./chunk-MZXYP6SL.js";
import {
  f as f2,
  r2 as r
} from "./chunk-4X5MDDUC.js";
import {
  o
} from "./chunk-UURR7HU3.js";
import "./chunk-JLE6P4DW.js";
import "./chunk-CL7UAIKB.js";
import "./chunk-F3SBJW2O.js";
import "./chunk-YVCC2Z32.js";
import "./chunk-ODFH3BSN.js";
import "./chunk-YC3PYTAZ.js";
import "./chunk-46JSCFRH.js";
import "./chunk-JZM5YUHA.js";
import {
  s as s2
} from "./chunk-VPF2CM6B.js";
import "./chunk-JCWF5RB4.js";
import {
  y
} from "./chunk-TBBTJ7N4.js";
import "./chunk-NUI5LCQ5.js";
import {
  a2 as a
} from "./chunk-AS7ITRBV.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SF7FIURP.js";
import {
  j
} from "./chunk-K7YQIZQM.js";
import "./chunk-H3ETM4DZ.js";
import {
  L,
  _,
  v
} from "./chunk-TXAS6RAG.js";
import {
  f
} from "./chunk-G72U56FP.js";
import "./chunk-DWOEYHKS.js";
import {
  s3 as s
} from "./chunk-JGYHKABU.js";
import "./chunk-3FXB2ZFK.js";
import "./chunk-WQNVH5M4.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/TileLayer.js
var W;
var B = ["Canvas/World_Dark_Gray_Base", "Canvas/World_Dark_Gray_Reference", "Canvas/World_Light_Gray_Base", "Canvas/World_Light_Gray_Reference", "Elevation/World_Hillshade", "Elevation/World_Hillshade_Dark", "Ocean/World_Ocean_Base", "Ocean/World_Ocean_Reference", "Ocean_Basemap", "Reference/World_Boundaries_and_Places", "Reference/World_Boundaries_and_Places_Alternate", "Reference/World_Transportation", "World_Imagery", "World_Street_Map", "World_Topo_Map"];
var C = W = class extends a2(t2(E(p3(f4(c(j2(l(O(a3(p2(i(o3(b))))))))))))) {
  constructor(...e2) {
    super(...e2), this.listMode = "show", this.isReference = null, this.operationalLayerType = "ArcGISTiledMapServiceLayer", this.resampling = true, this.sourceJSON = null, this.spatialReference = null, this.path = null, this.sublayers = null, this.type = "tile", this.url = null;
  }
  normalizeCtorArgs(e2, r2) {
    return "string" == typeof e2 ? { url: e2, ...r2 } : e2;
  }
  load(e2) {
    const r2 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e2).catch(f).then(() => this._fetchService(r2))), Promise.resolve(this);
  }
  get attributionDataUrl() {
    var _a;
    const e2 = (_a = this.parsedUrl) == null ? void 0 : _a.path.toLowerCase();
    return e2 ? this._getDefaultAttribution(this._getMapName(e2)) : null;
  }
  readSpatialReference(e2, r2) {
    return (e2 = e2 || r2.tileInfo && r2.tileInfo.spatialReference) && f2.fromJSON(e2);
  }
  writeSublayers(e2, r2, t3, s3) {
    if (!this.loaded || !e2)
      return;
    const i2 = e2.slice().reverse().flatten(({ sublayers: e3 }) => e3 && e3.toArray().reverse()).toArray(), o4 = [], a4 = { writeSublayerStructure: false, ...s3 };
    i2.forEach((e3) => {
      const r3 = e3.write({}, a4);
      o4.push(r3);
    });
    o4.some((e3) => Object.keys(e3).length > 1) && (r2.layers = o4);
  }
  get tileServers() {
    var _a;
    return this._getDefaultTileServers((_a = this.parsedUrl) == null ? void 0 : _a.path);
  }
  castTileServers(e2) {
    return Array.isArray(e2) ? e2.map((e3) => L(e3).path) : null;
  }
  fetchTile(e2, t3, s3, i2 = {}) {
    const { signal: o4 } = i2, a4 = this.getTileUrl(e2, t3, s3), l2 = { responseType: "image", signal: o4, query: { ...this.refreshParameters } };
    return j(a4, l2).then((e3) => e3.data);
  }
  async fetchImageBitmapTile(e2, t3, s3, i2 = {}) {
    const { signal: o4 } = i2;
    if (this.fetchTile !== W.prototype.fetchTile) {
      const r2 = await this.fetchTile(e2, t3, s3, i2);
      return o2(r2, e2, t3, s3, o4);
    }
    const a4 = this.getTileUrl(e2, t3, s3), l2 = { responseType: "blob", signal: o4, query: { ...this.refreshParameters } }, { data: n } = await j(a4, l2);
    return o2(n, e2, t3, s3, o4);
  }
  getTileUrl(e2, r2, t3) {
    var _a, _b;
    const s3 = !this.capabilities.operations.supportsTileMap && this.supportsBlankTile, i2 = v({ ...(_a = this.parsedUrl) == null ? void 0 : _a.query, blankTile: !s3 && null, ...this.customParameters, token: this.apiKey }), o4 = this.tileServers;
    return `${o4 && o4.length ? o4[r2 % o4.length] : (_b = this.parsedUrl) == null ? void 0 : _b.path}/tile/${e2}/${r2}/${t3}${i2 ? "?" + i2 : ""}`;
  }
  loadAll() {
    return t(this, (e2) => {
      e2(this.allSublayers);
    });
  }
  _fetchService(e2) {
    return new Promise((s3, i2) => {
      if (this.sourceJSON) {
        if (null != this.sourceJSON.bandCount && null != this.sourceJSON.pixelSizeX)
          throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
        return void s3({ data: this.sourceJSON });
      }
      if (!this.parsedUrl)
        throw new s("tile-layer:undefined-url", "layer's url is not defined");
      const o4 = p(this.parsedUrl.path);
      if (null != o4 && "ImageServer" === o4.serverType)
        throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
      j(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, responseType: "json", signal: e2 }).then(s3, i2);
    }).then((r2) => {
      let t3 = this.url;
      if (r2.ssl && (t3 = this.url = t3.replace(/^http:/i, "https:")), this.sourceJSON = r2.data, this.read(r2.data, { origin: "service", url: this.parsedUrl }), 10.1 === this.version && !w(t3))
        return this._fetchServerVersion(t3, e2).then((e3) => {
          this.read({ currentVersion: e3 });
        }).catch(() => {
        });
    });
  }
  _fetchServerVersion(e2, s3) {
    if (!v2(e2))
      return Promise.reject();
    const i2 = e2.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
    return j(i2, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: s3 }).then((e3) => {
      if (e3.data && e3.data.currentVersion)
        return e3.data.currentVersion;
      throw new s("tile-layer:version-not-available");
    });
  }
  _getMapName(e2) {
    const r2 = e2.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);
    return r2 ? r2[2] : void 0;
  }
  _getDefaultAttribution(e2) {
    if (null == e2)
      return null;
    let r2;
    e2 = e2.toLowerCase();
    for (let t3 = 0, s3 = B.length; t3 < s3; t3++)
      if (r2 = B[t3], r2.toLowerCase().includes(e2))
        return _("//static.arcgis.com/attribution/" + r2);
    return null;
  }
  _getDefaultTileServers(e2) {
    if (null == e2)
      return [];
    const r2 = -1 !== e2.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i), t3 = -1 !== e2.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);
    return r2 || t3 ? [e2, e2.replace(r2 ? /server\.arcgisonline/i : /services\.arcgisonline/i, r2 ? "services.arcgisonline" : "server.arcgisonline")] : [];
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile[N];
  }
};
e([y({ readOnly: true })], C.prototype, "attributionDataUrl", null), e([y({ type: ["show", "hide", "hide-children"] })], C.prototype, "listMode", void 0), e([y({ json: { read: true, write: true } })], C.prototype, "blendMode", void 0), e([y({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], C.prototype, "isReference", void 0), e([y({ readOnly: true, type: ["ArcGISTiledMapServiceLayer"] })], C.prototype, "operationalLayerType", void 0), e([y({ type: Boolean })], C.prototype, "resampling", void 0), e([y()], C.prototype, "sourceJSON", void 0), e([y({ type: f2 })], C.prototype, "spatialReference", void 0), e([o("spatialReference", ["spatialReference", "tileInfo"])], C.prototype, "readSpatialReference", null), e([y({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], C.prototype, "path", void 0), e([y({ readOnly: true })], C.prototype, "sublayers", void 0), e([r("sublayers", { layers: { type: [Y] } })], C.prototype, "writeSublayers", null), e([y({ json: { read: false, write: false } })], C.prototype, "popupEnabled", void 0), e([y()], C.prototype, "tileServers", null), e([s2("tileServers")], C.prototype, "castTileServers", null), e([y({ readOnly: true, json: { read: false } })], C.prototype, "type", void 0), e([y(f3)], C.prototype, "url", void 0), C = W = e([a("esri.layers.TileLayer")], C);
var N = Symbol("default-fetch-tile");
C.prototype.fetchTile[N] = true;
var k = C;
export {
  k as default
};
//# sourceMappingURL=TileLayer-AFMHAKSE.js.map
