import {
  i
} from "./chunk-76TOUYXH.js";
import "./chunk-T7OVGBEA.js";
import {
  oe
} from "./chunk-IEB6YZNM.js";
import {
  d,
  f
} from "./chunk-5DXEWH5V.js";
import "./chunk-ND34FL2W.js";
import "./chunk-IL44YAUG.js";
import "./chunk-TUZCWAFI.js";
import "./chunk-V44KDLLP.js";
import "./chunk-Z46XWZWE.js";
import "./chunk-UFN7ZNFK.js";
import "./chunk-K54BRHUJ.js";
import "./chunk-YICPXMG7.js";
import {
  C,
  O,
  S2 as S,
  T,
  c,
  j2 as j,
  m
} from "./chunk-SQVHR7H3.js";
import "./chunk-MKYYBX7M.js";
import "./chunk-VGWIRN5T.js";
import "./chunk-R3N6YXZV.js";
import "./chunk-O3TVUDAA.js";
import "./chunk-Q2D4AWJS.js";
import "./chunk-46OTPSVO.js";
import "./chunk-2GLJOVSV.js";
import "./chunk-C454H62Q.js";
import "./chunk-B57TE7LC.js";
import "./chunk-SRNTZ5YK.js";
import "./chunk-CQ6LDXRQ.js";
import "./chunk-66V6VC6G.js";
import "./chunk-IOMDA26A.js";
import "./chunk-3Q24STUY.js";
import "./chunk-PORVB4YW.js";
import "./chunk-6W4QNETY.js";
import "./chunk-SKZVSZDU.js";
import "./chunk-2QRPHNFJ.js";
import "./chunk-RHYB7TAK.js";
import "./chunk-L3YUDCKP.js";
import "./chunk-INPPJTIQ.js";
import "./chunk-6VFZXUIR.js";
import "./chunk-D7PFANSX.js";
import "./chunk-C6XOMDEV.js";
import "./chunk-BCTQLMHE.js";
import "./chunk-Z3XU4R74.js";
import "./chunk-SGIIR6RJ.js";
import "./chunk-INNSNI53.js";
import "./chunk-5NQNQAAW.js";
import "./chunk-KEJOWWPH.js";
import "./chunk-Q5R4SEKK.js";
import "./chunk-IL355RAY.js";
import "./chunk-3V3OLLRL.js";
import "./chunk-WD44CU6B.js";
import "./chunk-HXF46NPP.js";
import "./chunk-WD6NUK3A.js";
import "./chunk-TNVCH3GU.js";
import "./chunk-K5MRFCR6.js";
import "./chunk-UNQFOAUX.js";
import "./chunk-GZLGPJT5.js";
import "./chunk-XBCX74QQ.js";
import "./chunk-NUGAWFAM.js";
import "./chunk-KBZKT5PQ.js";
import "./chunk-SZSPKNXB.js";
import "./chunk-BSCE3YT4.js";
import "./chunk-OBYHRJUR.js";
import "./chunk-GSCSASPY.js";
import "./chunk-UBVDHOW4.js";
import "./chunk-BLWHZOWS.js";
import "./chunk-KACQFA4U.js";
import "./chunk-XOPGXWER.js";
import "./chunk-T2F2N6HP.js";
import "./chunk-UUGV6AYJ.js";
import "./chunk-COWNIHL5.js";
import "./chunk-FAXVWHOJ.js";
import "./chunk-4RXG3COO.js";
import "./chunk-L45WQWKV.js";
import "./chunk-EWJFH5BC.js";
import "./chunk-5NTMYKFL.js";
import "./chunk-OYV6FNKL.js";
import "./chunk-HXLO7LC5.js";
import "./chunk-5YQM3GC2.js";
import "./chunk-SUKBNOSX.js";
import "./chunk-3YWKHS6T.js";
import "./chunk-SBPJCNL2.js";
import "./chunk-TEW7IDMC.js";
import "./chunk-OSAR3X5M.js";
import "./chunk-FT7S3AKB.js";
import "./chunk-LE46LW35.js";
import "./chunk-DESQE75S.js";
import "./chunk-HJXIZZJE.js";
import "./chunk-I3HK53BD.js";
import "./chunk-77MJECFF.js";
import "./chunk-CTZ7DCY5.js";
import "./chunk-QKOLWFRE.js";
import "./chunk-YM5PYJO5.js";
import "./chunk-KE5B3PMZ.js";
import "./chunk-2QUCKFNX.js";
import "./chunk-L2VQ7IPJ.js";
import "./chunk-K7U6HDB6.js";
import "./chunk-64B6H5RV.js";
import "./chunk-3ECTZ67D.js";
import "./chunk-WHFPT3MI.js";
import "./chunk-Z7ID6LQT.js";
import "./chunk-MHACI6VO.js";
import {
  n
} from "./chunk-J2OZ3ZPF.js";
import "./chunk-4QODSIJL.js";
import "./chunk-HP3XVAWO.js";
import "./chunk-LJQTXJLJ.js";
import "./chunk-LV4D4M7G.js";
import "./chunk-HFKPIUEB.js";
import "./chunk-OB7XGIVW.js";
import "./chunk-TOTT47W3.js";
import "./chunk-WYSOLO6F.js";
import "./chunk-DSRRGXQP.js";
import "./chunk-6WLIVBPN.js";
import "./chunk-WAWVWQWY.js";
import "./chunk-7XK4IPKN.js";
import "./chunk-3S6PFVBD.js";
import "./chunk-A7HIXRLM.js";
import "./chunk-HXG3EAGH.js";
import "./chunk-KZ7KT6JL.js";
import "./chunk-PSEOYXGU.js";
import "./chunk-PDYDTTO6.js";
import "./chunk-V65JFJHR.js";
import "./chunk-Y2UHC2VM.js";
import "./chunk-7APSGFF5.js";
import "./chunk-S5RFXGTW.js";
import "./chunk-7P2S6N4H.js";
import "./chunk-6PE6O23W.js";
import "./chunk-BI26XH27.js";
import "./chunk-PPY3JRDD.js";
import "./chunk-3HEHFNVB.js";
import {
  V
} from "./chunk-Z3LDBFKX.js";
import "./chunk-Y4FK2QML.js";
import "./chunk-V2A2K5J6.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import "./chunk-7KNADJUA.js";
import "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import "./chunk-FQ2MMUPL.js";
import {
  h,
  l
} from "./chunk-FQMVGWVJ.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-2IPRPVVF.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-OICH3FD6.js";
import "./chunk-DNUHV7J4.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import {
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2 as a
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import "./chunk-QPWNDO2C.js";
import "./chunk-CA2PXGXL.js";
import "./chunk-RXTTOJU7.js";
import "./chunk-4HAMAX2C.js";
import "./chunk-3QT5L2OK.js";
import "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import {
  R
} from "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var y2 = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var k = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var v = { graphic: null, property: null, oldValue: null, newValue: null };
function M(t) {
  return t instanceof m || t instanceof c || t instanceof C || t instanceof T || t instanceof j || t instanceof S || t instanceof O;
}
function V2(t) {
  return V.isCollection(t) && t.length && M(t.at(0));
}
function j2(t) {
  return Array.isArray(t) && t.length > 0 && M(t[0]);
}
var G = class extends f(d) {
  constructor() {
    super(...arguments), this._graphics = new V(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map();
  }
  get _routeItems() {
    return new n({ getCollections: () => null == this.layer || this.destroyed ? [] : [null != this.layer.routeInfo ? new V([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] });
  }
  initialize() {
    this.updatingHandles.addOnCollectionChange(() => this._routeItems, (t) => this._routeItemsChanged(t), h);
  }
  destroy() {
    var _a;
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), (_a = this._get("_routeItems")) == null ? void 0 : _a.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView();
  }
  async fetchPopupFeatures(t) {
    return this._graphicsView.hitTest(t).filter((t2) => !!t2.popupTemplate);
  }
  highlight(t) {
    let r;
    r = M(t) ? [this._getNetworkFeatureUid(t)] : j2(t) ? t.map((t2) => this._getNetworkFeatureUid(t2)) : V2(t) ? t.map((t2) => this._getNetworkFeatureUid(t2)).toArray() : [t.uid];
    const i2 = r.filter(R);
    return i2.length ? (this._addHighlight(i2), { remove: () => this._removeHighlight(i2) }) : y2;
  }
  async hitTest(t, r) {
    if (this.suspended)
      return null;
    const i2 = this._graphicsView.hitTest(t).filter(R).map((t2) => this._networkGraphicMap.get(t2));
    if (!i2.length)
      return null;
    const { layer: s } = this;
    return i2.reverse().map((e2) => ({ type: "route", layer: s, mapPoint: t, networkFeature: e2 }));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveStart() {
  }
  moveEnd() {
  }
  update(t) {
    this._graphicsView.processUpdate(t);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t) {
    for (const e2 of t)
      if (this._highlightIds.has(e2)) {
        const t2 = this._highlightIds.get(e2);
        this._highlightIds.set(e2, t2 + 1);
      } else
        this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _createGraphic(t) {
    const e2 = t.toGraphic();
    return e2.layer = this.layer, e2.sourceLayer = this.layer, e2;
  }
  _createGraphicsView() {
    const t = this.view, e2 = () => this.requestUpdate(), r = new i(t.featuresTilingScheme);
    this._graphicsView = new oe({ container: r, graphics: this._graphics, requestUpdateCallback: e2, view: t }), this.container.addChild(r), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t) {
    const e2 = this._networkGraphicMap.get(t);
    return k.indexOf(e2.type);
  }
  _getNetworkFeatureUid(t) {
    return this._networkFeatureMap.has(t) ? this._networkFeatureMap.get(t).uid : null;
  }
  _removeHighlight(t) {
    for (const e2 of t)
      if (this._highlightIds.has(e2)) {
        const t2 = this._highlightIds.get(e2) - 1;
        0 === t2 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, t2);
      }
    this._updateHighlight();
  }
  _routeItemsChanged(t) {
    if (t.removed.length) {
      this._graphics.removeMany(t.removed.map((t2) => {
        const e2 = this._networkFeatureMap.get(t2);
        return this._networkFeatureMap.delete(t2), this._networkGraphicMap.delete(e2), e2;
      }));
      for (const e2 of t.removed)
        this.removeHandles(e2);
    }
    if (t.added.length) {
      this._graphics.addMany(t.added.map((t2) => {
        const e2 = this._createGraphic(t2);
        return null == e2.symbol ? null : (this._networkFeatureMap.set(t2, e2), this._networkGraphicMap.set(e2, t2), e2);
      }).filter(R));
      for (const e2 of t.added)
        this.addHandles([l(() => e2.geometry, (t2, r) => {
          this._updateGraphic(e2, "geometry", t2, r);
        }), l(() => e2.symbol, (t2, r) => {
          this._updateGraphic(e2, "symbol", t2, r);
        })], e2);
      this._graphics.sort((t2, e2) => this._getDrawOrder(t2) - this._getDrawOrder(e2));
    }
  }
  _updateGraphic(t, e2, r, i2) {
    if (!this._networkFeatureMap.has(t)) {
      const e3 = this._createGraphic(t);
      return this._networkFeatureMap.set(t, e3), this._networkGraphicMap.set(e3, t), void this._graphics.add(e3);
    }
    const s = this._networkFeatureMap.get(t);
    s[e2] = r, v.graphic = s, v.property = e2, v.oldValue = i2, v.newValue = r, this._graphicsView.graphicUpdateHandler(v);
  }
  _updateHighlight() {
    const t = Array.from(this._highlightIds.keys());
    this._graphicsView.setHighlight(t);
  }
};
e([y()], G.prototype, "_graphics", void 0), e([y()], G.prototype, "_routeItems", null), G = e([a("esri.views.2d.layers.RouteLayerView2D")], G);
var I = G;
export {
  I as default
};
//# sourceMappingURL=RouteLayerView2D-REXOFT3F.js.map
