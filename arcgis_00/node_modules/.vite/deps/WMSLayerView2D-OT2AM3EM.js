import {
  v
} from "./chunk-JN2BGNPI.js";
import {
  a as a3
} from "./chunk-BK5IOASF.js";
import "./chunk-ZU5I6A3X.js";
import {
  a as a2
} from "./chunk-H7V7HYRJ.js";
import {
  d as d2,
  f
} from "./chunk-GJ4AX7TK.js";
import "./chunk-XGFXC7IN.js";
import "./chunk-2YLUDNP5.js";
import "./chunk-OW4XGQQP.js";
import {
  l as l3
} from "./chunk-RPVO42KG.js";
import "./chunk-MYZ743ND.js";
import "./chunk-4GVOVKVX.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-PR2OEILG.js";
import "./chunk-JKPERUTC.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-AZ4FK2MA.js";
import "./chunk-EULDPA4O.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-TBHRKIAA.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-EIIX6MK3.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-3QLIFMET.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-GTOF2BJC.js";
import "./chunk-5KLICR5E.js";
import "./chunk-OVFWVPXL.js";
import "./chunk-WNYS35QN.js";
import "./chunk-VFUAVCAY.js";
import "./chunk-VZAEQ6CY.js";
import "./chunk-SS33L3LC.js";
import "./chunk-X4Y5OF5X.js";
import "./chunk-URJC76VO.js";
import "./chunk-Y2ZDD3I4.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import "./chunk-HVBIBP5P.js";
import {
  b
} from "./chunk-LALFHQE3.js";
import "./chunk-IVCYO56U.js";
import "./chunk-JGFWZDK3.js";
import "./chunk-XMS7FYO7.js";
import "./chunk-NZY6MEON.js";
import "./chunk-Z74XNIJ3.js";
import "./chunk-GRS3EHGG.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-TNYMHVJ4.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-HABV4VZ2.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-X5ASTC4J.js";
import "./chunk-H7C32RFW.js";
import "./chunk-RNYFZDNI.js";
import "./chunk-FBG4WSP5.js";
import "./chunk-G3X4SV7G.js";
import "./chunk-AJM6LB5B.js";
import "./chunk-G4LADD2B.js";
import "./chunk-HLTEFNTE.js";
import "./chunk-CO3TM5QL.js";
import "./chunk-FARQZCLL.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import {
  M
} from "./chunk-E5XSQEGK.js";
import "./chunk-MZXYP6SL.js";
import "./chunk-4X5MDDUC.js";
import "./chunk-UURR7HU3.js";
import "./chunk-JLE6P4DW.js";
import {
  l as l2
} from "./chunk-F3SBJW2O.js";
import "./chunk-YVCC2Z32.js";
import "./chunk-YC3PYTAZ.js";
import "./chunk-VPF2CM6B.js";
import "./chunk-JCWF5RB4.js";
import {
  y
} from "./chunk-TBBTJ7N4.js";
import "./chunk-NUI5LCQ5.js";
import {
  a2 as a
} from "./chunk-AS7ITRBV.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SF7FIURP.js";
import "./chunk-TXAS6RAG.js";
import {
  d
} from "./chunk-G72U56FP.js";
import {
  l
} from "./chunk-DWOEYHKS.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-JGYHKABU.js";
import "./chunk-3FXB2ZFK.js";
import "./chunk-WQNVH5M4.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/layers/WMSLayerView.js
var i = (i2) => {
  let m = class extends i2 {
    initialize() {
      this.exportImageParameters = new l3({ layer: this.layer });
    }
    destroy() {
      this.exportImageParameters = l(this.exportImageParameters);
    }
    get exportImageVersion() {
      var _a;
      return (_a = this.exportImageParameters) == null ? void 0 : _a.commitProperty("version"), this.commitProperty("timeExtent"), (this._get("exportImageVersion") || 0) + 1;
    }
    fetchPopupFeatures(e2) {
      const { layer: t } = this;
      if (!e2)
        return Promise.reject(new s2("wmslayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: t }));
      const { popupEnabled: o } = t;
      if (!o)
        return Promise.reject(new s2("wmslayerview:fetchPopupFeatures", "popupEnabled should be true", { popupEnabled: o }));
      const s3 = this.createFetchPopupFeaturesQuery(e2);
      if (!s3)
        return Promise.resolve([]);
      const { extent: p, width: a4, height: i3, x: m2, y: n } = s3;
      if (!(p && a4 && i3))
        throw new s2("wmslayerview:fetchPopupFeatures", "WMSLayer does not support fetching features.", { extent: p, width: a4, height: i3 });
      return t.fetchFeatureInfo(p, a4, i3, m2, n);
    }
  };
  return e([y()], m.prototype, "exportImageParameters", void 0), e([y({ readOnly: true })], m.prototype, "exportImageVersion", null), e([y()], m.prototype, "layer", void 0), e([y(b)], m.prototype, "timeExtent", void 0), m = e([a("esri.layers.mixins.WMSLayerView")], m), m;
};

// node_modules/@arcgis/core/views/2d/layers/WMSLayerView2D.js
var y2 = class extends i(a2(f(d2))) {
  constructor() {
    super(...arguments), this.bitmapContainer = new a3();
  }
  supportsSpatialReference(e2) {
    return this.layer.serviceSupportsSpatialReference(e2);
  }
  update(e2) {
    this.strategy.update(e2).catch((e3) => {
      d(e3) || s.getLogger(this).error(e3);
    });
  }
  attach() {
    const { layer: e2 } = this, { imageMaxHeight: t, imageMaxWidth: r } = e2;
    this.bitmapContainer = new a3(), this.container.addChild(this.bitmapContainer), this.strategy = new v({ container: this.bitmapContainer, fetchSource: this.fetchImage.bind(this), requestUpdate: this.requestUpdate.bind(this), imageMaxHeight: t, imageMaxWidth: r, imageRotationSupported: false, imageNormalizationSupported: false, hidpi: false }), this.addAttachHandles(l2(() => this.exportImageVersion, () => this.requestUpdate()));
  }
  detach() {
    this.strategy = l(this.strategy), this.container.removeAllChildren();
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  createFetchPopupFeaturesQuery(e2) {
    const { view: t, bitmapContainer: r } = this, { x: i2, y: s3 } = e2, { spatialReference: a4 } = t;
    let o, n = 0, m = 0;
    if (r.children.some((e3) => {
      const { width: t2, height: r2, resolution: h2, x: c2, y: d4 } = e3, u = c2 + h2 * t2, y3 = d4 - h2 * r2;
      return i2 >= c2 && i2 <= u && s3 <= d4 && s3 >= y3 && (o = new M({ xmin: c2, ymin: y3, xmax: u, ymax: d4, spatialReference: a4 }), n = t2, m = r2, true);
    }), !o)
      return null;
    const h = o.width / n, c = Math.round((i2 - o.xmin) / h), d3 = Math.round((o.ymax - s3) / h);
    return { extent: o, width: n, height: m, x: c, y: d3 };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  fetchImage(e2, t, r, i2) {
    return this.layer.fetchImageBitmap(e2, t, r, { timeExtent: this.timeExtent, ...i2 });
  }
};
e([y()], y2.prototype, "strategy", void 0), e([y()], y2.prototype, "updating", void 0), y2 = e([a("esri.views.2d.layers.WMSLayerView2D")], y2);
var g = y2;
export {
  g as default
};
//# sourceMappingURL=WMSLayerView2D-OT2AM3EM.js.map
