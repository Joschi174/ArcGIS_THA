import {
  p
} from "./chunk-QRO5NJB4.js";
import {
  f,
  i,
  s as s2
} from "./chunk-3YWKHS6T.js";
import "./chunk-O6HKLIZS.js";
import "./chunk-DUGCD7YI.js";
import "./chunk-3CMERT4A.js";
import "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import {
  j
} from "./chunk-QPWNDO2C.js";
import "./chunk-CA2PXGXL.js";
import "./chunk-RXTTOJU7.js";
import "./chunk-4HAMAX2C.js";
import "./chunk-3QT5L2OK.js";
import {
  s3 as s
} from "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/rest/networks/validateNetworkTopology.js
async function a(o, a2, n2) {
  var _a;
  const d = f(o), l = a2.toJSON();
  a2.validationSet && (l.validationSet = JSON.stringify(a2.validationSet));
  const u = { ...l, returnEdits: true, f: "json" }, p2 = s2({ ...d.query, ...u }), m = i(p2, { ...n2, method: "post" }), v = `${d.path}/validateNetworkTopology`, { data: y } = await j(v, m), c = p.fromJSON(y);
  return c.serviceEdits = ((_a = c.serviceEdits) == null ? void 0 : _a.map((t) => ({ layerId: t.id, editedFeatures: t.editedFeatures }))) ?? [], c;
}
async function n(s3, a2, n2) {
  if (!a2.gdbVersion)
    throw new s("submit-validate-network-topology-job:missing-gdb-version", "version is missing");
  const d = f(s3), l = a2.toJSON();
  a2.validationSet && (l.validationSet = JSON.stringify(a2.validationSet));
  const u = i(d.query, { query: s2({ ...l, returnEdits: true, async: true, f: "json" }), ...n2, method: "post" }), p2 = `${d.path}/validateNetworkTopology`, { data: m } = await j(p2, u);
  return m ? m.statusUrl : null;
}
export {
  n as submitValidateNetworkTopologyJob,
  a as validateNetworkTopology
};
//# sourceMappingURL=validateNetworkTopology-SXT3GURK.js.map
