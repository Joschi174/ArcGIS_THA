import {
  j as j2
} from "./chunk-M6X4HWGZ.js";
import {
  p
} from "./chunk-OGDE7T5O.js";
import {
  a as a2
} from "./chunk-62JUI7PG.js";
import "./chunk-2DUFLNG7.js";
import "./chunk-T2F2N6HP.js";
import {
  t
} from "./chunk-7N54VP3N.js";
import {
  c as c2
} from "./chunk-UQH37OH4.js";
import {
  O
} from "./chunk-VCOABNMG.js";
import {
  c,
  f as f2,
  v
} from "./chunk-HJI3BY6O.js";
import "./chunk-6VMHQJDC.js";
import "./chunk-WDH5YZUJ.js";
import "./chunk-5NTMYKFL.js";
import {
  b
} from "./chunk-ZZC3B6AH.js";
import "./chunk-OB7XGIVW.js";
import {
  S2 as S,
  m,
  n,
  y as y2
} from "./chunk-TOTT47W3.js";
import "./chunk-WYSOLO6F.js";
import "./chunk-DSRRGXQP.js";
import "./chunk-6WLIVBPN.js";
import {
  a as a3
} from "./chunk-WAWVWQWY.js";
import "./chunk-7XK4IPKN.js";
import "./chunk-3S6PFVBD.js";
import "./chunk-A7HIXRLM.js";
import "./chunk-IJCLSAKS.js";
import "./chunk-HXG3EAGH.js";
import "./chunk-KZ7KT6JL.js";
import "./chunk-PSEOYXGU.js";
import "./chunk-PDYDTTO6.js";
import "./chunk-V65JFJHR.js";
import "./chunk-Y2UHC2VM.js";
import "./chunk-7APSGFF5.js";
import "./chunk-S5RFXGTW.js";
import "./chunk-JQTIJ5DI.js";
import "./chunk-7P2S6N4H.js";
import "./chunk-6PE6O23W.js";
import "./chunk-BI26XH27.js";
import "./chunk-PPY3JRDD.js";
import "./chunk-3HEHFNVB.js";
import "./chunk-Z3LDBFKX.js";
import "./chunk-A4SZU67B.js";
import "./chunk-V2A2K5J6.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import {
  M
} from "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import {
  o
} from "./chunk-7KNADJUA.js";
import {
  u
} from "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-OICH3FD6.js";
import "./chunk-DNUHV7J4.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import {
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2 as a
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import {
  j
} from "./chunk-QPWNDO2C.js";
import "./chunk-CA2PXGXL.js";
import {
  Ct
} from "./chunk-RXTTOJU7.js";
import {
  f
} from "./chunk-4HAMAX2C.js";
import "./chunk-3QT5L2OK.js";
import {
  s
} from "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/layers/GeoRSSLayer.js
var G = ["atom", "xml"];
var L = { base: a3, key: "type", typeMap: { "simple-line": m }, errorContext: "symbol" };
var R = { base: a3, key: "type", typeMap: { "picture-marker": n, "simple-marker": y2 }, errorContext: "symbol" };
var k = { base: a3, key: "type", typeMap: { "simple-fill": S }, errorContext: "symbol" };
var _ = class extends a2(p(c2(j2(t(O(b)))))) {
  constructor(...e2) {
    super(...e2), this.description = null, this.fullExtent = null, this.legendEnabled = true, this.lineSymbol = null, this.pointSymbol = null, this.polygonSymbol = null, this.operationalLayerType = "GeoRSS", this.url = null, this.type = "geo-rss";
  }
  normalizeCtorArgs(e2, o2) {
    return "string" == typeof e2 ? { url: e2, ...o2 } : e2;
  }
  readFeatureCollections(e2, o2) {
    return o2.featureCollection.layers.forEach((e3) => {
      var _a;
      const o3 = e3.layerDefinition.drawingInfo.renderer.symbol;
      o3 && "esriSFS" === o3.type && ((_a = o3.outline) == null ? void 0 : _a.style.includes("esriSFS")) && (o3.outline.style = "esriSLSSolid");
    }), o2.featureCollection.layers;
  }
  get hasPoints() {
    return this._hasGeometry("esriGeometryPoint");
  }
  get hasPolylines() {
    return this._hasGeometry("esriGeometryPolyline");
  }
  get hasPolygons() {
    return this._hasGeometry("esriGeometryPolygon");
  }
  get title() {
    const e2 = this._get("title");
    return e2 && "defaults" !== this.originOf("title") ? e2 : this.url ? Ct(this.url, G) || "GeoRSS" : e2 || "";
  }
  set title(e2) {
    this._set("title", e2);
  }
  load(e2) {
    const o2 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service", "Feature Service", "Feature Collection", "Scene Service"] }, e2).catch(f).then(() => this._fetchService(o2)).then((e3) => {
      this.read(e3, { origin: "service" });
    })), Promise.resolve(this);
  }
  async hasDataChanged() {
    const e2 = await this._fetchService();
    return this.read(e2, { origin: "service", ignoreDefaults: true }), true;
  }
  async _fetchService(e2) {
    const t2 = this.spatialReference, { data: s2 } = await j(s.geoRSSServiceUrl, { query: { url: this.url, refresh: !!this.loaded || void 0, outSR: u(t2) ? void 0 : t2.wkid ?? JSON.stringify(t2) }, signal: e2 });
    return s2;
  }
  _hasGeometry(e2) {
    var _a;
    return ((_a = this.featureCollections) == null ? void 0 : _a.some((o2) => {
      var _a2, _b;
      return ((_a2 = o2.featureSet) == null ? void 0 : _a2.geometryType) === e2 && ((_b = o2.featureSet.features) == null ? void 0 : _b.length) > 0;
    })) ?? false;
  }
};
e([y()], _.prototype, "description", void 0), e([y()], _.prototype, "featureCollections", void 0), e([o("service", "featureCollections", ["featureCollection.layers"])], _.prototype, "readFeatureCollections", null), e([y({ type: M, json: { name: "lookAtExtent" } })], _.prototype, "fullExtent", void 0), e([y(v)], _.prototype, "id", void 0), e([y(c)], _.prototype, "legendEnabled", void 0), e([y({ types: L, json: { write: true } })], _.prototype, "lineSymbol", void 0), e([y({ type: ["show", "hide"] })], _.prototype, "listMode", void 0), e([y({ types: R, json: { write: true } })], _.prototype, "pointSymbol", void 0), e([y({ types: k, json: { write: true } })], _.prototype, "polygonSymbol", void 0), e([y({ type: ["GeoRSS"] })], _.prototype, "operationalLayerType", void 0), e([y(f2)], _.prototype, "url", void 0), e([y({ json: { origins: { service: { read: { source: "name", reader: (e2) => e2 || void 0 } } } } })], _.prototype, "title", null), e([y({ readOnly: true, json: { read: false }, value: "geo-rss" })], _.prototype, "type", void 0), _ = e([a("esri.layers.GeoRSSLayer")], _);
var w = _;
export {
  w as default
};
//# sourceMappingURL=GeoRSSLayer-GLSLJJG3.js.map
