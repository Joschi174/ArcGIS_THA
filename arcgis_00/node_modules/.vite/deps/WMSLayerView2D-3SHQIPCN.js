import {
  v
} from "./chunk-L7XSNV35.js";
import {
  a as a3
} from "./chunk-KOHZ4EMT.js";
import {
  a as a2
} from "./chunk-JGSTWD77.js";
import "./chunk-XR3IIQGY.js";
import {
  d as d2,
  f
} from "./chunk-5DXEWH5V.js";
import "./chunk-UFN7ZNFK.js";
import "./chunk-K54BRHUJ.js";
import "./chunk-YICPXMG7.js";
import {
  l as l3
} from "./chunk-CVGUCTND.js";
import "./chunk-VGWIRN5T.js";
import "./chunk-R3N6YXZV.js";
import "./chunk-O3TVUDAA.js";
import "./chunk-Q2D4AWJS.js";
import "./chunk-IOMDA26A.js";
import "./chunk-D7PFANSX.js";
import "./chunk-C6XOMDEV.js";
import "./chunk-BCTQLMHE.js";
import "./chunk-Z3XU4R74.js";
import "./chunk-INNSNI53.js";
import "./chunk-IL355RAY.js";
import "./chunk-3V3OLLRL.js";
import "./chunk-WD44CU6B.js";
import "./chunk-HXF46NPP.js";
import "./chunk-WD6NUK3A.js";
import "./chunk-GZLGPJT5.js";
import "./chunk-XBCX74QQ.js";
import "./chunk-NUGAWFAM.js";
import "./chunk-KBZKT5PQ.js";
import "./chunk-T2F2N6HP.js";
import {
  b
} from "./chunk-HJI3BY6O.js";
import "./chunk-WDH5YZUJ.js";
import "./chunk-5NTMYKFL.js";
import "./chunk-SBPJCNL2.js";
import "./chunk-TEW7IDMC.js";
import "./chunk-OSAR3X5M.js";
import "./chunk-LE46LW35.js";
import "./chunk-DESQE75S.js";
import "./chunk-KE5B3PMZ.js";
import "./chunk-2QUCKFNX.js";
import "./chunk-K7U6HDB6.js";
import "./chunk-64B6H5RV.js";
import "./chunk-3ECTZ67D.js";
import "./chunk-WHFPT3MI.js";
import "./chunk-Z7ID6LQT.js";
import "./chunk-PD7VSZGS.js";
import "./chunk-2FJNU644.js";
import "./chunk-DSRRGXQP.js";
import "./chunk-6WLIVBPN.js";
import "./chunk-7XK4IPKN.js";
import "./chunk-3S6PFVBD.js";
import "./chunk-A7HIXRLM.js";
import "./chunk-HXG3EAGH.js";
import "./chunk-KZ7KT6JL.js";
import "./chunk-PSEOYXGU.js";
import "./chunk-V65JFJHR.js";
import "./chunk-7APSGFF5.js";
import "./chunk-3HEHFNVB.js";
import "./chunk-Z3LDBFKX.js";
import "./chunk-A4SZU67B.js";
import "./chunk-Y4FK2QML.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import {
  M
} from "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import "./chunk-7KNADJUA.js";
import "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import {
  l as l2
} from "./chunk-FQMVGWVJ.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import {
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2 as a
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import "./chunk-RXTTOJU7.js";
import {
  d
} from "./chunk-4HAMAX2C.js";
import {
  l
} from "./chunk-3QT5L2OK.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/layers/WMSLayerView.js
var i = (i2) => {
  let m = class extends i2 {
    initialize() {
      this.exportImageParameters = new l3({ layer: this.layer });
    }
    destroy() {
      this.exportImageParameters = l(this.exportImageParameters);
    }
    get exportImageVersion() {
      var _a;
      return (_a = this.exportImageParameters) == null ? void 0 : _a.commitProperty("version"), this.commitProperty("timeExtent"), (this._get("exportImageVersion") || 0) + 1;
    }
    fetchPopupFeatures(e2) {
      const { layer: t } = this;
      if (!e2)
        return Promise.reject(new s2("wmslayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: t }));
      const { popupEnabled: o } = t;
      if (!o)
        return Promise.reject(new s2("wmslayerview:fetchPopupFeatures", "popupEnabled should be true", { popupEnabled: o }));
      const s3 = this.createFetchPopupFeaturesQuery(e2);
      if (!s3)
        return Promise.resolve([]);
      const { extent: p, width: a4, height: i3, x: m2, y: n } = s3;
      if (!(p && a4 && i3))
        throw new s2("wmslayerview:fetchPopupFeatures", "WMSLayer does not support fetching features.", { extent: p, width: a4, height: i3 });
      return t.fetchFeatureInfo(p, a4, i3, m2, n);
    }
  };
  return e([y()], m.prototype, "exportImageParameters", void 0), e([y({ readOnly: true })], m.prototype, "exportImageVersion", null), e([y()], m.prototype, "layer", void 0), e([y(b)], m.prototype, "timeExtent", void 0), m = e([a("esri.layers.mixins.WMSLayerView")], m), m;
};

// node_modules/@arcgis/core/views/2d/layers/WMSLayerView2D.js
var y2 = class extends i(a2(f(d2))) {
  constructor() {
    super(...arguments), this.bitmapContainer = new a3();
  }
  supportsSpatialReference(e2) {
    return this.layer.serviceSupportsSpatialReference(e2);
  }
  update(e2) {
    this.strategy.update(e2).catch((e3) => {
      d(e3) || s.getLogger(this).error(e3);
    });
  }
  attach() {
    const { layer: e2 } = this, { imageMaxHeight: t, imageMaxWidth: r } = e2;
    this.bitmapContainer = new a3(), this.container.addChild(this.bitmapContainer), this.strategy = new v({ container: this.bitmapContainer, fetchSource: this.fetchImage.bind(this), requestUpdate: this.requestUpdate.bind(this), imageMaxHeight: t, imageMaxWidth: r, imageRotationSupported: false, imageNormalizationSupported: false, hidpi: false }), this.addAttachHandles(l2(() => this.exportImageVersion, () => this.requestUpdate()));
  }
  detach() {
    this.strategy = l(this.strategy), this.container.removeAllChildren();
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  createFetchPopupFeaturesQuery(e2) {
    const { view: t, bitmapContainer: r } = this, { x: i2, y: s3 } = e2, { spatialReference: a4 } = t;
    let o, n = 0, m = 0;
    if (r.children.some((e3) => {
      const { width: t2, height: r2, resolution: h2, x: c2, y: d4 } = e3, u = c2 + h2 * t2, y3 = d4 - h2 * r2;
      return i2 >= c2 && i2 <= u && s3 <= d4 && s3 >= y3 && (o = new M({ xmin: c2, ymin: y3, xmax: u, ymax: d4, spatialReference: a4 }), n = t2, m = r2, true);
    }), !o)
      return null;
    const h = o.width / n, c = Math.round((i2 - o.xmin) / h), d3 = Math.round((o.ymax - s3) / h);
    return { extent: o, width: n, height: m, x: c, y: d3 };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  fetchImage(e2, t, r, i2) {
    return this.layer.fetchImageBitmap(e2, t, r, { timeExtent: this.timeExtent, ...i2 });
  }
};
e([y()], y2.prototype, "strategy", void 0), e([y()], y2.prototype, "updating", void 0), y2 = e([a("esri.views.2d.layers.WMSLayerView2D")], y2);
var g = y2;
export {
  g as default
};
//# sourceMappingURL=WMSLayerView2D-3SHQIPCN.js.map
