import {
  T
} from "./chunk-MQJGQBQG.js";
import "./chunk-GD4GJCPA.js";
import "./chunk-HZ5YIPSY.js";
import "./chunk-LRYJOXUI.js";
import "./chunk-3XOSWHEZ.js";
import "./chunk-2CQBXY7G.js";
import "./chunk-AYMF6OMA.js";
import "./chunk-AEPMR2T7.js";
import "./chunk-EF6YPOUN.js";
import "./chunk-FJXAEGHD.js";
import {
  h
} from "./chunk-N4TMSSSQ.js";
import "./chunk-SS33L3LC.js";
import "./chunk-X4Y5OF5X.js";
import "./chunk-GZTLZ6RD.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-2D2437VM.js";
import "./chunk-YIIAB4WA.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-FUHI6TR6.js";
import "./chunk-3OL5L3LC.js";
import "./chunk-G4LADD2B.js";
import "./chunk-CO3TM5QL.js";
import "./chunk-FARQZCLL.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-E5XSQEGK.js";
import "./chunk-MZXYP6SL.js";
import "./chunk-4X5MDDUC.js";
import "./chunk-UURR7HU3.js";
import "./chunk-JLE6P4DW.js";
import "./chunk-46JSCFRH.js";
import "./chunk-VPF2CM6B.js";
import "./chunk-JCWF5RB4.js";
import "./chunk-TBBTJ7N4.js";
import "./chunk-NUI5LCQ5.js";
import "./chunk-AS7ITRBV.js";
import "./chunk-PD5Q7TDW.js";
import "./chunk-SF7FIURP.js";
import "./chunk-K7YQIZQM.js";
import "./chunk-H3ETM4DZ.js";
import "./chunk-TXAS6RAG.js";
import "./chunk-G72U56FP.js";
import "./chunk-DWOEYHKS.js";
import "./chunk-JGYHKABU.js";
import "./chunk-3FXB2ZFK.js";
import {
  has
} from "./chunk-WQNVH5M4.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/ElevationSamplerWorker.js
var r = class {
  async createIndex(t, r2) {
    const n2 = new Array();
    if (!t.vertexAttributes || !t.vertexAttributes.position)
      return new h();
    const o = this._createMeshData(t), s = null != r2 ? await r2.invoke("createIndexThread", o, { transferList: n2 }) : this.createIndexThread(o).result;
    return this._createPooledRBush().fromJSON(s);
  }
  createIndexThread(e) {
    const t = new Float64Array(e.position), r2 = this._createPooledRBush();
    return e.components ? this._createIndexComponentsThread(r2, t, e.components.map((e2) => new Uint32Array(e2))) : this._createIndexAllThread(r2, t);
  }
  _createIndexAllThread(e, t) {
    const r2 = new Array(t.length / 9);
    let o = 0;
    for (let s = 0; s < t.length; s += 9)
      r2[o++] = n(t, s, s + 3, s + 6);
    return e.load(r2), { result: e.toJSON() };
  }
  _createIndexComponentsThread(e, t, r2) {
    let o = 0;
    for (const n2 of r2)
      o += n2.length / 3;
    const s = new Array(o);
    let a = 0;
    for (const i of r2)
      for (let e2 = 0; e2 < i.length; e2 += 3)
        s[a++] = n(t, 3 * i[e2], 3 * i[e2 + 1], 3 * i[e2 + 2]);
    return e.load(s), { result: e.toJSON() };
  }
  _createMeshData(e) {
    const r2 = (e.vertexSpace.isRelative ? T({ position: e.vertexAttributes.position, normal: null, tangent: null }, e.vertexSpace, e.transform, e.spatialReference).position : e.vertexAttributes.position).buffer;
    return !e.components || e.components.some((e2) => !e2.faces) ? { position: r2 } : { position: r2, components: e.components.map((e2) => e2.faces) };
  }
  _createPooledRBush() {
    return new h(9, has("esri-csp-restrictions") ? (e) => e : [".minX", ".minY", ".maxX", ".maxY"]);
  }
};
function n(e, t, r2, n2) {
  return { minX: Math.min(e[t], e[r2], e[n2]), maxX: Math.max(e[t], e[r2], e[n2]), minY: Math.min(e[t + 1], e[r2 + 1], e[n2 + 1]), maxY: Math.max(e[t + 1], e[r2 + 1], e[n2 + 1]), p0: [e[t], e[t + 1], e[t + 2]], p1: [e[r2], e[r2 + 1], e[r2 + 2]], p2: [e[n2], e[n2 + 1], e[n2 + 2]] };
}
export {
  r as default
};
//# sourceMappingURL=ElevationSamplerWorker-VCFKOXG7.js.map
