import {
  n,
  t
} from "./chunk-C7IHTFLT.js";
import "./chunk-GD3LP3EF.js";
import "./chunk-ZU5I6A3X.js";
import {
  a as a2
} from "./chunk-H7V7HYRJ.js";
import {
  d as d2,
  f
} from "./chunk-GJ4AX7TK.js";
import "./chunk-SS7JZLQV.js";
import "./chunk-XQSFOYTA.js";
import "./chunk-XGFXC7IN.js";
import "./chunk-2YLUDNP5.js";
import "./chunk-OW4XGQQP.js";
import "./chunk-MYZ743ND.js";
import "./chunk-4GVOVKVX.js";
import "./chunk-AER5JAFS.js";
import "./chunk-7HZ72XIE.js";
import "./chunk-NVZXNBIH.js";
import "./chunk-PR2OEILG.js";
import "./chunk-JKPERUTC.js";
import "./chunk-A4HFWKMU.js";
import "./chunk-TDXHXKUI.js";
import "./chunk-AZ4FK2MA.js";
import "./chunk-EULDPA4O.js";
import "./chunk-IVABPLLZ.js";
import "./chunk-TBHRKIAA.js";
import "./chunk-FF5LS3YE.js";
import "./chunk-BCDDCNQ2.js";
import "./chunk-EIIX6MK3.js";
import "./chunk-WTKN55TU.js";
import "./chunk-TDPKDZC3.js";
import "./chunk-M5UHI5WR.js";
import "./chunk-3QLIFMET.js";
import "./chunk-D5NSNTGJ.js";
import "./chunk-GTOF2BJC.js";
import {
  r
} from "./chunk-A7XI44IB.js";
import {
  y as y2
} from "./chunk-R7L5PZPI.js";
import "./chunk-5KLICR5E.js";
import "./chunk-CKSC27NP.js";
import {
  h
} from "./chunk-OVFWVPXL.js";
import "./chunk-WNYS35QN.js";
import {
  e as e2
} from "./chunk-VFUAVCAY.js";
import "./chunk-VZAEQ6CY.js";
import "./chunk-SS33L3LC.js";
import "./chunk-X4Y5OF5X.js";
import "./chunk-SCOBW7KR.js";
import "./chunk-AHAGGZUI.js";
import "./chunk-HVBIBP5P.js";
import "./chunk-6L4U2AW6.js";
import "./chunk-XMS7FYO7.js";
import "./chunk-NZY6MEON.js";
import "./chunk-Z74XNIJ3.js";
import "./chunk-Y2CLYMXQ.js";
import "./chunk-EIE3W25Z.js";
import "./chunk-OZXJDVTE.js";
import "./chunk-KTSEQWMB.js";
import "./chunk-X5ASTC4J.js";
import "./chunk-RNYFZDNI.js";
import "./chunk-FBG4WSP5.js";
import "./chunk-G3X4SV7G.js";
import "./chunk-AJM6LB5B.js";
import "./chunk-G4LADD2B.js";
import "./chunk-HLTEFNTE.js";
import "./chunk-CO3TM5QL.js";
import "./chunk-FARQZCLL.js";
import "./chunk-MOPR7RFH.js";
import "./chunk-KW3ZNPTA.js";
import "./chunk-TJB4CGOM.js";
import "./chunk-E5XSQEGK.js";
import "./chunk-MZXYP6SL.js";
import {
  S2 as S
} from "./chunk-4X5MDDUC.js";
import "./chunk-UURR7HU3.js";
import "./chunk-JLE6P4DW.js";
import {
  l
} from "./chunk-F3SBJW2O.js";
import "./chunk-YVCC2Z32.js";
import "./chunk-YC3PYTAZ.js";
import "./chunk-VPF2CM6B.js";
import "./chunk-JCWF5RB4.js";
import {
  y
} from "./chunk-TBBTJ7N4.js";
import "./chunk-NUI5LCQ5.js";
import {
  a2 as a
} from "./chunk-AS7ITRBV.js";
import {
  e
} from "./chunk-PD5Q7TDW.js";
import "./chunk-SF7FIURP.js";
import {
  d
} from "./chunk-G72U56FP.js";
import "./chunk-DWOEYHKS.js";
import {
  s2 as s
} from "./chunk-JGYHKABU.js";
import "./chunk-3FXB2ZFK.js";
import "./chunk-WQNVH5M4.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/WMTSLayerView2D.js
var d3 = [102113, 102100, 3857, 3785, 900913];
var _ = [0, 0];
var w = class extends a2(t(f(d2))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this._tileRequests = /* @__PURE__ */ new Map(), this.layer = null;
  }
  get tileMatrixSet() {
    const e3 = this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);
    return e3 ? (e3.id !== this.layer.activeLayer.tileMatrixSetId && (this.layer.activeLayer.tileMatrixSetId = e3.id), e3) : null;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume();
  }
  attach() {
    var _a;
    const e3 = (_a = this.tileMatrixSet) == null ? void 0 : _a.tileInfo;
    e3 && (this._tileInfoView = new h(e3), this._fetchQueue = new y2({ tileInfoView: this._tileInfoView, concurrency: 16, process: (e4, t2) => this.fetchTile(e4, t2) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: true, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), this.addAttachHandles(l(() => {
      var _a2, _b;
      return [(_b = (_a2 = this.layer) == null ? void 0 : _a2.activeLayer) == null ? void 0 : _b.styleId, this.tileMatrixSet];
    }, () => this._refresh())), super.attach());
  }
  detach() {
    var _a, _b;
    super.detach(), (_a = this._tileStrategy) == null ? void 0 : _a.destroy(), (_b = this._fetchQueue) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  acquireTile(e3) {
    const t2 = this._bitmapView.createTile(e3), i = t2.bitmap;
    return [i.x, i.y] = this._tileInfoView.getTileCoords(_, t2.key), i.resolution = this._tileInfoView.getTileResolution(t2.key), [i.width, i.height] = this._tileInfoView.tileInfo.size, this._enqueueTileFetch(t2), this._bitmapView.addChild(t2), this.requestUpdate(), t2;
  }
  async doRefresh() {
    !this.attached || this.updateRequested || this.suspended || this._refresh();
  }
  isUpdating() {
    var _a;
    return ((_a = this._fetchQueue) == null ? void 0 : _a.updating) ?? false;
  }
  async fetchTile(e3, t2 = {}) {
    const s2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r2, resamplingLevel: a3 = 0 } = t2;
    if (!s2)
      return this._fetchImage(e3, r2);
    const l2 = new e2(0, 0, 0, 0);
    let o;
    try {
      await s2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l2, { signal: r2 }), o = await this._fetchImage(l2, r2);
    } catch (h2) {
      if (d(h2))
        throw h2;
      if (a3 < 3) {
        const i = this._tileInfoView.getTileParentId(e3.id);
        if (i) {
          const s3 = new e2(i), r3 = await this.fetchTile(s3, { ...t2, resamplingLevel: a3 + 1 });
          return n(this._tileInfoView, r3, s3, e3);
        }
      }
      throw h2;
    }
    return n(this._tileInfoView, o, l2, e3);
  }
  canResume() {
    const e3 = super.canResume();
    return e3 ? null !== this.tileMatrixSet : e3;
  }
  supportsSpatialReference(e3) {
    var _a;
    return ((_a = this.layer.activeLayer.tileMatrixSets) == null ? void 0 : _a.some((t2) => {
      var _a2;
      return S((_a2 = t2.tileInfo) == null ? void 0 : _a2.spatialReference, e3);
    })) ?? false;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t2 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t2, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (s2) {
        d(s2) || s.getLogger(this).error(s2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t2) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: t2 });
  }
  _refresh() {
    this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => {
      if (!e3.bitmap.source)
        return;
      const t2 = { id: e3.key.id, fulfilled: false, promise: this._fetchQueue.push(e3.key).then((t3) => {
        e3.bitmap.source = t3;
      }).catch((t3) => {
        d(t3) || (e3.bitmap.source = null);
      }).finally(() => {
        e3.requestRender(), t2.fulfilled = true;
      }) };
      this._tileRequests.set(e3, t2);
    });
  }
  _getTileMatrixSetBySpatialReference(e3) {
    const t2 = this.view.spatialReference;
    if (!e3.tileMatrixSets)
      return null;
    let i = e3.tileMatrixSets.find((e4) => {
      var _a;
      return S((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference, t2);
    });
    return !i && t2.isWebMercator && (i = e3.tileMatrixSets.find((e4) => {
      var _a;
      return d3.includes(((_a = e4.tileInfo) == null ? void 0 : _a.spatialReference.wkid) ?? -1);
    })), i;
  }
};
e([y()], w.prototype, "_fetchQueue", void 0), e([y({ readOnly: true })], w.prototype, "tileMatrixSet", null), w = e([a("esri.views.2d.layers.WMTSLayerView2D")], w);
var g = w;
export {
  g as default
};
//# sourceMappingURL=WMTSLayerView2D-FVGJGWOV.js.map
