import {
  r
} from "./chunk-BXFTPABC.js";
import {
  i
} from "./chunk-76TOUYXH.js";
import "./chunk-T7OVGBEA.js";
import {
  oe
} from "./chunk-IEB6YZNM.js";
import {
  d,
  f
} from "./chunk-5DXEWH5V.js";
import "./chunk-ND34FL2W.js";
import "./chunk-IL44YAUG.js";
import "./chunk-TUZCWAFI.js";
import "./chunk-V44KDLLP.js";
import "./chunk-Z46XWZWE.js";
import "./chunk-UFN7ZNFK.js";
import {
  h as h3
} from "./chunk-K54BRHUJ.js";
import "./chunk-YICPXMG7.js";
import "./chunk-MKYYBX7M.js";
import "./chunk-VGWIRN5T.js";
import "./chunk-R3N6YXZV.js";
import "./chunk-O3TVUDAA.js";
import "./chunk-Q2D4AWJS.js";
import "./chunk-46OTPSVO.js";
import "./chunk-2GLJOVSV.js";
import "./chunk-C454H62Q.js";
import "./chunk-B57TE7LC.js";
import "./chunk-SRNTZ5YK.js";
import "./chunk-CQ6LDXRQ.js";
import "./chunk-66V6VC6G.js";
import "./chunk-IOMDA26A.js";
import "./chunk-3Q24STUY.js";
import "./chunk-PORVB4YW.js";
import "./chunk-6W4QNETY.js";
import "./chunk-SKZVSZDU.js";
import "./chunk-2QRPHNFJ.js";
import "./chunk-RHYB7TAK.js";
import "./chunk-L3YUDCKP.js";
import "./chunk-INPPJTIQ.js";
import "./chunk-6VFZXUIR.js";
import "./chunk-D7PFANSX.js";
import "./chunk-C6XOMDEV.js";
import "./chunk-BCTQLMHE.js";
import "./chunk-Z3XU4R74.js";
import "./chunk-SGIIR6RJ.js";
import "./chunk-INNSNI53.js";
import "./chunk-5NQNQAAW.js";
import "./chunk-KEJOWWPH.js";
import "./chunk-Q5R4SEKK.js";
import "./chunk-IL355RAY.js";
import "./chunk-3V3OLLRL.js";
import "./chunk-WD44CU6B.js";
import "./chunk-HXF46NPP.js";
import "./chunk-WD6NUK3A.js";
import "./chunk-TNVCH3GU.js";
import "./chunk-K5MRFCR6.js";
import "./chunk-UNQFOAUX.js";
import "./chunk-GZLGPJT5.js";
import "./chunk-XBCX74QQ.js";
import "./chunk-NUGAWFAM.js";
import "./chunk-KBZKT5PQ.js";
import "./chunk-SZSPKNXB.js";
import "./chunk-BSCE3YT4.js";
import "./chunk-OBYHRJUR.js";
import "./chunk-GSCSASPY.js";
import "./chunk-UBVDHOW4.js";
import "./chunk-BLWHZOWS.js";
import "./chunk-KACQFA4U.js";
import "./chunk-XOPGXWER.js";
import "./chunk-T2F2N6HP.js";
import "./chunk-UUGV6AYJ.js";
import "./chunk-COWNIHL5.js";
import "./chunk-FAXVWHOJ.js";
import "./chunk-4RXG3COO.js";
import "./chunk-L45WQWKV.js";
import "./chunk-EWJFH5BC.js";
import "./chunk-5NTMYKFL.js";
import "./chunk-OYV6FNKL.js";
import "./chunk-HXLO7LC5.js";
import "./chunk-5YQM3GC2.js";
import "./chunk-SUKBNOSX.js";
import "./chunk-3YWKHS6T.js";
import "./chunk-SBPJCNL2.js";
import "./chunk-TEW7IDMC.js";
import "./chunk-OSAR3X5M.js";
import "./chunk-FT7S3AKB.js";
import "./chunk-LE46LW35.js";
import "./chunk-DESQE75S.js";
import "./chunk-HJXIZZJE.js";
import "./chunk-I3HK53BD.js";
import "./chunk-77MJECFF.js";
import "./chunk-CTZ7DCY5.js";
import "./chunk-QKOLWFRE.js";
import "./chunk-YM5PYJO5.js";
import "./chunk-KE5B3PMZ.js";
import "./chunk-2QUCKFNX.js";
import "./chunk-L2VQ7IPJ.js";
import "./chunk-K7U6HDB6.js";
import "./chunk-64B6H5RV.js";
import "./chunk-3ECTZ67D.js";
import "./chunk-WHFPT3MI.js";
import "./chunk-Z7ID6LQT.js";
import "./chunk-MHACI6VO.js";
import "./chunk-4QODSIJL.js";
import "./chunk-HP3XVAWO.js";
import {
  h as h2
} from "./chunk-LJQTXJLJ.js";
import "./chunk-LV4D4M7G.js";
import "./chunk-HFKPIUEB.js";
import "./chunk-OB7XGIVW.js";
import "./chunk-TOTT47W3.js";
import "./chunk-WYSOLO6F.js";
import "./chunk-DSRRGXQP.js";
import "./chunk-6WLIVBPN.js";
import "./chunk-WAWVWQWY.js";
import "./chunk-7XK4IPKN.js";
import "./chunk-3S6PFVBD.js";
import "./chunk-A7HIXRLM.js";
import "./chunk-HXG3EAGH.js";
import "./chunk-KZ7KT6JL.js";
import "./chunk-PSEOYXGU.js";
import "./chunk-PDYDTTO6.js";
import "./chunk-V65JFJHR.js";
import "./chunk-Y2UHC2VM.js";
import "./chunk-7APSGFF5.js";
import "./chunk-S5RFXGTW.js";
import "./chunk-7P2S6N4H.js";
import "./chunk-6PE6O23W.js";
import "./chunk-BI26XH27.js";
import "./chunk-PPY3JRDD.js";
import "./chunk-3HEHFNVB.js";
import {
  V
} from "./chunk-Z3LDBFKX.js";
import "./chunk-Y4FK2QML.js";
import "./chunk-V2A2K5J6.js";
import "./chunk-VEIPKRDL.js";
import "./chunk-2T74GJVJ.js";
import "./chunk-6VWXQUWW.js";
import "./chunk-WNCSTS7O.js";
import "./chunk-JU2JBJRJ.js";
import "./chunk-CBBETCDS.js";
import "./chunk-D3IA7B5F.js";
import "./chunk-RKDN5PXO.js";
import "./chunk-UILB2BFY.js";
import "./chunk-U4PYQFWE.js";
import "./chunk-FNONMLXB.js";
import "./chunk-7KNADJUA.js";
import "./chunk-NMXESCE4.js";
import "./chunk-O6HKLIZS.js";
import "./chunk-FQ2MMUPL.js";
import {
  a as a2,
  h,
  l
} from "./chunk-FQMVGWVJ.js";
import "./chunk-VXRBE6UP.js";
import "./chunk-2IPRPVVF.js";
import "./chunk-YJ7LTVO5.js";
import "./chunk-OICH3FD6.js";
import "./chunk-DNUHV7J4.js";
import "./chunk-RRCNLKGG.js";
import "./chunk-RJHZ4FSH.js";
import "./chunk-DUGCD7YI.js";
import {
  a2 as a
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import "./chunk-G5A25MBN.js";
import "./chunk-7LFT2RDJ.js";
import "./chunk-QPWNDO2C.js";
import "./chunk-CA2PXGXL.js";
import "./chunk-RXTTOJU7.js";
import "./chunk-4HAMAX2C.js";
import "./chunk-3QT5L2OK.js";
import "./chunk-5QASCMFT.js";
import "./chunk-GHZEFXB4.js";
import {
  R
} from "./chunk-5G3YEFQP.js";
import "./chunk-76J2PTFD.js";

// node_modules/@arcgis/core/views/2d/layers/MapNotesLayerView2D.js
var u = "sublayers";
var f2 = "layerView";
var m = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var w = class extends f(d) {
  constructor() {
    super(...arguments), this._highlightIds = /* @__PURE__ */ new Map(), this.container = new r();
  }
  async fetchPopupFeatures(e2) {
    return Array.from(this.graphicsViews(), (i2) => i2.hitTest(e2).filter((e3) => !!e3.popupTemplate)).flat();
  }
  *graphicsViews() {
    null == this._graphicsViewsFeatureCollectionMap ? null == this._graphicsViews ? yield* [] : yield* this._graphicsViews : yield* this._graphicsViewsFeatureCollectionMap.keys();
  }
  async hitTest(e2, i2) {
    return Array.from(this.graphicsViews(), (i3) => {
      const s = i3.hitTest(e2);
      if (null != this._graphicsViewsFeatureCollectionMap) {
        const e3 = this._graphicsViewsFeatureCollectionMap.get(i3);
        for (const i4 of s)
          !i4.popupTemplate && e3.popupTemplate && (i4.popupTemplate = e3.popupTemplate), i4.sourceLayer = i4.layer = this.layer;
      }
      return s;
    }).flat().map((i3) => ({ type: "graphic", graphic: i3, layer: this.layer, mapPoint: e2 }));
  }
  highlight(e2) {
    let r2;
    "number" == typeof e2 ? r2 = [e2] : e2 instanceof h2 ? r2 = [e2.uid] : Array.isArray(e2) && e2.length > 0 ? r2 = "number" == typeof e2[0] ? e2 : e2.map((e3) => e3 && e3.uid) : V.isCollection(e2) && (r2 = e2.map((e3) => e3 && e3.uid).toArray());
    const a3 = r2 == null ? void 0 : r2.filter(R);
    return (a3 == null ? void 0 : a3.length) ? (this._addHighlight(a3), { remove: () => {
      this._removeHighlight(a3);
    } }) : m;
  }
  update(e2) {
    for (const i2 of this.graphicsViews())
      i2.processUpdate(e2);
  }
  attach() {
    const e2 = this.view, i2 = () => this.requestUpdate(), s = this.layer.featureCollections;
    if (null != s && s.length) {
      this._graphicsViewsFeatureCollectionMap = /* @__PURE__ */ new Map();
      for (const t of s) {
        const s2 = new i(this.view.featuresTilingScheme), a3 = new oe({ view: e2, graphics: t.source, renderer: t.renderer, requestUpdateCallback: i2, container: s2 });
        this._graphicsViewsFeatureCollectionMap.set(a3, t), this.container.addChild(a3.container), this.addHandles([l(() => t.visible, (e3) => a3.container.visible = e3, h), l(() => a3.updating, () => this.notifyChange("updating"), h)], f2);
      }
      this._updateHighlight();
    } else
      null != this.layer.sublayers && this.addHandles(a2(() => this.layer.sublayers, "change", () => this._createGraphicsViews(), { onListenerAdd: () => this._createGraphicsViews(), onListenerRemove: () => this._destroyGraphicsViews() }), u);
  }
  detach() {
    this._destroyGraphicsViews(), this.removeHandles(u);
  }
  moveStart() {
  }
  moveEnd() {
  }
  viewChange() {
    for (const e2 of this.graphicsViews())
      e2.viewChange();
  }
  isUpdating() {
    for (const e2 of this.graphicsViews())
      if (e2.updating)
        return true;
    return false;
  }
  _destroyGraphicsViews() {
    this.container.removeAllChildren(), this.removeHandles(f2);
    for (const e2 of this.graphicsViews())
      e2.destroy();
    this._graphicsViews = null, this._graphicsViewsFeatureCollectionMap = null;
  }
  _createGraphicsViews() {
    if (this._destroyGraphicsViews(), null == this.layer.sublayers)
      return;
    const e2 = [], i2 = this.view, s = () => this.requestUpdate();
    for (const t of this.layer.sublayers) {
      const a3 = new h3(), o = new i(this.view.featuresTilingScheme);
      o.fadeTransitionEnabled = true;
      const l2 = new oe({ view: i2, graphics: t.graphics, requestUpdateCallback: s, container: o });
      this.addHandles([t.on("graphic-update", l2.graphicUpdateHandler), l(() => t.visible, (e3) => l2.container.visible = e3, h), l(() => l2.updating, () => this.notifyChange("updating"), h)], f2), a3.addChild(l2.container), this.container.addChild(a3), e2.push(l2);
    }
    this._graphicsViews = e2, this._updateHighlight();
  }
  _addHighlight(e2) {
    for (const i2 of e2)
      if (this._highlightIds.has(i2)) {
        const e3 = this._highlightIds.get(i2);
        this._highlightIds.set(i2, e3 + 1);
      } else
        this._highlightIds.set(i2, 1);
    this._updateHighlight();
  }
  _removeHighlight(e2) {
    for (const i2 of e2)
      if (this._highlightIds.has(i2)) {
        const e3 = this._highlightIds.get(i2) - 1;
        0 === e3 ? this._highlightIds.delete(i2) : this._highlightIds.set(i2, e3);
      }
    this._updateHighlight();
  }
  _updateHighlight() {
    const e2 = Array.from(this._highlightIds.keys());
    for (const i2 of this.graphicsViews())
      i2.setHighlight(e2);
  }
};
w = e([a("esri.views.2d.layers.MapNotesLayerView2D")], w);
var y = w;
export {
  y as default
};
//# sourceMappingURL=MapNotesLayerView2D-6OTYISHJ.js.map
