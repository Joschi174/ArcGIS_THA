import {
  l as l2
} from "./chunk-4EO4UJYA.js";
import {
  s as s4
} from "./chunk-3HEHFNVB.js";
import {
  c
} from "./chunk-A4SZU67B.js";
import {
  o
} from "./chunk-7KNADJUA.js";
import {
  r
} from "./chunk-NMXESCE4.js";
import {
  l
} from "./chunk-O6HKLIZS.js";
import {
  s as s3
} from "./chunk-RRCNLKGG.js";
import {
  y
} from "./chunk-DUGCD7YI.js";
import {
  a2
} from "./chunk-3CMERT4A.js";
import {
  e
} from "./chunk-ZQWMLUHC.js";
import {
  d
} from "./chunk-7LFT2RDJ.js";
import {
  s2 as s,
  s3 as s2
} from "./chunk-5QASCMFT.js";
import {
  a
} from "./chunk-GHZEFXB4.js";

// node_modules/@arcgis/core/webdoc/support/SlideThumbnail.js
var t;
var p = t = class extends l {
  constructor() {
    super(...arguments), this.url = "";
  }
  destroy() {
    this.url = "";
  }
  clone() {
    return new t({ url: this.url });
  }
};
e([y({ type: String, json: { write: { isRequired: true } } })], p.prototype, "url", void 0), p = t = e([a2("esri.webdoc.support.SlideThumbnail")], p);

// node_modules/@arcgis/core/webmap/Bookmark.js
var y2;
var d2 = y2 = class extends s4(l) {
  constructor(t2) {
    super(t2), this.name = null, this.thumbnail = new p(), this.timeExtent = null;
  }
  castThumbnail(t2) {
    return "string" == typeof t2 ? new p({ url: t2 }) : d(p, t2);
  }
  set viewpoint(t2) {
    const { targetGeometry: e2, scale: o2 } = t2;
    null != e2 && "point" === e2.type && null == o2 && s.getLogger(this).warn("Bookmark.viewpoint should include 'scale' when its targetGeometry is a point.", t2), this._set("viewpoint", t2);
  }
  readViewpoint(t2, e2) {
    const { extent: r2, viewpoint: i } = e2;
    return l2.fromJSON(i || { targetGeometry: r2 });
  }
  writeViewpoint(t2, e2, o2, i) {
    if (!t2)
      return;
    const { targetGeometry: n } = t2;
    if (null == n || "extent" === n.type)
      null != n && (e2.extent = n.toJSON()), e2[o2] = t2.toJSON();
    else {
      const t3 = "Bookmark.viewpoint cannot be written to JSON when the viewpoint's targetGeometry is not an extent.";
      (i == null ? void 0 : i.messages) ? i.messages.push(new s2("property:unsupported", t3)) : s.getLogger(this).error(t3);
    }
  }
  clone() {
    return new y2(a({ name: this.name, thumbnail: this.thumbnail, timeExtent: this.timeExtent, viewpoint: this.viewpoint }));
  }
};
e([y({ type: String, nonNullable: true, json: { write: { isRequired: true } } })], d2.prototype, "name", void 0), e([y({ type: p, json: { write: { overridePolicy: (t2) => ({ enabled: !(!t2 || !t2.url) }) } } })], d2.prototype, "thumbnail", void 0), e([s3("thumbnail")], d2.prototype, "castThumbnail", null), e([y({ type: c, json: { write: true } })], d2.prototype, "timeExtent", void 0), e([y({ type: l2, nonNullable: true, json: { write: true } })], d2.prototype, "viewpoint", null), e([o("viewpoint", ["extent", "viewpoint"])], d2.prototype, "readViewpoint", null), e([r("viewpoint")], d2.prototype, "writeViewpoint", null), d2 = y2 = e([a2("esri.webmap.Bookmark")], d2);
var f = d2;

export {
  p,
  f
};
//# sourceMappingURL=chunk-Y6W5QYJV.js.map
