{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/form.js"],
  "sourcesContent": ["/*!\r\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\r\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\r\n * v1.9.2\r\n */\r\nimport { q as queryElementRoots, c as closestElementCrossShadowBoundary } from './dom.js';\r\nimport { h } from '@stencil/core/internal/client/index.js';\r\n\r\n(function(prototype) {\r\n  if (typeof prototype.requestSubmit == \"function\") return\r\n\r\n  prototype.requestSubmit = function(submitter) {\r\n    if (submitter) {\r\n      validateSubmitter(submitter, this);\r\n      submitter.click();\r\n    } else {\r\n      submitter = document.createElement(\"input\");\r\n      submitter.type = \"submit\";\r\n      submitter.hidden = true;\r\n      this.appendChild(submitter);\r\n      submitter.click();\r\n      this.removeChild(submitter);\r\n    }\r\n  };\r\n\r\n  function validateSubmitter(submitter, form) {\r\n    submitter instanceof HTMLElement || raise(TypeError, \"parameter 1 is not of type 'HTMLElement'\");\r\n    submitter.type == \"submit\" || raise(TypeError, \"The specified element is not a submit button\");\r\n    submitter.form == form || raise(DOMException, \"The specified element is not owned by this form element\", \"NotFoundError\");\r\n  }\r\n\r\n  function raise(errorConstructor, message, name) {\r\n    throw new errorConstructor(\"Failed to execute 'requestSubmit' on 'HTMLFormElement': \" + message + \".\", name)\r\n  }\r\n})(HTMLFormElement.prototype);\r\n\r\n/**\r\n * Exported for testing purposes.\r\n */\r\nconst hiddenFormInputSlotName = \"hidden-form-input\";\r\nfunction isCheckable(component) {\r\n  return \"checked\" in component;\r\n}\r\nconst onFormResetMap = new WeakMap();\r\nconst formComponentSet = new WeakSet();\r\n/**\r\n * This helps determine if our form component is part of a composite form-associated component.\r\n *\r\n * @param form\r\n * @param formComponentEl\r\n */\r\nfunction hasRegisteredFormComponentParent(form, formComponentEl) {\r\n  // if we have a parent component using the form ID attribute, we assume it is form-associated\r\n  const hasParentComponentWithFormIdSet = closestElementCrossShadowBoundary(formComponentEl.parentElement, \"[form]\");\r\n  if (hasParentComponentWithFormIdSet) {\r\n    return true;\r\n  }\r\n  // we use events as a way to test for nested form-associated components across shadow bounds\r\n  const formComponentRegisterEventName = \"calciteInternalFormComponentRegister\";\r\n  let hasRegisteredFormComponentParent = false;\r\n  form.addEventListener(formComponentRegisterEventName, (event) => {\r\n    hasRegisteredFormComponentParent = event\r\n      .composedPath()\r\n      .some((element) => formComponentSet.has(element));\r\n    event.stopPropagation();\r\n  }, { once: true });\r\n  formComponentEl.dispatchEvent(new CustomEvent(formComponentRegisterEventName, {\r\n    bubbles: true,\r\n    composed: true,\r\n  }));\r\n  return hasRegisteredFormComponentParent;\r\n}\r\n/**\r\n * Helper to submit a form.\r\n *\r\n * @param component\r\n * @returns true if its associated form was submitted, false otherwise.\r\n */\r\nfunction submitForm(component) {\r\n  const { formEl } = component;\r\n  if (!formEl) {\r\n    return false;\r\n  }\r\n  formEl.requestSubmit();\r\n  return true;\r\n}\r\n/**\r\n * Helper to reset a form.\r\n *\r\n * @param component\r\n */\r\nfunction resetForm(component) {\r\n  component.formEl?.reset();\r\n}\r\n/**\r\n * Helper to set up form interactions on connectedCallback.\r\n *\r\n * @param component\r\n */\r\nfunction connectForm(component) {\r\n  const { el, value } = component;\r\n  const associatedForm = findAssociatedForm(component);\r\n  if (!associatedForm || hasRegisteredFormComponentParent(associatedForm, el)) {\r\n    return;\r\n  }\r\n  component.formEl = associatedForm;\r\n  component.defaultValue = value;\r\n  if (isCheckable(component)) {\r\n    component.defaultChecked = component.checked;\r\n  }\r\n  const boundOnFormReset = (component.onFormReset || onFormReset).bind(component);\r\n  associatedForm.addEventListener(\"reset\", boundOnFormReset);\r\n  onFormResetMap.set(component.el, boundOnFormReset);\r\n  formComponentSet.add(el);\r\n}\r\n/**\r\n * Utility method to find a form-component's associated form element.\r\n *\r\n * @param component\r\n */\r\nfunction findAssociatedForm(component) {\r\n  const { el, form } = component;\r\n  return form\r\n    ? queryElementRoots(el, { id: form })\r\n    : closestElementCrossShadowBoundary(el, \"form\");\r\n}\r\nfunction onFormReset() {\r\n  if (isCheckable(this)) {\r\n    this.checked = this.defaultChecked;\r\n    return;\r\n  }\r\n  this.value = this.defaultValue;\r\n}\r\n/**\r\n * Helper to tear down form interactions on disconnectedCallback.\r\n *\r\n * @param component\r\n */\r\nfunction disconnectForm(component) {\r\n  const { el, formEl } = component;\r\n  if (!formEl) {\r\n    return;\r\n  }\r\n  const boundOnFormReset = onFormResetMap.get(el);\r\n  formEl.removeEventListener(\"reset\", boundOnFormReset);\r\n  onFormResetMap.delete(el);\r\n  component.formEl = null;\r\n  formComponentSet.delete(el);\r\n}\r\n/**\r\n * Helper for setting the default value on initialization after connectedCallback.\r\n *\r\n * Note that this is only needed if the default value cannot be determined on connectedCallback.\r\n *\r\n * @param component\r\n * @param value\r\n */\r\nfunction afterConnectDefaultValueSet(component, value) {\r\n  component.defaultValue = value;\r\n}\r\nconst hiddenInputChangeHandler = (event) => {\r\n  event.target.dispatchEvent(new CustomEvent(\"calciteInternalHiddenInputChange\", { bubbles: true }));\r\n};\r\nconst removeHiddenInputChangeEventListener = (input) => input.removeEventListener(\"change\", hiddenInputChangeHandler);\r\n/**\r\n * Helper for maintaining a form-associated's hidden input in sync with the component.\r\n *\r\n * Based on Ionic's approach: https://github.com/ionic-team/ionic-framework/blob/e4bf052794af9aac07f887013b9250d2a045eba3/core/src/utils/helpers.ts#L198\r\n *\r\n * @param component\r\n */\r\nfunction syncHiddenFormInput(component) {\r\n  const { el, formEl, name, value } = component;\r\n  const { ownerDocument } = el;\r\n  const inputs = el.querySelectorAll(`input[slot=\"${hiddenFormInputSlotName}\"]`);\r\n  if (!formEl || !name) {\r\n    inputs.forEach((input) => {\r\n      removeHiddenInputChangeEventListener(input);\r\n      input.remove();\r\n    });\r\n    return;\r\n  }\r\n  const values = Array.isArray(value) ? value : [value];\r\n  const extra = [];\r\n  const seen = new Set();\r\n  inputs.forEach((input) => {\r\n    const valueMatch = values.find((val) => \r\n    /* intentional non-strict equality check */\r\n    val == input.value);\r\n    if (valueMatch != null) {\r\n      seen.add(valueMatch);\r\n      defaultSyncHiddenFormInput(component, input, valueMatch);\r\n    }\r\n    else {\r\n      extra.push(input);\r\n    }\r\n  });\r\n  let docFrag;\r\n  values.forEach((value) => {\r\n    if (seen.has(value)) {\r\n      return;\r\n    }\r\n    let input = extra.pop();\r\n    if (!input) {\r\n      input = ownerDocument.createElement(\"input\");\r\n      input.slot = hiddenFormInputSlotName;\r\n    }\r\n    if (!docFrag) {\r\n      docFrag = ownerDocument.createDocumentFragment();\r\n    }\r\n    docFrag.append(input);\r\n    // emits when hidden input is autofilled\r\n    input.addEventListener(\"change\", hiddenInputChangeHandler);\r\n    defaultSyncHiddenFormInput(component, input, value);\r\n  });\r\n  if (docFrag) {\r\n    el.append(docFrag);\r\n  }\r\n  extra.forEach((input) => {\r\n    removeHiddenInputChangeEventListener(input);\r\n    input.remove();\r\n  });\r\n}\r\nfunction defaultSyncHiddenFormInput(component, input, value) {\r\n  const { defaultValue, disabled, form, name, required } = component;\r\n  // keep in sync to prevent losing reset value\r\n  input.defaultValue = defaultValue;\r\n  input.disabled = disabled;\r\n  input.name = name;\r\n  input.required = required;\r\n  input.tabIndex = -1;\r\n  // we set the attr as the prop is read-only\r\n  if (form) {\r\n    input.setAttribute(\"form\", form);\r\n  }\r\n  else {\r\n    input.removeAttribute(\"form\");\r\n  }\r\n  if (isCheckable(component)) {\r\n    input.checked = component.checked;\r\n    // keep in sync to prevent losing reset value\r\n    input.defaultChecked = component.defaultChecked;\r\n    // heuristic to support default/on mode from https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\r\n    input.value = component.checked ? value || \"on\" : \"\";\r\n  }\r\n  else {\r\n    input.value = value || \"\";\r\n  }\r\n  component.syncHiddenFormInput?.(input);\r\n}\r\n/**\r\n * Helper to render the slot for form-associated component's hidden input.\r\n *\r\n * If the component has a default slot, this must be placed at the bottom of the component's root container to ensure it is the last child.\r\n *\r\n * render(): VNode {\r\n *   <Host>\r\n *     <div class={CSS.container}>\r\n *     // ...\r\n *     <HiddenFormInputSlot component={this} />\r\n *     </div>\r\n *   </Host>\r\n * }\r\n *\r\n * Note that the hidden-form-input Sass mixin must be added to the component's style to apply specific styles.\r\n *\r\n * @param root0\r\n * @param root0.component\r\n */\r\nconst HiddenFormInputSlot = ({ component, }) => {\r\n  syncHiddenFormInput(component);\r\n  return h(\"slot\", { name: hiddenFormInputSlotName });\r\n};\r\n\r\nexport { HiddenFormInputSlot as H, afterConnectDefaultValueSet as a, connectForm as c, disconnectForm as d, findAssociatedForm as f, resetForm as r, submitForm as s };\r\n"],
  "mappings": "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",
  "names": ["hasRegisteredFormComponentParent", "value"]
}
